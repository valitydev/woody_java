/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class OldSchool implements org.apache.thrift.TBase<OldSchool, OldSchool._Fields>, java.io.Serializable, Cloneable, Comparable<OldSchool> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OldSchool");

    private static final org.apache.thrift.protocol.TField IM_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("im_int", org.apache.thrift.protocol.TType.I16, (short) 1);
    private static final org.apache.thrift.protocol.TField IM_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("im_str", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField IM_BIG_FIELD_DESC = new org.apache.thrift.protocol.TField("im_big", org.apache.thrift.protocol.TType.LIST, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OldSchoolStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OldSchoolTupleSchemeFactory();

    public short im_int; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String im_str; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> im_big; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        IM_INT((short) 1, "im_int"),
        IM_STR((short) 2, "im_str"),
        IM_BIG((short) 3, "im_big");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // IM_INT
                    return IM_INT;
                case 2: // IM_STR
                    return IM_STR;
                case 3: // IM_BIG
                    return IM_BIG;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __IM_INT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IM_INT, new org.apache.thrift.meta_data.FieldMetaData("im_int", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
        tmpMap.put(_Fields.IM_STR, new org.apache.thrift.meta_data.FieldMetaData("im_str", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.IM_BIG, new org.apache.thrift.meta_data.FieldMetaData("im_big", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OldSchool.class, metaDataMap);
    }

    public OldSchool() {
    }

    public OldSchool(
            short im_int,
            java.lang.String im_str,
            java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> im_big) {
        this();
        this.im_int = im_int;
        setIm_intIsSet(true);
        this.im_str = im_str;
        this.im_big = im_big;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OldSchool(OldSchool other) {
        __isset_bitfield = other.__isset_bitfield;
        this.im_int = other.im_int;
        if (other.isSetIm_str()) {
            this.im_str = other.im_str;
        }
        if (other.isSetIm_big()) {
            java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> __this__im_big = new java.util.ArrayList<java.util.Map<java.lang.Integer, java.lang.String>>(other.im_big.size());
            for (java.util.Map<java.lang.Integer, java.lang.String> other_element : other.im_big) {
                java.util.Map<java.lang.Integer, java.lang.String> __this__im_big_copy = new java.util.HashMap<java.lang.Integer, java.lang.String>(other_element);
                __this__im_big.add(__this__im_big_copy);
            }
            this.im_big = __this__im_big;
        }
    }

    @Override
    public OldSchool deepCopy() {
        return new OldSchool(this);
    }

    @Override
    public void clear() {
        setIm_intIsSet(false);
        this.im_int = 0;
        this.im_str = null;
        this.im_big = null;
    }

    public short getIm_int() {
        return this.im_int;
    }

    public OldSchool setIm_int(short im_int) {
        this.im_int = im_int;
        setIm_intIsSet(true);
        return this;
    }

    public void unsetIm_int() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IM_INT_ISSET_ID);
    }

    /** Returns true if field im_int is set (has been assigned a value) and false otherwise */
    public boolean isSetIm_int() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IM_INT_ISSET_ID);
    }

    public void setIm_intIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IM_INT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getIm_str() {
        return this.im_str;
    }

    public OldSchool setIm_str(@org.apache.thrift.annotation.Nullable java.lang.String im_str) {
        this.im_str = im_str;
        return this;
    }

    public void unsetIm_str() {
        this.im_str = null;
    }

    /** Returns true if field im_str is set (has been assigned a value) and false otherwise */
    public boolean isSetIm_str() {
        return this.im_str != null;
    }

    public void setIm_strIsSet(boolean value) {
        if (!value) {
            this.im_str = null;
        }
    }

    public int getIm_bigSize() {
        return (this.im_big == null) ? 0 : this.im_big.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.Map<java.lang.Integer, java.lang.String>> getIm_bigIterator() {
        return (this.im_big == null) ? null : this.im_big.iterator();
    }

    public void addToIm_big(java.util.Map<java.lang.Integer, java.lang.String> elem) {
        if (this.im_big == null) {
            this.im_big = new java.util.ArrayList<java.util.Map<java.lang.Integer, java.lang.String>>();
        }
        this.im_big.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> getIm_big() {
        return this.im_big;
    }

    public OldSchool setIm_big(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> im_big) {
        this.im_big = im_big;
        return this;
    }

    public void unsetIm_big() {
        this.im_big = null;
    }

    /** Returns true if field im_big is set (has been assigned a value) and false otherwise */
    public boolean isSetIm_big() {
        return this.im_big != null;
    }

    public void setIm_bigIsSet(boolean value) {
        if (!value) {
            this.im_big = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case IM_INT:
                if (value == null) {
                    unsetIm_int();
                } else {
                    setIm_int((java.lang.Short) value);
                }
                break;

            case IM_STR:
                if (value == null) {
                    unsetIm_str();
                } else {
                    setIm_str((java.lang.String) value);
                }
                break;

            case IM_BIG:
                if (value == null) {
                    unsetIm_big();
                } else {
                    setIm_big((java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case IM_INT:
                return getIm_int();

            case IM_STR:
                return getIm_str();

            case IM_BIG:
                return getIm_big();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case IM_INT:
                return isSetIm_int();
            case IM_STR:
                return isSetIm_str();
            case IM_BIG:
                return isSetIm_big();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof OldSchool)
            return this.equals((OldSchool) that);
        return false;
    }

    public boolean equals(OldSchool that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_im_int = true;
        boolean that_present_im_int = true;
        if (this_present_im_int || that_present_im_int) {
            if (!(this_present_im_int && that_present_im_int))
                return false;
            if (this.im_int != that.im_int)
                return false;
        }

        boolean this_present_im_str = true && this.isSetIm_str();
        boolean that_present_im_str = true && that.isSetIm_str();
        if (this_present_im_str || that_present_im_str) {
            if (!(this_present_im_str && that_present_im_str))
                return false;
            if (!this.im_str.equals(that.im_str))
                return false;
        }

        boolean this_present_im_big = true && this.isSetIm_big();
        boolean that_present_im_big = true && that.isSetIm_big();
        if (this_present_im_big || that_present_im_big) {
            if (!(this_present_im_big && that_present_im_big))
                return false;
            if (!this.im_big.equals(that.im_big))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + im_int;

        hashCode = hashCode * 8191 + ((isSetIm_str()) ? 131071 : 524287);
        if (isSetIm_str())
            hashCode = hashCode * 8191 + im_str.hashCode();

        hashCode = hashCode * 8191 + ((isSetIm_big()) ? 131071 : 524287);
        if (isSetIm_big())
            hashCode = hashCode * 8191 + im_big.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(OldSchool other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetIm_int(), other.isSetIm_int());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIm_int()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_int, other.im_int);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetIm_str(), other.isSetIm_str());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIm_str()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_str, other.im_str);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetIm_big(), other.isSetIm_big());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIm_big()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_big, other.im_big);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("OldSchool(");
        boolean first = true;

        sb.append("im_int:");
        sb.append(this.im_int);
        first = false;
        if (!first) sb.append(", ");
        sb.append("im_str:");
        if (this.im_str == null) {
            sb.append("null");
        } else {
            sb.append(this.im_str);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("im_big:");
        if (this.im_big == null) {
            sb.append("null");
        } else {
            sb.append(this.im_big);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class OldSchoolStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public OldSchoolStandardScheme getScheme() {
            return new OldSchoolStandardScheme();
        }
    }

    private static class OldSchoolStandardScheme extends org.apache.thrift.scheme.StandardScheme<OldSchool> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, OldSchool struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IM_INT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.im_int = iprot.readI16();
                            struct.setIm_intIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IM_STR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.im_str = iprot.readString();
                            struct.setIm_strIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // IM_BIG
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.im_big = new java.util.ArrayList<java.util.Map<java.lang.Integer, java.lang.String>>(_list0.size);
                                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.String> _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    {
                                        org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                                        _elem1 = new java.util.HashMap<java.lang.Integer, java.lang.String>(2 * _map3.size);
                                        int _key4;
                                        @org.apache.thrift.annotation.Nullable java.lang.String _val5;
                                        for (int _i6 = 0; _i6 < _map3.size; ++_i6) {
                                            _key4 = iprot.readI32();
                                            _val5 = iprot.readString();
                                            _elem1.put(_key4, _val5);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.im_big.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setIm_bigIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, OldSchool struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(IM_INT_FIELD_DESC);
            oprot.writeI16(struct.im_int);
            oprot.writeFieldEnd();
            if (struct.im_str != null) {
                oprot.writeFieldBegin(IM_STR_FIELD_DESC);
                oprot.writeString(struct.im_str);
                oprot.writeFieldEnd();
            }
            if (struct.im_big != null) {
                oprot.writeFieldBegin(IM_BIG_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.im_big.size()));
                    for (java.util.Map<java.lang.Integer, java.lang.String> _iter7 : struct.im_big) {
                        {
                            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter7.size()));
                            for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter8 : _iter7.entrySet()) {
                                oprot.writeI32(_iter8.getKey());
                                oprot.writeString(_iter8.getValue());
                            }
                            oprot.writeMapEnd();
                        }
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class OldSchoolTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public OldSchoolTupleScheme getScheme() {
            return new OldSchoolTupleScheme();
        }
    }

    private static class OldSchoolTupleScheme extends org.apache.thrift.scheme.TupleScheme<OldSchool> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, OldSchool struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetIm_int()) {
                optionals.set(0);
            }
            if (struct.isSetIm_str()) {
                optionals.set(1);
            }
            if (struct.isSetIm_big()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetIm_int()) {
                oprot.writeI16(struct.im_int);
            }
            if (struct.isSetIm_str()) {
                oprot.writeString(struct.im_str);
            }
            if (struct.isSetIm_big()) {
                {
                    oprot.writeI32(struct.im_big.size());
                    for (java.util.Map<java.lang.Integer, java.lang.String> _iter9 : struct.im_big) {
                        {
                            oprot.writeI32(_iter9.size());
                            for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter10 : _iter9.entrySet()) {
                                oprot.writeI32(_iter10.getKey());
                                oprot.writeString(_iter10.getValue());
                            }
                        }
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, OldSchool struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.im_int = iprot.readI16();
                struct.setIm_intIsSet(true);
            }
            if (incoming.get(1)) {
                struct.im_str = iprot.readString();
                struct.setIm_strIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list11 = iprot.readListBegin(org.apache.thrift.protocol.TType.MAP);
                    struct.im_big = new java.util.ArrayList<java.util.Map<java.lang.Integer, java.lang.String>>(_list11.size);
                    @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.String> _elem12;
                    for (int _i13 = 0; _i13 < _list11.size; ++_i13) {
                        {
                            org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING);
                            _elem12 = new java.util.HashMap<java.lang.Integer, java.lang.String>(2 * _map14.size);
                            int _key15;
                            @org.apache.thrift.annotation.Nullable java.lang.String _val16;
                            for (int _i17 = 0; _i17 < _map14.size; ++_i17) {
                                _key15 = iprot.readI32();
                                _val16 = iprot.readString();
                                _elem12.put(_key15, _val16);
                            }
                        }
                        struct.im_big.add(_elem12);
                    }
                }
                struct.setIm_bigIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

