/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-06-21")
public class Reuse implements org.apache.thrift.TBase<Reuse, Reuse._Fields>, java.io.Serializable, Cloneable, Comparable<Reuse> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Reuse");

    private static final org.apache.thrift.protocol.TField VAL1_FIELD_DESC = new org.apache.thrift.protocol.TField("val1", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField VAL2_FIELD_DESC = new org.apache.thrift.protocol.TField("val2", org.apache.thrift.protocol.TType.SET, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReuseStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReuseTupleSchemeFactory();

    public int val1; // required
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> val2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        VAL1((short) 1, "val1"),
        VAL2((short) 2, "val2");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // VAL1
                    return VAL1;
                case 2: // VAL2
                    return VAL2;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __VAL1_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VAL1, new org.apache.thrift.meta_data.FieldMetaData("val1", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.VAL2, new org.apache.thrift.meta_data.FieldMetaData("val2", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Reuse.class, metaDataMap);
    }

    public Reuse() {
    }

    public Reuse(
            int val1,
            java.util.Set<java.lang.String> val2) {
        this();
        this.val1 = val1;
        setVal1IsSet(true);
        this.val2 = val2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Reuse(Reuse other) {
        __isset_bitfield = other.__isset_bitfield;
        this.val1 = other.val1;
        if (other.isSetVal2()) {
            java.util.Set<java.lang.String> __this__val2 = new java.util.HashSet<java.lang.String>(other.val2);
            this.val2 = __this__val2;
        }
    }

    @Override
    public Reuse deepCopy() {
        return new Reuse(this);
    }

    @Override
    public void clear() {
        setVal1IsSet(false);
        this.val1 = 0;
        if (this.val2 != null) {
            this.val2.clear();
        }
    }

    public int getVal1() {
        return this.val1;
    }

    public Reuse setVal1(int val1) {
        this.val1 = val1;
        setVal1IsSet(true);
        return this;
    }

    public void unsetVal1() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VAL1_ISSET_ID);
    }

    /** Returns true if field val1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVal1() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VAL1_ISSET_ID);
    }

    public void setVal1IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VAL1_ISSET_ID, value);
    }

    public int getVal2Size() {
        return (this.val2 == null) ? 0 : this.val2.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getVal2Iterator() {
        return (this.val2 == null) ? null : this.val2.iterator();
    }

    public void addToVal2(java.lang.String elem) {
        if (this.val2 == null) {
            this.val2 = new java.util.HashSet<java.lang.String>();
        }
        this.val2.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.String> getVal2() {
        return this.val2;
    }

    public Reuse setVal2(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> val2) {
        this.val2 = val2;
        return this;
    }

    public void unsetVal2() {
        this.val2 = null;
    }

    /** Returns true if field val2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVal2() {
        return this.val2 != null;
    }

    public void setVal2IsSet(boolean value) {
        if (!value) {
            this.val2 = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case VAL1:
                if (value == null) {
                    unsetVal1();
                } else {
                    setVal1((java.lang.Integer) value);
                }
                break;

            case VAL2:
                if (value == null) {
                    unsetVal2();
                } else {
                    setVal2((java.util.Set<java.lang.String>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case VAL1:
                return getVal1();

            case VAL2:
                return getVal2();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case VAL1:
                return isSetVal1();
            case VAL2:
                return isSetVal2();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof Reuse)
            return this.equals((Reuse) that);
        return false;
    }

    public boolean equals(Reuse that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_val1 = true;
        boolean that_present_val1 = true;
        if (this_present_val1 || that_present_val1) {
            if (!(this_present_val1 && that_present_val1))
                return false;
            if (this.val1 != that.val1)
                return false;
        }

        boolean this_present_val2 = true && this.isSetVal2();
        boolean that_present_val2 = true && that.isSetVal2();
        if (this_present_val2 || that_present_val2) {
            if (!(this_present_val2 && that_present_val2))
                return false;
            if (!this.val2.equals(that.val2))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + val1;

        hashCode = hashCode * 8191 + ((isSetVal2()) ? 131071 : 524287);
        if (isSetVal2())
            hashCode = hashCode * 8191 + val2.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Reuse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetVal1(), other.isSetVal1());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVal1()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val1, other.val1);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetVal2(), other.isSetVal2());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVal2()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val2, other.val2);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Reuse(");
        boolean first = true;

        sb.append("val1:");
        sb.append(this.val1);
        first = false;
        if (!first) sb.append(", ");
        sb.append("val2:");
        if (this.val2 == null) {
            sb.append("null");
        } else {
            sb.append(this.val2);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ReuseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public ReuseStandardScheme getScheme() {
            return new ReuseStandardScheme();
        }
    }

    private static class ReuseStandardScheme extends org.apache.thrift.scheme.StandardScheme<Reuse> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Reuse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // VAL1
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.val1 = iprot.readI32();
                            struct.setVal1IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // VAL2
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                                if (struct.val2 == null) {
                                    struct.val2 = new java.util.HashSet<java.lang.String>(2 * _set0.size);
                                }
                                @org.apache.thrift.annotation.Nullable java.lang.String _elem1 = null;
                                for (int _i2 = 0; _i2 < _set0.size; ++_i2) {
                                    _elem1 = iprot.readString();
                                    struct.val2.add(_elem1);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setVal2IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Reuse struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(VAL1_FIELD_DESC);
            oprot.writeI32(struct.val1);
            oprot.writeFieldEnd();
            if (struct.val2 != null) {
                oprot.writeFieldBegin(VAL2_FIELD_DESC);
                {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.val2.size()));
                    for (java.lang.String _iter3 : struct.val2) {
                        oprot.writeString(_iter3);
                    }
                    oprot.writeSetEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ReuseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public ReuseTupleScheme getScheme() {
            return new ReuseTupleScheme();
        }
    }

    private static class ReuseTupleScheme extends org.apache.thrift.scheme.TupleScheme<Reuse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Reuse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetVal1()) {
                optionals.set(0);
            }
            if (struct.isSetVal2()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetVal1()) {
                oprot.writeI32(struct.val1);
            }
            if (struct.isSetVal2()) {
                {
                    oprot.writeI32(struct.val2.size());
                    for (java.lang.String _iter4 : struct.val2) {
                        oprot.writeString(_iter4);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Reuse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.val1 = iprot.readI32();
                struct.setVal1IsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
                    if (struct.val2 == null) {
                        struct.val2 = new java.util.HashSet<java.lang.String>(2 * _set5.size);
                    }
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem6 = null;
                    for (int _i7 = 0; _i7 < _set5.size; ++_i7) {
                        _elem6 = iprot.readString();
                        struct.val2.add(_elem6);
                    }
                }
                struct.setVal2IsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

