/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class DebugProtoTestConstants {

    public static final CompactProtoTestStruct COMPACT_TEST = new CompactProtoTestStruct();

    static {
        COMPACT_TEST.setA_byte((byte) 127);
        COMPACT_TEST.setA_double(5.6788999999999996);
        COMPACT_TEST.setA_i16((short) 32000);
        COMPACT_TEST.setA_i32(1000000000);
        COMPACT_TEST.setA_i64(1099511627775L);
        COMPACT_TEST.setA_string("my string");
        java.util.Map<java.lang.Boolean, java.lang.Byte> tmp724 = new java.util.HashMap<java.lang.Boolean, java.lang.Byte>();
        tmp724.put(false, (byte) 0);
        tmp724.put(true, (byte) 1);

        COMPACT_TEST.setBoolean_byte_map(tmp724);
        java.util.List<java.lang.Boolean> tmp725 = new java.util.ArrayList<java.lang.Boolean>();
        tmp725.add(true);
        tmp725.add(true);
        tmp725.add(true);
        tmp725.add(false);
        tmp725.add(false);
        tmp725.add(false);

        COMPACT_TEST.setBoolean_list(tmp725);
        java.util.Set<java.lang.Boolean> tmp726 = new java.util.HashSet<java.lang.Boolean>();
        tmp726.add(true);
        tmp726.add(false);

        COMPACT_TEST.setBoolean_set(tmp726);
        java.util.Map<java.lang.Byte, java.lang.Boolean> tmp727 = new java.util.HashMap<java.lang.Byte, java.lang.Boolean>();
        tmp727.put((byte) 1, true);
        tmp727.put((byte) 2, false);

        COMPACT_TEST.setByte_boolean_map(tmp727);
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp728 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();
        tmp728.put((byte) 1, (byte) 2);

        COMPACT_TEST.setByte_byte_map(tmp728);
        java.util.Map<java.lang.Byte, java.lang.Double> tmp729 = new java.util.HashMap<java.lang.Byte, java.lang.Double>();
        tmp729.put((byte) 1, 0.1000000000000000);
        tmp729.put((byte) 2, -0.1000000000000000);
        tmp729.put((byte) 3, 1000000.0999999999767169);

        COMPACT_TEST.setByte_double_map(tmp729);
        java.util.Map<java.lang.Byte, java.lang.Short> tmp730 = new java.util.HashMap<java.lang.Byte, java.lang.Short>();
        tmp730.put((byte) 1, (short) 1);
        tmp730.put((byte) 2, (short) -1);
        tmp730.put((byte) 3, (short) 32767);

        COMPACT_TEST.setByte_i16_map(tmp730);
        java.util.Map<java.lang.Byte, java.lang.Integer> tmp731 = new java.util.HashMap<java.lang.Byte, java.lang.Integer>();
        tmp731.put((byte) 1, 1);
        tmp731.put((byte) 2, -1);
        tmp731.put((byte) 3, 2147483647);

        COMPACT_TEST.setByte_i32_map(tmp731);
        java.util.Map<java.lang.Byte, java.lang.Long> tmp732 = new java.util.HashMap<java.lang.Byte, java.lang.Long>();
        tmp732.put((byte) 1, 1L);
        tmp732.put((byte) 2, -1L);
        tmp732.put((byte) 3, 9223372036854775807L);

        COMPACT_TEST.setByte_i64_map(tmp732);
        java.util.List<java.lang.Byte> tmp733 = new java.util.ArrayList<java.lang.Byte>();
        tmp733.add((byte) -127);
        tmp733.add((byte) -1);
        tmp733.add((byte) 0);
        tmp733.add((byte) 1);
        tmp733.add((byte) 127);

        COMPACT_TEST.setByte_list(tmp733);
        java.util.Map<java.lang.Byte, java.util.List<java.lang.Byte>> tmp734 = new java.util.HashMap<java.lang.Byte, java.util.List<java.lang.Byte>>();
        java.util.List<java.lang.Byte> tmp735 = new java.util.ArrayList<java.lang.Byte>();

        tmp734.put((byte) 0, tmp735);
        java.util.List<java.lang.Byte> tmp736 = new java.util.ArrayList<java.lang.Byte>();
        tmp736.add((byte) 1);

        tmp734.put((byte) 1, tmp736);
        java.util.List<java.lang.Byte> tmp737 = new java.util.ArrayList<java.lang.Byte>();
        tmp737.add((byte) 1);
        tmp737.add((byte) 2);

        tmp734.put((byte) 2, tmp737);

        COMPACT_TEST.setByte_list_map(tmp734);
        java.util.Map<java.lang.Byte, java.util.Map<java.lang.Byte, java.lang.Byte>> tmp738 = new java.util.HashMap<java.lang.Byte, java.util.Map<java.lang.Byte, java.lang.Byte>>();
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp739 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();

        tmp738.put((byte) 0, tmp739);
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp740 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();
        tmp740.put((byte) 1, (byte) 1);

        tmp738.put((byte) 1, tmp740);
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp741 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();
        tmp741.put((byte) 1, (byte) 1);
        tmp741.put((byte) 2, (byte) 2);

        tmp738.put((byte) 2, tmp741);

        COMPACT_TEST.setByte_map_map(tmp738);
        java.util.Set<java.lang.Byte> tmp742 = new java.util.HashSet<java.lang.Byte>();
        tmp742.add((byte) -127);
        tmp742.add((byte) -1);
        tmp742.add((byte) 0);
        tmp742.add((byte) 1);
        tmp742.add((byte) 127);

        COMPACT_TEST.setByte_set(tmp742);
        java.util.Map<java.lang.Byte, java.util.Set<java.lang.Byte>> tmp743 = new java.util.HashMap<java.lang.Byte, java.util.Set<java.lang.Byte>>();
        java.util.Set<java.lang.Byte> tmp744 = new java.util.HashSet<java.lang.Byte>();

        tmp743.put((byte) 0, tmp744);
        java.util.Set<java.lang.Byte> tmp745 = new java.util.HashSet<java.lang.Byte>();
        tmp745.add((byte) 1);

        tmp743.put((byte) 1, tmp745);
        java.util.Set<java.lang.Byte> tmp746 = new java.util.HashSet<java.lang.Byte>();
        tmp746.add((byte) 1);
        tmp746.add((byte) 2);

        tmp743.put((byte) 2, tmp746);

        COMPACT_TEST.setByte_set_map(tmp743);
        java.util.Map<java.lang.Byte, java.lang.String> tmp747 = new java.util.HashMap<java.lang.Byte, java.lang.String>();
        tmp747.put((byte) 1, "");
        tmp747.put((byte) 2, "blah");
        tmp747.put((byte) 3, "loooooooooooooong string");

        COMPACT_TEST.setByte_string_map(tmp747);
        java.util.Map<java.lang.Double, java.lang.Byte> tmp748 = new java.util.HashMap<java.lang.Double, java.lang.Byte>();
        tmp748.put(-1.1000000000000001, (byte) 1);
        tmp748.put(1.1000000000000001, (byte) 1);

        COMPACT_TEST.setDouble_byte_map(tmp748);
        java.util.List<java.lang.Double> tmp749 = new java.util.ArrayList<java.lang.Double>();
        tmp749.add(0.1000000000000000);
        tmp749.add(0.2000000000000000);
        tmp749.add(0.3000000000000000);

        COMPACT_TEST.setDouble_list(tmp749);
        java.util.Set<java.lang.Double> tmp750 = new java.util.HashSet<java.lang.Double>();
        tmp750.add(0.1000000000000000);
        tmp750.add(0.2000000000000000);
        tmp750.add(0.3000000000000000);

        COMPACT_TEST.setDouble_set(tmp750);
        Empty tmp751 = new Empty();

        COMPACT_TEST.setEmpty_struct_field(tmp751);
        COMPACT_TEST.setFalse_field(false);
        COMPACT_TEST.setField20000(20000L);
        COMPACT_TEST.setField500(500L);
        COMPACT_TEST.setField5000(5000L);
        java.util.Map<java.lang.Short, java.lang.Byte> tmp752 = new java.util.HashMap<java.lang.Short, java.lang.Byte>();
        tmp752.put((short) -1, (byte) 1);
        tmp752.put((short) 1, (byte) 1);
        tmp752.put((short) 32767, (byte) 1);

        COMPACT_TEST.setI16_byte_map(tmp752);
        java.util.List<java.lang.Short> tmp753 = new java.util.ArrayList<java.lang.Short>();
        tmp753.add((short) -1);
        tmp753.add((short) 0);
        tmp753.add((short) 1);
        tmp753.add((short) 32767);

        COMPACT_TEST.setI16_list(tmp753);
        java.util.Set<java.lang.Short> tmp754 = new java.util.HashSet<java.lang.Short>();
        tmp754.add((short) -1);
        tmp754.add((short) 0);
        tmp754.add((short) 1);
        tmp754.add((short) 32767);

        COMPACT_TEST.setI16_set(tmp754);
        java.util.Map<java.lang.Integer, java.lang.Byte> tmp755 = new java.util.HashMap<java.lang.Integer, java.lang.Byte>();
        tmp755.put(-1, (byte) 1);
        tmp755.put(1, (byte) 1);
        tmp755.put(2147483647, (byte) 1);

        COMPACT_TEST.setI32_byte_map(tmp755);
        java.util.List<java.lang.Integer> tmp756 = new java.util.ArrayList<java.lang.Integer>();
        tmp756.add(-1);
        tmp756.add(0);
        tmp756.add(255);
        tmp756.add(65535);
        tmp756.add(16777215);
        tmp756.add(2147483647);

        COMPACT_TEST.setI32_list(tmp756);
        java.util.Set<java.lang.Integer> tmp757 = new java.util.HashSet<java.lang.Integer>();
        tmp757.add(1);
        tmp757.add(2);
        tmp757.add(3);

        COMPACT_TEST.setI32_set(tmp757);
        java.util.Map<java.lang.Long, java.lang.Byte> tmp758 = new java.util.HashMap<java.lang.Long, java.lang.Byte>();
        tmp758.put(-1L, (byte) 1);
        tmp758.put(0L, (byte) 1);
        tmp758.put(1L, (byte) 1);
        tmp758.put(9223372036854775807L, (byte) 1);

        COMPACT_TEST.setI64_byte_map(tmp758);
        java.util.List<java.lang.Long> tmp759 = new java.util.ArrayList<java.lang.Long>();
        tmp759.add(-1L);
        tmp759.add(0L);
        tmp759.add(255L);
        tmp759.add(65535L);
        tmp759.add(16777215L);
        tmp759.add(4294967295L);
        tmp759.add(1099511627775L);
        tmp759.add(281474976710655L);
        tmp759.add(72057594037927935L);
        tmp759.add(9223372036854775807L);

        COMPACT_TEST.setI64_list(tmp759);
        java.util.Set<java.lang.Long> tmp760 = new java.util.HashSet<java.lang.Long>();
        tmp760.add(-1L);
        tmp760.add(0L);
        tmp760.add(255L);
        tmp760.add(65535L);
        tmp760.add(16777215L);
        tmp760.add(4294967295L);
        tmp760.add(1099511627775L);
        tmp760.add(281474976710655L);
        tmp760.add(72057594037927935L);
        tmp760.add(9223372036854775807L);

        COMPACT_TEST.setI64_set(tmp760);
        java.util.Map<java.util.List<java.lang.Byte>, java.lang.Byte> tmp761 = new java.util.HashMap<java.util.List<java.lang.Byte>, java.lang.Byte>();
        java.util.List<java.lang.Byte> tmp762 = new java.util.ArrayList<java.lang.Byte>();

        tmp761.put(tmp762, (byte) 0);
        java.util.List<java.lang.Byte> tmp763 = new java.util.ArrayList<java.lang.Byte>();
        tmp763.add((byte) 0);
        tmp763.add((byte) 1);

        tmp761.put(tmp763, (byte) 2);
        java.util.List<java.lang.Byte> tmp764 = new java.util.ArrayList<java.lang.Byte>();
        tmp764.add((byte) 1);
        tmp764.add((byte) 2);
        tmp764.add((byte) 3);

        tmp761.put(tmp764, (byte) 1);

        COMPACT_TEST.setList_byte_map(tmp761);
        java.util.Map<java.util.Map<java.lang.Byte, java.lang.Byte>, java.lang.Byte> tmp765 = new java.util.HashMap<java.util.Map<java.lang.Byte, java.lang.Byte>, java.lang.Byte>();
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp766 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();

        tmp765.put(tmp766, (byte) 0);
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp767 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();
        tmp767.put((byte) 1, (byte) 1);

        tmp765.put(tmp767, (byte) 1);
        java.util.Map<java.lang.Byte, java.lang.Byte> tmp768 = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();
        tmp768.put((byte) 2, (byte) 2);

        tmp765.put(tmp768, (byte) 2);

        COMPACT_TEST.setMap_byte_map(tmp765);
        java.util.Map<java.util.Set<java.lang.Byte>, java.lang.Byte> tmp769 = new java.util.HashMap<java.util.Set<java.lang.Byte>, java.lang.Byte>();
        java.util.Set<java.lang.Byte> tmp770 = new java.util.HashSet<java.lang.Byte>();

        tmp769.put(tmp770, (byte) 0);
        java.util.Set<java.lang.Byte> tmp771 = new java.util.HashSet<java.lang.Byte>();
        tmp771.add((byte) 0);
        tmp771.add((byte) 1);

        tmp769.put(tmp771, (byte) 2);
        java.util.Set<java.lang.Byte> tmp772 = new java.util.HashSet<java.lang.Byte>();
        tmp772.add((byte) 1);
        tmp772.add((byte) 2);
        tmp772.add((byte) 3);

        tmp769.put(tmp772, (byte) 1);

        COMPACT_TEST.setSet_byte_map(tmp769);
        java.util.Map<java.lang.String, java.lang.Byte> tmp773 = new java.util.HashMap<java.lang.String, java.lang.Byte>();
        tmp773.put("", (byte) 0);
        tmp773.put("first", (byte) 1);
        tmp773.put("second", (byte) 2);
        tmp773.put("third", (byte) 3);

        COMPACT_TEST.setString_byte_map(tmp773);
        java.util.List<java.lang.String> tmp774 = new java.util.ArrayList<java.lang.String>();
        tmp774.add("first");
        tmp774.add("second");
        tmp774.add("third");

        COMPACT_TEST.setString_list(tmp774);
        java.util.Set<java.lang.String> tmp775 = new java.util.HashSet<java.lang.String>();
        tmp775.add("first");
        tmp775.add("second");
        tmp775.add("third");

        COMPACT_TEST.setString_set(tmp775);
        java.util.List<Empty> tmp776 = new java.util.ArrayList<Empty>();
        Empty tmp777 = new Empty();

        tmp776.add(tmp777);
        Empty tmp778 = new Empty();

        tmp776.add(tmp778);

        COMPACT_TEST.setStruct_list(tmp776);
        java.util.Set<Empty> tmp779 = new java.util.HashSet<Empty>();
        Empty tmp780 = new Empty();

        tmp779.add(tmp780);

        COMPACT_TEST.setStruct_set(tmp779);
        COMPACT_TEST.setTrue_field(true);
    }

    public static final int MYCONST = 2;

    /**
     * This is a docstring on a constant!
     */
    public static final SomeEnum MY_SOME_ENUM = thrift.test.SomeEnum.ONE;

    public static final SomeEnum MY_SOME_ENUM_1 = thrift.test.SomeEnum.ONE;

    public static final java.util.Map<SomeEnum, SomeEnum> MY_ENUM_MAP = new java.util.EnumMap<SomeEnum, SomeEnum>(SomeEnum.class);

    static {
        MY_ENUM_MAP.put(thrift.test.SomeEnum.ONE, thrift.test.SomeEnum.TWO);
    }

    public static final java.util.Map<SomeEnum, StructWithSomeEnum> EXTRA_CRAZY_MAP = new java.util.EnumMap<SomeEnum, StructWithSomeEnum>(SomeEnum.class);

    static {
        StructWithSomeEnum tmp781 = new StructWithSomeEnum();
        tmp781.setBlah(thrift.test.SomeEnum.TWO);

        EXTRA_CRAZY_MAP.put(thrift.test.SomeEnum.ONE, tmp781);
    }

}
