/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SingleMapTestStruct implements org.apache.thrift.TBase<SingleMapTestStruct, SingleMapTestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<SingleMapTestStruct> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SingleMapTestStruct");

    private static final org.apache.thrift.protocol.TField I32_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_map", org.apache.thrift.protocol.TType.MAP, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SingleMapTestStructStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SingleMapTestStructTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.Integer> i32_map; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        I32_MAP((short) 1, "i32_map");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // I32_MAP
                    return I32_MAP;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.I32_MAP, new org.apache.thrift.meta_data.FieldMetaData("i32_map", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SingleMapTestStruct.class, metaDataMap);
    }

    public SingleMapTestStruct() {
    }

    public SingleMapTestStruct(
            java.util.Map<java.lang.Integer, java.lang.Integer> i32_map) {
        this();
        this.i32_map = i32_map;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SingleMapTestStruct(SingleMapTestStruct other) {
        if (other.isSetI32_map()) {
            java.util.Map<java.lang.Integer, java.lang.Integer> __this__i32_map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(other.i32_map);
            this.i32_map = __this__i32_map;
        }
    }

    @Override
    public SingleMapTestStruct deepCopy() {
        return new SingleMapTestStruct(this);
    }

    @Override
    public void clear() {
        this.i32_map = null;
    }

    public int getI32_mapSize() {
        return (this.i32_map == null) ? 0 : this.i32_map.size();
    }

    public void putToI32_map(int key, int val) {
        if (this.i32_map == null) {
            this.i32_map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>();
        }
        this.i32_map.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, java.lang.Integer> getI32_map() {
        return this.i32_map;
    }

    public SingleMapTestStruct setI32_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.Integer> i32_map) {
        this.i32_map = i32_map;
        return this;
    }

    public void unsetI32_map() {
        this.i32_map = null;
    }

    /** Returns true if field i32_map is set (has been assigned a value) and false otherwise */
    public boolean isSetI32_map() {
        return this.i32_map != null;
    }

    public void setI32_mapIsSet(boolean value) {
        if (!value) {
            this.i32_map = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case I32_MAP:
                if (value == null) {
                    unsetI32_map();
                } else {
                    setI32_map((java.util.Map<java.lang.Integer, java.lang.Integer>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case I32_MAP:
                return getI32_map();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case I32_MAP:
                return isSetI32_map();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof SingleMapTestStruct)
            return this.equals((SingleMapTestStruct) that);
        return false;
    }

    public boolean equals(SingleMapTestStruct that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_i32_map = true && this.isSetI32_map();
        boolean that_present_i32_map = true && that.isSetI32_map();
        if (this_present_i32_map || that_present_i32_map) {
            if (!(this_present_i32_map && that_present_i32_map))
                return false;
            if (!this.i32_map.equals(that.i32_map))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetI32_map()) ? 131071 : 524287);
        if (isSetI32_map())
            hashCode = hashCode * 8191 + i32_map.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(SingleMapTestStruct other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetI32_map(), other.isSetI32_map());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI32_map()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_map, other.i32_map);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("SingleMapTestStruct(");
        boolean first = true;

        sb.append("i32_map:");
        if (this.i32_map == null) {
            sb.append("null");
        } else {
            sb.append(this.i32_map);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (i32_map == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'i32_map' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SingleMapTestStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public SingleMapTestStructStandardScheme getScheme() {
            return new SingleMapTestStructStandardScheme();
        }
    }

    private static class SingleMapTestStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<SingleMapTestStruct> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, SingleMapTestStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // I32_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map490 = iprot.readMapBegin();
                                struct.i32_map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(2 * _map490.size);
                                int _key491;
                                int _val492;
                                for (int _i493 = 0; _i493 < _map490.size; ++_i493) {
                                    _key491 = iprot.readI32();
                                    _val492 = iprot.readI32();
                                    struct.i32_map.put(_key491, _val492);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setI32_mapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, SingleMapTestStruct struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.i32_map != null) {
                oprot.writeFieldBegin(I32_MAP_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.i32_map.size()));
                    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter494 : struct.i32_map.entrySet()) {
                        oprot.writeI32(_iter494.getKey());
                        oprot.writeI32(_iter494.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SingleMapTestStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public SingleMapTestStructTupleScheme getScheme() {
            return new SingleMapTestStructTupleScheme();
        }
    }

    private static class SingleMapTestStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<SingleMapTestStruct> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SingleMapTestStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            {
                oprot.writeI32(struct.i32_map.size());
                for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter495 : struct.i32_map.entrySet()) {
                    oprot.writeI32(_iter495.getKey());
                    oprot.writeI32(_iter495.getValue());
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SingleMapTestStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            {
                org.apache.thrift.protocol.TMap _map496 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32);
                struct.i32_map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(2 * _map496.size);
                int _key497;
                int _val498;
                for (int _i499 = 0; _i499 < _map496.size; ++_i499) {
                    _key497 = iprot.readI32();
                    _val498 = iprot.readI32();
                    struct.i32_map.put(_key497, _val498);
                }
            }
            struct.setI32_mapIsSet(true);
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

