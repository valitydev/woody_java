/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Backwards implements org.apache.thrift.TBase<Backwards, Backwards._Fields>, java.io.Serializable, Cloneable, Comparable<Backwards> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Backwards");

    private static final org.apache.thrift.protocol.TField FIRST_TAG2_FIELD_DESC = new org.apache.thrift.protocol.TField("first_tag2", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField SECOND_TAG1_FIELD_DESC = new org.apache.thrift.protocol.TField("second_tag1", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BackwardsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BackwardsTupleSchemeFactory();

    public int first_tag2; // required
    public int second_tag1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        FIRST_TAG2((short) 2, "first_tag2"),
        SECOND_TAG1((short) 1, "second_tag1");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 2: // FIRST_TAG2
                    return FIRST_TAG2;
                case 1: // SECOND_TAG1
                    return SECOND_TAG1;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __FIRST_TAG2_ISSET_ID = 0;
    private static final int __SECOND_TAG1_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.FIRST_TAG2, new org.apache.thrift.meta_data.FieldMetaData("first_tag2", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SECOND_TAG1, new org.apache.thrift.meta_data.FieldMetaData("second_tag1", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Backwards.class, metaDataMap);
    }

    public Backwards() {
    }

    public Backwards(
            int first_tag2,
            int second_tag1) {
        this();
        this.first_tag2 = first_tag2;
        setFirst_tag2IsSet(true);
        this.second_tag1 = second_tag1;
        setSecond_tag1IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Backwards(Backwards other) {
        __isset_bitfield = other.__isset_bitfield;
        this.first_tag2 = other.first_tag2;
        this.second_tag1 = other.second_tag1;
    }

    @Override
    public Backwards deepCopy() {
        return new Backwards(this);
    }

    @Override
    public void clear() {
        setFirst_tag2IsSet(false);
        this.first_tag2 = 0;
        setSecond_tag1IsSet(false);
        this.second_tag1 = 0;
    }

    public int getFirst_tag2() {
        return this.first_tag2;
    }

    public Backwards setFirst_tag2(int first_tag2) {
        this.first_tag2 = first_tag2;
        setFirst_tag2IsSet(true);
        return this;
    }

    public void unsetFirst_tag2() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRST_TAG2_ISSET_ID);
    }

    /** Returns true if field first_tag2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFirst_tag2() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRST_TAG2_ISSET_ID);
    }

    public void setFirst_tag2IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRST_TAG2_ISSET_ID, value);
    }

    public int getSecond_tag1() {
        return this.second_tag1;
    }

    public Backwards setSecond_tag1(int second_tag1) {
        this.second_tag1 = second_tag1;
        setSecond_tag1IsSet(true);
        return this;
    }

    public void unsetSecond_tag1() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECOND_TAG1_ISSET_ID);
    }

    /** Returns true if field second_tag1 is set (has been assigned a value) and false otherwise */
    public boolean isSetSecond_tag1() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECOND_TAG1_ISSET_ID);
    }

    public void setSecond_tag1IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECOND_TAG1_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case FIRST_TAG2:
                if (value == null) {
                    unsetFirst_tag2();
                } else {
                    setFirst_tag2((java.lang.Integer) value);
                }
                break;

            case SECOND_TAG1:
                if (value == null) {
                    unsetSecond_tag1();
                } else {
                    setSecond_tag1((java.lang.Integer) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case FIRST_TAG2:
                return getFirst_tag2();

            case SECOND_TAG1:
                return getSecond_tag1();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case FIRST_TAG2:
                return isSetFirst_tag2();
            case SECOND_TAG1:
                return isSetSecond_tag1();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof Backwards)
            return this.equals((Backwards) that);
        return false;
    }

    public boolean equals(Backwards that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_first_tag2 = true;
        boolean that_present_first_tag2 = true;
        if (this_present_first_tag2 || that_present_first_tag2) {
            if (!(this_present_first_tag2 && that_present_first_tag2))
                return false;
            if (this.first_tag2 != that.first_tag2)
                return false;
        }

        boolean this_present_second_tag1 = true;
        boolean that_present_second_tag1 = true;
        if (this_present_second_tag1 || that_present_second_tag1) {
            if (!(this_present_second_tag1 && that_present_second_tag1))
                return false;
            if (this.second_tag1 != that.second_tag1)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + first_tag2;

        hashCode = hashCode * 8191 + second_tag1;

        return hashCode;
    }

    @Override
    public int compareTo(Backwards other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetFirst_tag2(), other.isSetFirst_tag2());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFirst_tag2()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_tag2, other.first_tag2);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSecond_tag1(), other.isSetSecond_tag1());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSecond_tag1()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second_tag1, other.second_tag1);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Backwards(");
        boolean first = true;

        sb.append("first_tag2:");
        sb.append(this.first_tag2);
        first = false;
        if (!first) sb.append(", ");
        sb.append("second_tag1:");
        sb.append(this.second_tag1);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class BackwardsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public BackwardsStandardScheme getScheme() {
            return new BackwardsStandardScheme();
        }
    }

    private static class BackwardsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Backwards> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Backwards struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 2: // FIRST_TAG2
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.first_tag2 = iprot.readI32();
                            struct.setFirst_tag2IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // SECOND_TAG1
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.second_tag1 = iprot.readI32();
                            struct.setSecond_tag1IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Backwards struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(SECOND_TAG1_FIELD_DESC);
            oprot.writeI32(struct.second_tag1);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FIRST_TAG2_FIELD_DESC);
            oprot.writeI32(struct.first_tag2);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class BackwardsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public BackwardsTupleScheme getScheme() {
            return new BackwardsTupleScheme();
        }
    }

    private static class BackwardsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Backwards> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Backwards struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetFirst_tag2()) {
                optionals.set(0);
            }
            if (struct.isSetSecond_tag1()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetFirst_tag2()) {
                oprot.writeI32(struct.first_tag2);
            }
            if (struct.isSetSecond_tag1()) {
                oprot.writeI32(struct.second_tag1);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Backwards struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.first_tag2 = iprot.readI32();
                struct.setFirst_tag2IsSet(true);
            }
            if (incoming.get(1)) {
                struct.second_tag1 = iprot.readI32();
                struct.setSecond_tag1IsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

