/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SrvSrv {

    public interface Iface {

        public int Janky(int arg) throws org.apache.thrift.TException;

        public void voidMethod() throws org.apache.thrift.TException;

        public int primitiveMethod() throws org.apache.thrift.TException;

        public CompactProtoTestStruct structMethod() throws org.apache.thrift.TException;

        public void methodWithDefaultArgs(int something) throws org.apache.thrift.TException;

        public void onewayMethod() throws org.apache.thrift.TException;

        public boolean declaredExceptionMethod(boolean shouldThrow) throws ExceptionWithAMap, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void Janky(int arg, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void voidMethod(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void primitiveMethod(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void structMethod(org.apache.thrift.async.AsyncMethodCallback<CompactProtoTestStruct> resultHandler) throws org.apache.thrift.TException;

        public void methodWithDefaultArgs(int something, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void onewayMethod(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void declaredExceptionMethod(boolean shouldThrow, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        @Override
        public int Janky(int arg) throws org.apache.thrift.TException {
            send_Janky(arg);
            return recv_Janky();
        }

        public void send_Janky(int arg) throws org.apache.thrift.TException {
            Janky_args args = new Janky_args();
            args.setArg(arg);
            sendBase("Janky", args);
        }

        public int recv_Janky() throws org.apache.thrift.TException {
            Janky_result result = new Janky_result();
            receiveBase(result, "Janky");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Janky failed: unknown result");
        }

        @Override
        public void voidMethod() throws org.apache.thrift.TException {
            send_voidMethod();
            recv_voidMethod();
        }

        public void send_voidMethod() throws org.apache.thrift.TException {
            voidMethod_args args = new voidMethod_args();
            sendBase("voidMethod", args);
        }

        public void recv_voidMethod() throws org.apache.thrift.TException {
            voidMethod_result result = new voidMethod_result();
            receiveBase(result, "voidMethod");
            return;
        }

        @Override
        public int primitiveMethod() throws org.apache.thrift.TException {
            send_primitiveMethod();
            return recv_primitiveMethod();
        }

        public void send_primitiveMethod() throws org.apache.thrift.TException {
            primitiveMethod_args args = new primitiveMethod_args();
            sendBase("primitiveMethod", args);
        }

        public int recv_primitiveMethod() throws org.apache.thrift.TException {
            primitiveMethod_result result = new primitiveMethod_result();
            receiveBase(result, "primitiveMethod");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "primitiveMethod failed: unknown result");
        }

        @Override
        public CompactProtoTestStruct structMethod() throws org.apache.thrift.TException {
            send_structMethod();
            return recv_structMethod();
        }

        public void send_structMethod() throws org.apache.thrift.TException {
            structMethod_args args = new structMethod_args();
            sendBase("structMethod", args);
        }

        public CompactProtoTestStruct recv_structMethod() throws org.apache.thrift.TException {
            structMethod_result result = new structMethod_result();
            receiveBase(result, "structMethod");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "structMethod failed: unknown result");
        }

        @Override
        public void methodWithDefaultArgs(int something) throws org.apache.thrift.TException {
            send_methodWithDefaultArgs(something);
            recv_methodWithDefaultArgs();
        }

        public void send_methodWithDefaultArgs(int something) throws org.apache.thrift.TException {
            methodWithDefaultArgs_args args = new methodWithDefaultArgs_args();
            args.setSomething(something);
            sendBase("methodWithDefaultArgs", args);
        }

        public void recv_methodWithDefaultArgs() throws org.apache.thrift.TException {
            methodWithDefaultArgs_result result = new methodWithDefaultArgs_result();
            receiveBase(result, "methodWithDefaultArgs");
            return;
        }

        @Override
        public void onewayMethod() throws org.apache.thrift.TException {
            send_onewayMethod();
        }

        public void send_onewayMethod() throws org.apache.thrift.TException {
            onewayMethod_args args = new onewayMethod_args();
            sendBaseOneway("onewayMethod", args);
        }

        @Override
        public boolean declaredExceptionMethod(boolean shouldThrow) throws ExceptionWithAMap, org.apache.thrift.TException {
            send_declaredExceptionMethod(shouldThrow);
            return recv_declaredExceptionMethod();
        }

        public void send_declaredExceptionMethod(boolean shouldThrow) throws org.apache.thrift.TException {
            declaredExceptionMethod_args args = new declaredExceptionMethod_args();
            args.setShouldThrow(shouldThrow);
            sendBase("declaredExceptionMethod", args);
        }

        public boolean recv_declaredExceptionMethod() throws ExceptionWithAMap, org.apache.thrift.TException {
            declaredExceptionMethod_result result = new declaredExceptionMethod_result();
            receiveBase(result, "declaredExceptionMethod");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.xwamap != null) {
                throw result.xwamap;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "declaredExceptionMethod failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            @Override
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        @Override
        public void Janky(int arg, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            Janky_call method_call = new Janky_call(arg, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Janky_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private int arg;

            public Janky_call(int arg, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.arg = arg;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Janky", org.apache.thrift.protocol.TMessageType.CALL, 0));
                Janky_args args = new Janky_args();
                args.setArg(arg);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public java.lang.Integer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_Janky();
            }
        }

        @Override
        public void voidMethod(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            voidMethod_call method_call = new voidMethod_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class voidMethod_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public voidMethod_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voidMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
                voidMethod_args args = new voidMethod_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_voidMethod();
                return null;
            }
        }

        @Override
        public void primitiveMethod(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            primitiveMethod_call method_call = new primitiveMethod_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class primitiveMethod_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            public primitiveMethod_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("primitiveMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
                primitiveMethod_args args = new primitiveMethod_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public java.lang.Integer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_primitiveMethod();
            }
        }

        @Override
        public void structMethod(org.apache.thrift.async.AsyncMethodCallback<CompactProtoTestStruct> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            structMethod_call method_call = new structMethod_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class structMethod_call extends org.apache.thrift.async.TAsyncMethodCall<CompactProtoTestStruct> {
            public structMethod_call(org.apache.thrift.async.AsyncMethodCallback<CompactProtoTestStruct> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("structMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
                structMethod_args args = new structMethod_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public CompactProtoTestStruct getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_structMethod();
            }
        }

        @Override
        public void methodWithDefaultArgs(int something, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            methodWithDefaultArgs_call method_call = new methodWithDefaultArgs_call(something, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class methodWithDefaultArgs_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int something;

            public methodWithDefaultArgs_call(int something, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.something = something;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("methodWithDefaultArgs", org.apache.thrift.protocol.TMessageType.CALL, 0));
                methodWithDefaultArgs_args args = new methodWithDefaultArgs_args();
                args.setSomething(something);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_methodWithDefaultArgs();
                return null;
            }
        }

        @Override
        public void onewayMethod(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            onewayMethod_call method_call = new onewayMethod_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class onewayMethod_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public onewayMethod_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onewayMethod", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                onewayMethod_args args = new onewayMethod_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        @Override
        public void declaredExceptionMethod(boolean shouldThrow, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            declaredExceptionMethod_call method_call = new declaredExceptionMethod_call(shouldThrow, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class declaredExceptionMethod_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
            private boolean shouldThrow;

            public declaredExceptionMethod_call(boolean shouldThrow, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.shouldThrow = shouldThrow;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("declaredExceptionMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
                declaredExceptionMethod_args args = new declaredExceptionMethod_args();
                args.setShouldThrow(shouldThrow);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public java.lang.Boolean getResult() throws ExceptionWithAMap, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_declaredExceptionMethod();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("Janky", new Janky());
            processMap.put("voidMethod", new voidMethod());
            processMap.put("primitiveMethod", new primitiveMethod());
            processMap.put("structMethod", new structMethod());
            processMap.put("methodWithDefaultArgs", new methodWithDefaultArgs());
            processMap.put("onewayMethod", new onewayMethod());
            processMap.put("declaredExceptionMethod", new declaredExceptionMethod());
            return processMap;
        }

        public static class Janky<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Janky_args> {
            public Janky() {
                super("Janky");
            }

            @Override
            public Janky_args getEmptyArgsInstance() {
                return new Janky_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public Janky_result getResult(I iface, Janky_args args) throws org.apache.thrift.TException {
                Janky_result result = new Janky_result();
                result.success = iface.Janky(args.arg);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class voidMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voidMethod_args> {
            public voidMethod() {
                super("voidMethod");
            }

            @Override
            public voidMethod_args getEmptyArgsInstance() {
                return new voidMethod_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public voidMethod_result getResult(I iface, voidMethod_args args) throws org.apache.thrift.TException {
                voidMethod_result result = new voidMethod_result();
                iface.voidMethod();
                return result;
            }
        }

        public static class primitiveMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, primitiveMethod_args> {
            public primitiveMethod() {
                super("primitiveMethod");
            }

            @Override
            public primitiveMethod_args getEmptyArgsInstance() {
                return new primitiveMethod_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public primitiveMethod_result getResult(I iface, primitiveMethod_args args) throws org.apache.thrift.TException {
                primitiveMethod_result result = new primitiveMethod_result();
                result.success = iface.primitiveMethod();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class structMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, structMethod_args> {
            public structMethod() {
                super("structMethod");
            }

            @Override
            public structMethod_args getEmptyArgsInstance() {
                return new structMethod_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public structMethod_result getResult(I iface, structMethod_args args) throws org.apache.thrift.TException {
                structMethod_result result = new structMethod_result();
                result.success = iface.structMethod();
                return result;
            }
        }

        public static class methodWithDefaultArgs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, methodWithDefaultArgs_args> {
            public methodWithDefaultArgs() {
                super("methodWithDefaultArgs");
            }

            @Override
            public methodWithDefaultArgs_args getEmptyArgsInstance() {
                return new methodWithDefaultArgs_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public methodWithDefaultArgs_result getResult(I iface, methodWithDefaultArgs_args args) throws org.apache.thrift.TException {
                methodWithDefaultArgs_result result = new methodWithDefaultArgs_result();
                iface.methodWithDefaultArgs(args.something);
                return result;
            }
        }

        public static class onewayMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onewayMethod_args> {
            public onewayMethod() {
                super("onewayMethod");
            }

            @Override
            public onewayMethod_args getEmptyArgsInstance() {
                return new onewayMethod_args();
            }

            @Override
            protected boolean isOneway() {
                return true;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public org.apache.thrift.TBase getResult(I iface, onewayMethod_args args) throws org.apache.thrift.TException {
                iface.onewayMethod();
                return null;
            }
        }

        public static class declaredExceptionMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, declaredExceptionMethod_args> {
            public declaredExceptionMethod() {
                super("declaredExceptionMethod");
            }

            @Override
            public declaredExceptionMethod_args getEmptyArgsInstance() {
                return new declaredExceptionMethod_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public declaredExceptionMethod_result getResult(I iface, declaredExceptionMethod_args args) throws org.apache.thrift.TException {
                declaredExceptionMethod_result result = new declaredExceptionMethod_result();
                try {
                    result.success = iface.declaredExceptionMethod(args.shouldThrow);
                    result.setSuccessIsSet(true);
                } catch (ExceptionWithAMap xwamap) {
                    result.xwamap = xwamap;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("Janky", new Janky());
            processMap.put("voidMethod", new voidMethod());
            processMap.put("primitiveMethod", new primitiveMethod());
            processMap.put("structMethod", new structMethod());
            processMap.put("methodWithDefaultArgs", new methodWithDefaultArgs());
            processMap.put("onewayMethod", new onewayMethod());
            processMap.put("declaredExceptionMethod", new declaredExceptionMethod());
            return processMap;
        }

        public static class Janky<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Janky_args, java.lang.Integer> {
            public Janky() {
                super("Janky");
            }

            @Override
            public Janky_args getEmptyArgsInstance() {
                return new Janky_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    @Override
                    public void onComplete(java.lang.Integer o) {
                        Janky_result result = new Janky_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        Janky_result result = new Janky_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, Janky_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.Janky(args.arg, resultHandler);
            }
        }

        public static class voidMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, voidMethod_args, Void> {
            public voidMethod() {
                super("voidMethod");
            }

            @Override
            public voidMethod_args getEmptyArgsInstance() {
                return new voidMethod_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                        voidMethod_result result = new voidMethod_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        voidMethod_result result = new voidMethod_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, voidMethod_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.voidMethod(resultHandler);
            }
        }

        public static class primitiveMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, primitiveMethod_args, java.lang.Integer> {
            public primitiveMethod() {
                super("primitiveMethod");
            }

            @Override
            public primitiveMethod_args getEmptyArgsInstance() {
                return new primitiveMethod_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    @Override
                    public void onComplete(java.lang.Integer o) {
                        primitiveMethod_result result = new primitiveMethod_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        primitiveMethod_result result = new primitiveMethod_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, primitiveMethod_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.primitiveMethod(resultHandler);
            }
        }

        public static class structMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, structMethod_args, thrift.test.CompactProtoTestStruct> {
            public structMethod() {
                super("structMethod");
            }

            @Override
            public structMethod_args getEmptyArgsInstance() {
                return new structMethod_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<thrift.test.CompactProtoTestStruct> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<thrift.test.CompactProtoTestStruct>() {
                    @Override
                    public void onComplete(thrift.test.CompactProtoTestStruct o) {
                        structMethod_result result = new structMethod_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        structMethod_result result = new structMethod_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, structMethod_args args, org.apache.thrift.async.AsyncMethodCallback<thrift.test.CompactProtoTestStruct> resultHandler) throws org.apache.thrift.TException {
                iface.structMethod(resultHandler);
            }
        }

        public static class methodWithDefaultArgs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, methodWithDefaultArgs_args, Void> {
            public methodWithDefaultArgs() {
                super("methodWithDefaultArgs");
            }

            @Override
            public methodWithDefaultArgs_args getEmptyArgsInstance() {
                return new methodWithDefaultArgs_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                        methodWithDefaultArgs_result result = new methodWithDefaultArgs_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        methodWithDefaultArgs_result result = new methodWithDefaultArgs_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, methodWithDefaultArgs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.methodWithDefaultArgs(args.something, resultHandler);
            }
        }

        public static class onewayMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onewayMethod_args, Void> {
            public onewayMethod() {
                super("onewayMethod");
            }

            @Override
            public onewayMethod_args getEmptyArgsInstance() {
                return new onewayMethod_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                        } else {
                            _LOGGER.error("Exception inside oneway handler", e);
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return true;
            }

            @Override
            public void start(I iface, onewayMethod_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.onewayMethod(resultHandler);
            }
        }

        public static class declaredExceptionMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, declaredExceptionMethod_args, java.lang.Boolean> {
            public declaredExceptionMethod() {
                super("declaredExceptionMethod");
            }

            @Override
            public declaredExceptionMethod_args getEmptyArgsInstance() {
                return new declaredExceptionMethod_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
                    @Override
                    public void onComplete(java.lang.Boolean o) {
                        declaredExceptionMethod_result result = new declaredExceptionMethod_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        declaredExceptionMethod_result result = new declaredExceptionMethod_result();
                        if (e instanceof ExceptionWithAMap) {
                            result.xwamap = (ExceptionWithAMap) e;
                            result.setXwamapIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, declaredExceptionMethod_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
                iface.declaredExceptionMethod(args.shouldThrow, resultHandler);
            }
        }

    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class Janky_args implements org.apache.thrift.TBase<Janky_args, Janky_args._Fields>, java.io.Serializable, Cloneable, Comparable<Janky_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Janky_args");

        private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Janky_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Janky_argsTupleSchemeFactory();

        public int arg; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ARG((short) 1, "arg");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ARG
                        return ARG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ARG_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Janky_args.class, metaDataMap);
        }

        public Janky_args() {
        }

        public Janky_args(
                int arg) {
            this();
            this.arg = arg;
            setArgIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public Janky_args(Janky_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.arg = other.arg;
        }

        @Override
        public Janky_args deepCopy() {
            return new Janky_args(this);
        }

        @Override
        public void clear() {
            setArgIsSet(false);
            this.arg = 0;
        }

        public int getArg() {
            return this.arg;
        }

        public Janky_args setArg(int arg) {
            this.arg = arg;
            setArgIsSet(true);
            return this;
        }

        public void unsetArg() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARG_ISSET_ID);
        }

        /** Returns true if field arg is set (has been assigned a value) and false otherwise */
        public boolean isSetArg() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARG_ISSET_ID);
        }

        public void setArgIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARG_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ARG:
                    if (value == null) {
                        unsetArg();
                    } else {
                        setArg((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ARG:
                    return getArg();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ARG:
                    return isSetArg();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof Janky_args)
                return this.equals((Janky_args) that);
            return false;
        }

        public boolean equals(Janky_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_arg = true;
            boolean that_present_arg = true;
            if (this_present_arg || that_present_arg) {
                if (!(this_present_arg && that_present_arg))
                    return false;
                if (this.arg != that.arg)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + arg;

            return hashCode;
        }

        @Override
        public int compareTo(Janky_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetArg(), other.isSetArg());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetArg()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, other.arg);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("Janky_args(");
            boolean first = true;

            sb.append("arg:");
            sb.append(this.arg);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class Janky_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public Janky_argsStandardScheme getScheme() {
                return new Janky_argsStandardScheme();
            }
        }

        private static class Janky_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Janky_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, Janky_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.arg = iprot.readI32();
                                struct.setArgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, Janky_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ARG_FIELD_DESC);
                oprot.writeI32(struct.arg);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class Janky_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public Janky_argsTupleScheme getScheme() {
                return new Janky_argsTupleScheme();
            }
        }

        private static class Janky_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Janky_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, Janky_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetArg()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetArg()) {
                    oprot.writeI32(struct.arg);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, Janky_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.arg = iprot.readI32();
                    struct.setArgIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class Janky_result implements org.apache.thrift.TBase<Janky_result, Janky_result._Fields>, java.io.Serializable, Cloneable, Comparable<Janky_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Janky_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Janky_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Janky_resultTupleSchemeFactory();

        public int success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Janky_result.class, metaDataMap);
        }

        public Janky_result() {
        }

        public Janky_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public Janky_result(Janky_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public Janky_result deepCopy() {
            return new Janky_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public Janky_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof Janky_result)
                return this.equals((Janky_result) that);
            return false;
        }

        public boolean equals(Janky_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(Janky_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("Janky_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class Janky_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public Janky_resultStandardScheme getScheme() {
                return new Janky_resultStandardScheme();
            }
        }

        private static class Janky_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Janky_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, Janky_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, Janky_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class Janky_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public Janky_resultTupleScheme getScheme() {
                return new Janky_resultTupleScheme();
            }
        }

        private static class Janky_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Janky_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, Janky_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, Janky_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class voidMethod_args implements org.apache.thrift.TBase<voidMethod_args, voidMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<voidMethod_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidMethod_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidMethod_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidMethod_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidMethod_args.class, metaDataMap);
        }

        public voidMethod_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidMethod_args(voidMethod_args other) {
        }

        @Override
        public voidMethod_args deepCopy() {
            return new voidMethod_args(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof voidMethod_args)
                return this.equals((voidMethod_args) that);
            return false;
        }

        public boolean equals(voidMethod_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(voidMethod_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidMethod_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public voidMethod_argsStandardScheme getScheme() {
                return new voidMethod_argsStandardScheme();
            }
        }

        private static class voidMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidMethod_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, voidMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, voidMethod_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public voidMethod_argsTupleScheme getScheme() {
                return new voidMethod_argsTupleScheme();
            }
        }

        private static class voidMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidMethod_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class voidMethod_result implements org.apache.thrift.TBase<voidMethod_result, voidMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<voidMethod_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidMethod_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidMethod_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidMethod_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidMethod_result.class, metaDataMap);
        }

        public voidMethod_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidMethod_result(voidMethod_result other) {
        }

        @Override
        public voidMethod_result deepCopy() {
            return new voidMethod_result(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof voidMethod_result)
                return this.equals((voidMethod_result) that);
            return false;
        }

        public boolean equals(voidMethod_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(voidMethod_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidMethod_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public voidMethod_resultStandardScheme getScheme() {
                return new voidMethod_resultStandardScheme();
            }
        }

        private static class voidMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidMethod_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, voidMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, voidMethod_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public voidMethod_resultTupleScheme getScheme() {
                return new voidMethod_resultTupleScheme();
            }
        }

        private static class voidMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidMethod_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class primitiveMethod_args implements org.apache.thrift.TBase<primitiveMethod_args, primitiveMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<primitiveMethod_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("primitiveMethod_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new primitiveMethod_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new primitiveMethod_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(primitiveMethod_args.class, metaDataMap);
        }

        public primitiveMethod_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public primitiveMethod_args(primitiveMethod_args other) {
        }

        @Override
        public primitiveMethod_args deepCopy() {
            return new primitiveMethod_args(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof primitiveMethod_args)
                return this.equals((primitiveMethod_args) that);
            return false;
        }

        public boolean equals(primitiveMethod_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(primitiveMethod_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("primitiveMethod_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class primitiveMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public primitiveMethod_argsStandardScheme getScheme() {
                return new primitiveMethod_argsStandardScheme();
            }
        }

        private static class primitiveMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<primitiveMethod_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, primitiveMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, primitiveMethod_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class primitiveMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public primitiveMethod_argsTupleScheme getScheme() {
                return new primitiveMethod_argsTupleScheme();
            }
        }

        private static class primitiveMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<primitiveMethod_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, primitiveMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, primitiveMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class primitiveMethod_result implements org.apache.thrift.TBase<primitiveMethod_result, primitiveMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<primitiveMethod_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("primitiveMethod_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new primitiveMethod_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new primitiveMethod_resultTupleSchemeFactory();

        public int success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(primitiveMethod_result.class, metaDataMap);
        }

        public primitiveMethod_result() {
        }

        public primitiveMethod_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public primitiveMethod_result(primitiveMethod_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public primitiveMethod_result deepCopy() {
            return new primitiveMethod_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public primitiveMethod_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof primitiveMethod_result)
                return this.equals((primitiveMethod_result) that);
            return false;
        }

        public boolean equals(primitiveMethod_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(primitiveMethod_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("primitiveMethod_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class primitiveMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public primitiveMethod_resultStandardScheme getScheme() {
                return new primitiveMethod_resultStandardScheme();
            }
        }

        private static class primitiveMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<primitiveMethod_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, primitiveMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, primitiveMethod_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class primitiveMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public primitiveMethod_resultTupleScheme getScheme() {
                return new primitiveMethod_resultTupleScheme();
            }
        }

        private static class primitiveMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<primitiveMethod_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, primitiveMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, primitiveMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class structMethod_args implements org.apache.thrift.TBase<structMethod_args, structMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<structMethod_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("structMethod_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new structMethod_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new structMethod_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(structMethod_args.class, metaDataMap);
        }

        public structMethod_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public structMethod_args(structMethod_args other) {
        }

        @Override
        public structMethod_args deepCopy() {
            return new structMethod_args(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof structMethod_args)
                return this.equals((structMethod_args) that);
            return false;
        }

        public boolean equals(structMethod_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(structMethod_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("structMethod_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class structMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public structMethod_argsStandardScheme getScheme() {
                return new structMethod_argsStandardScheme();
            }
        }

        private static class structMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<structMethod_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, structMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, structMethod_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class structMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public structMethod_argsTupleScheme getScheme() {
                return new structMethod_argsTupleScheme();
            }
        }

        private static class structMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<structMethod_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, structMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, structMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class structMethod_result implements org.apache.thrift.TBase<structMethod_result, structMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<structMethod_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("structMethod_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new structMethod_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new structMethod_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable CompactProtoTestStruct success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompactProtoTestStruct.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(structMethod_result.class, metaDataMap);
        }

        public structMethod_result() {
        }

        public structMethod_result(
                CompactProtoTestStruct success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public structMethod_result(structMethod_result other) {
            if (other.isSetSuccess()) {
                this.success = new CompactProtoTestStruct(other.success);
            }
        }

        @Override
        public structMethod_result deepCopy() {
            return new structMethod_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public CompactProtoTestStruct getSuccess() {
            return this.success;
        }

        public structMethod_result setSuccess(@org.apache.thrift.annotation.Nullable CompactProtoTestStruct success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((CompactProtoTestStruct) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof structMethod_result)
                return this.equals((structMethod_result) that);
            return false;
        }

        public boolean equals(structMethod_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(structMethod_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("structMethod_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class structMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public structMethod_resultStandardScheme getScheme() {
                return new structMethod_resultStandardScheme();
            }
        }

        private static class structMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<structMethod_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, structMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new CompactProtoTestStruct();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, structMethod_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class structMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public structMethod_resultTupleScheme getScheme() {
                return new structMethod_resultTupleScheme();
            }
        }

        private static class structMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<structMethod_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, structMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, structMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new CompactProtoTestStruct();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class methodWithDefaultArgs_args implements org.apache.thrift.TBase<methodWithDefaultArgs_args, methodWithDefaultArgs_args._Fields>, java.io.Serializable, Cloneable, Comparable<methodWithDefaultArgs_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("methodWithDefaultArgs_args");

        private static final org.apache.thrift.protocol.TField SOMETHING_FIELD_DESC = new org.apache.thrift.protocol.TField("something", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new methodWithDefaultArgs_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new methodWithDefaultArgs_argsTupleSchemeFactory();

        public int something; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SOMETHING((short) 1, "something");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SOMETHING
                        return SOMETHING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SOMETHING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SOMETHING, new org.apache.thrift.meta_data.FieldMetaData("something", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(methodWithDefaultArgs_args.class, metaDataMap);
        }

        public methodWithDefaultArgs_args() {
            this.something = 2;

        }

        public methodWithDefaultArgs_args(
                int something) {
            this();
            this.something = something;
            setSomethingIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public methodWithDefaultArgs_args(methodWithDefaultArgs_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.something = other.something;
        }

        @Override
        public methodWithDefaultArgs_args deepCopy() {
            return new methodWithDefaultArgs_args(this);
        }

        @Override
        public void clear() {
            this.something = 2;

        }

        public int getSomething() {
            return this.something;
        }

        public methodWithDefaultArgs_args setSomething(int something) {
            this.something = something;
            setSomethingIsSet(true);
            return this;
        }

        public void unsetSomething() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOMETHING_ISSET_ID);
        }

        /** Returns true if field something is set (has been assigned a value) and false otherwise */
        public boolean isSetSomething() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOMETHING_ISSET_ID);
        }

        public void setSomethingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOMETHING_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SOMETHING:
                    if (value == null) {
                        unsetSomething();
                    } else {
                        setSomething((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SOMETHING:
                    return getSomething();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SOMETHING:
                    return isSetSomething();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof methodWithDefaultArgs_args)
                return this.equals((methodWithDefaultArgs_args) that);
            return false;
        }

        public boolean equals(methodWithDefaultArgs_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_something = true;
            boolean that_present_something = true;
            if (this_present_something || that_present_something) {
                if (!(this_present_something && that_present_something))
                    return false;
                if (this.something != that.something)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + something;

            return hashCode;
        }

        @Override
        public int compareTo(methodWithDefaultArgs_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSomething(), other.isSetSomething());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSomething()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.something, other.something);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("methodWithDefaultArgs_args(");
            boolean first = true;

            sb.append("something:");
            sb.append(this.something);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class methodWithDefaultArgs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public methodWithDefaultArgs_argsStandardScheme getScheme() {
                return new methodWithDefaultArgs_argsStandardScheme();
            }
        }

        private static class methodWithDefaultArgs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<methodWithDefaultArgs_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, methodWithDefaultArgs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SOMETHING
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.something = iprot.readI32();
                                struct.setSomethingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, methodWithDefaultArgs_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SOMETHING_FIELD_DESC);
                oprot.writeI32(struct.something);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class methodWithDefaultArgs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public methodWithDefaultArgs_argsTupleScheme getScheme() {
                return new methodWithDefaultArgs_argsTupleScheme();
            }
        }

        private static class methodWithDefaultArgs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<methodWithDefaultArgs_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, methodWithDefaultArgs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSomething()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSomething()) {
                    oprot.writeI32(struct.something);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, methodWithDefaultArgs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.something = iprot.readI32();
                    struct.setSomethingIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class methodWithDefaultArgs_result implements org.apache.thrift.TBase<methodWithDefaultArgs_result, methodWithDefaultArgs_result._Fields>, java.io.Serializable, Cloneable, Comparable<methodWithDefaultArgs_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("methodWithDefaultArgs_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new methodWithDefaultArgs_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new methodWithDefaultArgs_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(methodWithDefaultArgs_result.class, metaDataMap);
        }

        public methodWithDefaultArgs_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public methodWithDefaultArgs_result(methodWithDefaultArgs_result other) {
        }

        @Override
        public methodWithDefaultArgs_result deepCopy() {
            return new methodWithDefaultArgs_result(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof methodWithDefaultArgs_result)
                return this.equals((methodWithDefaultArgs_result) that);
            return false;
        }

        public boolean equals(methodWithDefaultArgs_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(methodWithDefaultArgs_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("methodWithDefaultArgs_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class methodWithDefaultArgs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public methodWithDefaultArgs_resultStandardScheme getScheme() {
                return new methodWithDefaultArgs_resultStandardScheme();
            }
        }

        private static class methodWithDefaultArgs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<methodWithDefaultArgs_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, methodWithDefaultArgs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, methodWithDefaultArgs_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class methodWithDefaultArgs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public methodWithDefaultArgs_resultTupleScheme getScheme() {
                return new methodWithDefaultArgs_resultTupleScheme();
            }
        }

        private static class methodWithDefaultArgs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<methodWithDefaultArgs_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, methodWithDefaultArgs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, methodWithDefaultArgs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class onewayMethod_args implements org.apache.thrift.TBase<onewayMethod_args, onewayMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<onewayMethod_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onewayMethod_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onewayMethod_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onewayMethod_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onewayMethod_args.class, metaDataMap);
        }

        public onewayMethod_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public onewayMethod_args(onewayMethod_args other) {
        }

        @Override
        public onewayMethod_args deepCopy() {
            return new onewayMethod_args(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof onewayMethod_args)
                return this.equals((onewayMethod_args) that);
            return false;
        }

        public boolean equals(onewayMethod_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(onewayMethod_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("onewayMethod_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class onewayMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public onewayMethod_argsStandardScheme getScheme() {
                return new onewayMethod_argsStandardScheme();
            }
        }

        private static class onewayMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onewayMethod_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, onewayMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, onewayMethod_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class onewayMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public onewayMethod_argsTupleScheme getScheme() {
                return new onewayMethod_argsTupleScheme();
            }
        }

        private static class onewayMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onewayMethod_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, onewayMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, onewayMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class declaredExceptionMethod_args implements org.apache.thrift.TBase<declaredExceptionMethod_args, declaredExceptionMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<declaredExceptionMethod_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("declaredExceptionMethod_args");

        private static final org.apache.thrift.protocol.TField SHOULD_THROW_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldThrow", org.apache.thrift.protocol.TType.BOOL, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new declaredExceptionMethod_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new declaredExceptionMethod_argsTupleSchemeFactory();

        public boolean shouldThrow; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SHOULD_THROW((short) 1, "shouldThrow");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SHOULD_THROW
                        return SHOULD_THROW;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SHOULDTHROW_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SHOULD_THROW, new org.apache.thrift.meta_data.FieldMetaData("shouldThrow", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(declaredExceptionMethod_args.class, metaDataMap);
        }

        public declaredExceptionMethod_args() {
        }

        public declaredExceptionMethod_args(
                boolean shouldThrow) {
            this();
            this.shouldThrow = shouldThrow;
            setShouldThrowIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public declaredExceptionMethod_args(declaredExceptionMethod_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.shouldThrow = other.shouldThrow;
        }

        @Override
        public declaredExceptionMethod_args deepCopy() {
            return new declaredExceptionMethod_args(this);
        }

        @Override
        public void clear() {
            setShouldThrowIsSet(false);
            this.shouldThrow = false;
        }

        public boolean isShouldThrow() {
            return this.shouldThrow;
        }

        public declaredExceptionMethod_args setShouldThrow(boolean shouldThrow) {
            this.shouldThrow = shouldThrow;
            setShouldThrowIsSet(true);
            return this;
        }

        public void unsetShouldThrow() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOULDTHROW_ISSET_ID);
        }

        /** Returns true if field shouldThrow is set (has been assigned a value) and false otherwise */
        public boolean isSetShouldThrow() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOULDTHROW_ISSET_ID);
        }

        public void setShouldThrowIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOULDTHROW_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SHOULD_THROW:
                    if (value == null) {
                        unsetShouldThrow();
                    } else {
                        setShouldThrow((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SHOULD_THROW:
                    return isShouldThrow();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SHOULD_THROW:
                    return isSetShouldThrow();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof declaredExceptionMethod_args)
                return this.equals((declaredExceptionMethod_args) that);
            return false;
        }

        public boolean equals(declaredExceptionMethod_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_shouldThrow = true;
            boolean that_present_shouldThrow = true;
            if (this_present_shouldThrow || that_present_shouldThrow) {
                if (!(this_present_shouldThrow && that_present_shouldThrow))
                    return false;
                if (this.shouldThrow != that.shouldThrow)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((shouldThrow) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(declaredExceptionMethod_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetShouldThrow(), other.isSetShouldThrow());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetShouldThrow()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldThrow, other.shouldThrow);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("declaredExceptionMethod_args(");
            boolean first = true;

            sb.append("shouldThrow:");
            sb.append(this.shouldThrow);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class declaredExceptionMethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public declaredExceptionMethod_argsStandardScheme getScheme() {
                return new declaredExceptionMethod_argsStandardScheme();
            }
        }

        private static class declaredExceptionMethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<declaredExceptionMethod_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, declaredExceptionMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SHOULD_THROW
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.shouldThrow = iprot.readBool();
                                struct.setShouldThrowIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, declaredExceptionMethod_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SHOULD_THROW_FIELD_DESC);
                oprot.writeBool(struct.shouldThrow);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class declaredExceptionMethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public declaredExceptionMethod_argsTupleScheme getScheme() {
                return new declaredExceptionMethod_argsTupleScheme();
            }
        }

        private static class declaredExceptionMethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<declaredExceptionMethod_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, declaredExceptionMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetShouldThrow()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetShouldThrow()) {
                    oprot.writeBool(struct.shouldThrow);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, declaredExceptionMethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.shouldThrow = iprot.readBool();
                    struct.setShouldThrowIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class declaredExceptionMethod_result implements org.apache.thrift.TBase<declaredExceptionMethod_result, declaredExceptionMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<declaredExceptionMethod_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("declaredExceptionMethod_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField XWAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("xwamap", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new declaredExceptionMethod_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new declaredExceptionMethod_resultTupleSchemeFactory();

        public boolean success; // required
        public @org.apache.thrift.annotation.Nullable ExceptionWithAMap xwamap; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            XWAMAP((short) 1, "xwamap");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // XWAMAP
                        return XWAMAP;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.XWAMAP, new org.apache.thrift.meta_data.FieldMetaData("xwamap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExceptionWithAMap.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(declaredExceptionMethod_result.class, metaDataMap);
        }

        public declaredExceptionMethod_result() {
        }

        public declaredExceptionMethod_result(
                boolean success,
                ExceptionWithAMap xwamap) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.xwamap = xwamap;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public declaredExceptionMethod_result(declaredExceptionMethod_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetXwamap()) {
                this.xwamap = new ExceptionWithAMap(other.xwamap);
            }
        }

        @Override
        public declaredExceptionMethod_result deepCopy() {
            return new declaredExceptionMethod_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.xwamap = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public declaredExceptionMethod_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public ExceptionWithAMap getXwamap() {
            return this.xwamap;
        }

        public declaredExceptionMethod_result setXwamap(@org.apache.thrift.annotation.Nullable ExceptionWithAMap xwamap) {
            this.xwamap = xwamap;
            return this;
        }

        public void unsetXwamap() {
            this.xwamap = null;
        }

        /** Returns true if field xwamap is set (has been assigned a value) and false otherwise */
        public boolean isSetXwamap() {
            return this.xwamap != null;
        }

        public void setXwamapIsSet(boolean value) {
            if (!value) {
                this.xwamap = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Boolean) value);
                    }
                    break;

                case XWAMAP:
                    if (value == null) {
                        unsetXwamap();
                    } else {
                        setXwamap((ExceptionWithAMap) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

                case XWAMAP:
                    return getXwamap();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case XWAMAP:
                    return isSetXwamap();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof declaredExceptionMethod_result)
                return this.equals((declaredExceptionMethod_result) that);
            return false;
        }

        public boolean equals(declaredExceptionMethod_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_xwamap = true && this.isSetXwamap();
            boolean that_present_xwamap = true && that.isSetXwamap();
            if (this_present_xwamap || that_present_xwamap) {
                if (!(this_present_xwamap && that_present_xwamap))
                    return false;
                if (!this.xwamap.equals(that.xwamap))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((isSetXwamap()) ? 131071 : 524287);
            if (isSetXwamap())
                hashCode = hashCode * 8191 + xwamap.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(declaredExceptionMethod_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetXwamap(), other.isSetXwamap());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetXwamap()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xwamap, other.xwamap);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("declaredExceptionMethod_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("xwamap:");
            if (this.xwamap == null) {
                sb.append("null");
            } else {
                sb.append(this.xwamap);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class declaredExceptionMethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public declaredExceptionMethod_resultStandardScheme getScheme() {
                return new declaredExceptionMethod_resultStandardScheme();
            }
        }

        private static class declaredExceptionMethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<declaredExceptionMethod_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, declaredExceptionMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // XWAMAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.xwamap = new ExceptionWithAMap();
                                struct.xwamap.read(iprot);
                                struct.setXwamapIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, declaredExceptionMethod_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.xwamap != null) {
                    oprot.writeFieldBegin(XWAMAP_FIELD_DESC);
                    struct.xwamap.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class declaredExceptionMethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public declaredExceptionMethod_resultTupleScheme getScheme() {
                return new declaredExceptionMethod_resultTupleScheme();
            }
        }

        private static class declaredExceptionMethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<declaredExceptionMethod_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, declaredExceptionMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetXwamap()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetXwamap()) {
                    struct.xwamap.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, declaredExceptionMethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.xwamap = new ExceptionWithAMap();
                    struct.xwamap.read(iprot);
                    struct.setXwamapIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
