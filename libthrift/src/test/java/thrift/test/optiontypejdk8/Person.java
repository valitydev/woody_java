/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test.optiontypejdk8;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-06-21")
public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable, Comparable<Person> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("addresses", org.apache.thrift.protocol.TType.LIST, (short) 5);
    private static final org.apache.thrift.protocol.TField PETS_FIELD_DESC = new org.apache.thrift.protocol.TField("pets", org.apache.thrift.protocol.TType.MAP, (short) 6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PersonStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PersonTupleSchemeFactory();

    public long id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public long age; // optional
    public @org.apache.thrift.annotation.Nullable java.lang.String phone; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> addresses; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, Pet> pets; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        NAME((short) 2, "name"),
        AGE((short) 3, "age"),
        PHONE((short) 4, "phone"),
        ADDRESSES((short) 5, "addresses"),
        PETS((short) 6, "pets");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // NAME
                    return NAME;
                case 3: // AGE
                    return AGE;
                case 4: // PHONE
                    return PHONE;
                case 5: // ADDRESSES
                    return ADDRESSES;
                case 6: // PETS
                    return PETS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __AGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.AGE, _Fields.PHONE, _Fields.ADDRESSES, _Fields.PETS};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("addresses", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.PETS, new org.apache.thrift.meta_data.FieldMetaData("pets", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pet.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
    }

    public Person() {
    }

    public Person(
            long id,
            java.lang.String name) {
        this();
        this.id = id;
        setIdIsSet(true);
        this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Person(Person other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetName()) {
            this.name = other.name;
        }
        this.age = other.age;
        if (other.isSetPhone()) {
            this.phone = other.phone;
        }
        if (other.isSetAddresses()) {
            java.util.List<java.lang.String> __this__addresses = new java.util.ArrayList<java.lang.String>(other.addresses);
            this.addresses = __this__addresses;
        }
        if (other.isSetPets()) {
            java.util.Map<java.lang.String, Pet> __this__pets = new java.util.HashMap<java.lang.String, Pet>(other.pets.size());
            for (java.util.Map.Entry<java.lang.String, Pet> other_element : other.pets.entrySet()) {

                java.lang.String other_element_key = other_element.getKey();
                Pet other_element_value = other_element.getValue();

                java.lang.String __this__pets_copy_key = other_element_key;

                Pet __this__pets_copy_value = new Pet(other_element_value);

                __this__pets.put(__this__pets_copy_key, __this__pets_copy_value);
            }
            this.pets = __this__pets;
        }
    }

    @Override
    public Person deepCopy() {
        return new Person(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.name = null;
        setAgeIsSet(false);
        this.age = 0;
        this.phone = null;
        this.addresses = null;
        this.pets = null;
    }

    public long getId() {
        return this.id;
    }

    public Person setId(long id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
        return this.name;
    }

    public Person setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public java.util.Optional<java.lang.Long> getAge() {
        if (this.isSetAge()) {
            return java.util.Optional.of(this.age);
        } else {
            return java.util.Optional.empty();
        }
    }

    public Person setAge(long age) {
        this.age = age;
        setAgeIsSet(true);
        return this;
    }

    public void unsetAge() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    /** Returns true if field age is set (has been assigned a value) and false otherwise */
    public boolean isSetAge() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    public void setAgeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
    }

    public java.util.Optional<java.lang.String> getPhone() {
        if (this.isSetPhone()) {
            return java.util.Optional.of(this.phone);
        } else {
            return java.util.Optional.empty();
        }
    }

    public Person setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
        this.phone = phone;
        return this;
    }

    public void unsetPhone() {
        this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
        return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
        if (!value) {
            this.phone = null;
        }
    }

    public java.util.Optional<Integer> getAddressesSize() {
        if (this.addresses == null) {
            return java.util.Optional.empty();
        } else {
            return java.util.Optional.of(this.addresses.size());
        }
    }

    public java.util.Optional<java.util.Iterator<java.lang.String>> getAddressesIterator() {
        if (this.addresses == null) {
            return java.util.Optional.empty();
        } else {
            return java.util.Optional.of(this.addresses.iterator());
        }
    }

    public void addToAddresses(java.lang.String elem) {
        if (this.addresses == null) {
            this.addresses = new java.util.ArrayList<java.lang.String>();
        }
        this.addresses.add(elem);
    }

    public java.util.Optional<java.util.List<java.lang.String>> getAddresses() {
        if (this.isSetAddresses()) {
            return java.util.Optional.of(this.addresses);
        } else {
            return java.util.Optional.empty();
        }
    }

    public Person setAddresses(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> addresses) {
        this.addresses = addresses;
        return this;
    }

    public void unsetAddresses() {
        this.addresses = null;
    }

    /** Returns true if field addresses is set (has been assigned a value) and false otherwise */
    public boolean isSetAddresses() {
        return this.addresses != null;
    }

    public void setAddressesIsSet(boolean value) {
        if (!value) {
            this.addresses = null;
        }
    }

    public java.util.Optional<Integer> getPetsSize() {
        if (this.pets == null) {
            return java.util.Optional.empty();
        } else {
            return java.util.Optional.of(this.pets.size());
        }
    }

    public void putToPets(java.lang.String key, Pet val) {
        if (this.pets == null) {
            this.pets = new java.util.HashMap<java.lang.String, Pet>();
        }
        this.pets.put(key, val);
    }

    public java.util.Optional<java.util.Map<java.lang.String, Pet>> getPets() {
        if (this.isSetPets()) {
            return java.util.Optional.of(this.pets);
        } else {
            return java.util.Optional.empty();
        }
    }

    public Person setPets(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, Pet> pets) {
        this.pets = pets;
        return this;
    }

    public void unsetPets() {
        this.pets = null;
    }

    /** Returns true if field pets is set (has been assigned a value) and false otherwise */
    public boolean isSetPets() {
        return this.pets != null;
    }

    public void setPetsIsSet(boolean value) {
        if (!value) {
            this.pets = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Long) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((java.lang.String) value);
                }
                break;

            case AGE:
                if (value == null) {
                    unsetAge();
                } else {
                    setAge((java.lang.Long) value);
                }
                break;

            case PHONE:
                if (value == null) {
                    unsetPhone();
                } else {
                    setPhone((java.lang.String) value);
                }
                break;

            case ADDRESSES:
                if (value == null) {
                    unsetAddresses();
                } else {
                    setAddresses((java.util.List<java.lang.String>) value);
                }
                break;

            case PETS:
                if (value == null) {
                    unsetPets();
                } else {
                    setPets((java.util.Map<java.lang.String, Pet>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case NAME:
                return getName();

            case AGE:
                return getAge();

            case PHONE:
                return getPhone();

            case ADDRESSES:
                return getAddresses();

            case PETS:
                return getPets();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case NAME:
                return isSetName();
            case AGE:
                return isSetAge();
            case PHONE:
                return isSetPhone();
            case ADDRESSES:
                return isSetAddresses();
            case PETS:
                return isSetPets();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof Person)
            return this.equals((Person) that);
        return false;
    }

    public boolean equals(Person that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true;
        boolean that_present_id = true;
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_age = true && this.isSetAge();
        boolean that_present_age = true && that.isSetAge();
        if (this_present_age || that_present_age) {
            if (!(this_present_age && that_present_age))
                return false;
            if (this.age != that.age)
                return false;
        }

        boolean this_present_phone = true && this.isSetPhone();
        boolean that_present_phone = true && that.isSetPhone();
        if (this_present_phone || that_present_phone) {
            if (!(this_present_phone && that_present_phone))
                return false;
            if (!this.phone.equals(that.phone))
                return false;
        }

        boolean this_present_addresses = true && this.isSetAddresses();
        boolean that_present_addresses = true && that.isSetAddresses();
        if (this_present_addresses || that_present_addresses) {
            if (!(this_present_addresses && that_present_addresses))
                return false;
            if (!this.addresses.equals(that.addresses))
                return false;
        }

        boolean this_present_pets = true && this.isSetPets();
        boolean that_present_pets = true && that.isSetPets();
        if (this_present_pets || that_present_pets) {
            if (!(this_present_pets && that_present_pets))
                return false;
            if (!this.pets.equals(that.pets))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

        hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
        if (isSetName())
            hashCode = hashCode * 8191 + name.hashCode();

        hashCode = hashCode * 8191 + ((isSetAge()) ? 131071 : 524287);
        if (isSetAge())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(age);

        hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
        if (isSetPhone())
            hashCode = hashCode * 8191 + phone.hashCode();

        hashCode = hashCode * 8191 + ((isSetAddresses()) ? 131071 : 524287);
        if (isSetAddresses())
            hashCode = hashCode * 8191 + addresses.hashCode();

        hashCode = hashCode * 8191 + ((isSetPets()) ? 131071 : 524287);
        if (isSetPets())
            hashCode = hashCode * 8191 + pets.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Person other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetAge(), other.isSetAge());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAge()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPhone(), other.isSetPhone());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPhone()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetAddresses(), other.isSetAddresses());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAddresses()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addresses, other.addresses);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetPets(), other.isSetPets());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPets()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pets, other.pets);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Person(");
        boolean first = true;

        sb.append("id:");
        sb.append(this.id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (isSetAge()) {
            if (!first) sb.append(", ");
            sb.append("age:");
            sb.append(this.age);
            first = false;
        }
        if (isSetPhone()) {
            if (!first) sb.append(", ");
            sb.append("phone:");
            if (this.phone == null) {
                sb.append("null");
            } else {
                sb.append(this.phone);
            }
            first = false;
        }
        if (isSetAddresses()) {
            if (!first) sb.append(", ");
            sb.append("addresses:");
            if (this.addresses == null) {
                sb.append("null");
            } else {
                sb.append(this.addresses);
            }
            first = false;
        }
        if (isSetPets()) {
            if (!first) sb.append(", ");
            sb.append("pets:");
            if (this.pets == null) {
                sb.append("null");
            } else {
                sb.append(this.pets);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
        if (name == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class PersonStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public PersonStandardScheme getScheme() {
            return new PersonStandardScheme();
        }
    }

    private static class PersonStandardScheme extends org.apache.thrift.scheme.StandardScheme<Person> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Person struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.id = iprot.readI64();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // AGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.age = iprot.readI64();
                            struct.setAgeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // PHONE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.phone = iprot.readString();
                            struct.setPhoneIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // ADDRESSES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.addresses = new java.util.ArrayList<java.lang.String>(_list0.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readString();
                                    struct.addresses.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setAddressesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // PETS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                                struct.pets = new java.util.HashMap<java.lang.String, Pet>(2 * _map3.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key4;
                                @org.apache.thrift.annotation.Nullable Pet _val5;
                                for (int _i6 = 0; _i6 < _map3.size; ++_i6) {
                                    _key4 = iprot.readString();
                                    _val5 = new Pet();
                                    _val5.read(iprot);
                                    struct.pets.put(_key4, _val5);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setPetsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetId()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Person struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI64(struct.id);
            oprot.writeFieldEnd();
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.isSetAge()) {
                oprot.writeFieldBegin(AGE_FIELD_DESC);
                oprot.writeI64(struct.age);
                oprot.writeFieldEnd();
            }
            if (struct.phone != null) {
                if (struct.isSetPhone()) {
                    oprot.writeFieldBegin(PHONE_FIELD_DESC);
                    oprot.writeString(struct.phone);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.addresses != null) {
                if (struct.isSetAddresses()) {
                    oprot.writeFieldBegin(ADDRESSES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.addresses.size()));
                        for (java.lang.String _iter7 : struct.addresses) {
                            oprot.writeString(_iter7);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.pets != null) {
                if (struct.isSetPets()) {
                    oprot.writeFieldBegin(PETS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.pets.size()));
                        for (java.util.Map.Entry<java.lang.String, Pet> _iter8 : struct.pets.entrySet()) {
                            oprot.writeString(_iter8.getKey());
                            _iter8.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PersonTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public PersonTupleScheme getScheme() {
            return new PersonTupleScheme();
        }
    }

    private static class PersonTupleScheme extends org.apache.thrift.scheme.TupleScheme<Person> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeI64(struct.id);
            oprot.writeString(struct.name);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAge()) {
                optionals.set(0);
            }
            if (struct.isSetPhone()) {
                optionals.set(1);
            }
            if (struct.isSetAddresses()) {
                optionals.set(2);
            }
            if (struct.isSetPets()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetAge()) {
                oprot.writeI64(struct.age);
            }
            if (struct.isSetPhone()) {
                oprot.writeString(struct.phone);
            }
            if (struct.isSetAddresses()) {
                {
                    oprot.writeI32(struct.addresses.size());
                    for (java.lang.String _iter9 : struct.addresses) {
                        oprot.writeString(_iter9);
                    }
                }
            }
            if (struct.isSetPets()) {
                {
                    oprot.writeI32(struct.pets.size());
                    for (java.util.Map.Entry<java.lang.String, Pet> _iter10 : struct.pets.entrySet()) {
                        oprot.writeString(_iter10.getKey());
                        _iter10.getValue().write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.id = iprot.readI64();
            struct.setIdIsSet(true);
            struct.name = iprot.readString();
            struct.setNameIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.age = iprot.readI64();
                struct.setAgeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list11 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                    struct.addresses = new java.util.ArrayList<java.lang.String>(_list11.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem12;
                    for (int _i13 = 0; _i13 < _list11.size; ++_i13) {
                        _elem12 = iprot.readString();
                        struct.addresses.add(_elem12);
                    }
                }
                struct.setAddressesIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT);
                    struct.pets = new java.util.HashMap<java.lang.String, Pet>(2 * _map14.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key15;
                    @org.apache.thrift.annotation.Nullable Pet _val16;
                    for (int _i17 = 0; _i17 < _map14.size; ++_i17) {
                        _key15 = iprot.readString();
                        _val16 = new Pet();
                        _val16.read(iprot);
                        struct.pets.put(_key15, _val16);
                    }
                }
                struct.setPetsIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

