/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class DeepCopyBar implements org.apache.thrift.TBase<DeepCopyBar, DeepCopyBar._Fields>, java.io.Serializable, Cloneable, Comparable<DeepCopyBar> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeepCopyBar");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.BOOL, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeepCopyBarStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeepCopyBarTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String a; // optional
    public int b; // optional
    public boolean c; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        A((short) 1, "a"),
        B((short) 2, "b"),
        C((short) 3, "c");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // A
                    return A;
                case 2: // B
                    return B;
                case 3: // C
                    return C;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __B_ISSET_ID = 0;
    private static final int __C_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.A, _Fields.B, _Fields.C};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeepCopyBar.class, metaDataMap);
    }

    public DeepCopyBar() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeepCopyBar(DeepCopyBar other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetA()) {
            this.a = other.a;
        }
        this.b = other.b;
        this.c = other.c;
    }

    @Override
    public DeepCopyBar deepCopy() {
        return new DeepCopyBar(this);
    }

    @Override
    public void clear() {
        this.a = null;
        setBIsSet(false);
        this.b = 0;
        setCIsSet(false);
        this.c = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getA() {
        return this.a;
    }

    public DeepCopyBar setA(@org.apache.thrift.annotation.Nullable java.lang.String a) {
        this.a = a;
        return this;
    }

    public void unsetA() {
        this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
        return this.a != null;
    }

    public void setAIsSet(boolean value) {
        if (!value) {
            this.a = null;
        }
    }

    public int getB() {
        return this.b;
    }

    public DeepCopyBar setB(int b) {
        this.b = b;
        setBIsSet(true);
        return this;
    }

    public void unsetB() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
    }

    public void setBIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
    }

    public boolean isC() {
        return this.c;
    }

    public DeepCopyBar setC(boolean c) {
        this.c = c;
        setCIsSet(true);
        return this;
    }

    public void unsetC() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __C_ISSET_ID);
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __C_ISSET_ID);
    }

    public void setCIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __C_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case A:
                if (value == null) {
                    unsetA();
                } else {
                    setA((java.lang.String) value);
                }
                break;

            case B:
                if (value == null) {
                    unsetB();
                } else {
                    setB((java.lang.Integer) value);
                }
                break;

            case C:
                if (value == null) {
                    unsetC();
                } else {
                    setC((java.lang.Boolean) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case A:
                return getA();

            case B:
                return getB();

            case C:
                return isC();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case A:
                return isSetA();
            case B:
                return isSetB();
            case C:
                return isSetC();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof DeepCopyBar)
            return this.equals((DeepCopyBar) that);
        return false;
    }

    public boolean equals(DeepCopyBar that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_a = true && this.isSetA();
        boolean that_present_a = true && that.isSetA();
        if (this_present_a || that_present_a) {
            if (!(this_present_a && that_present_a))
                return false;
            if (!this.a.equals(that.a))
                return false;
        }

        boolean this_present_b = true && this.isSetB();
        boolean that_present_b = true && that.isSetB();
        if (this_present_b || that_present_b) {
            if (!(this_present_b && that_present_b))
                return false;
            if (this.b != that.b)
                return false;
        }

        boolean this_present_c = true && this.isSetC();
        boolean that_present_c = true && that.isSetC();
        if (this_present_c || that_present_c) {
            if (!(this_present_c && that_present_c))
                return false;
            if (this.c != that.c)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetA()) ? 131071 : 524287);
        if (isSetA())
            hashCode = hashCode * 8191 + a.hashCode();

        hashCode = hashCode * 8191 + ((isSetB()) ? 131071 : 524287);
        if (isSetB())
            hashCode = hashCode * 8191 + b;

        hashCode = hashCode * 8191 + ((isSetC()) ? 131071 : 524287);
        if (isSetC())
            hashCode = hashCode * 8191 + ((c) ? 131071 : 524287);

        return hashCode;
    }

    @Override
    public int compareTo(DeepCopyBar other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetA(), other.isSetA());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetA()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetB(), other.isSetB());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetB()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetC(), other.isSetC());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetC()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("DeepCopyBar(");
        boolean first = true;

        if (isSetA()) {
            sb.append("a:");
            if (this.a == null) {
                sb.append("null");
            } else {
                sb.append(this.a);
            }
            first = false;
        }
        if (isSetB()) {
            if (!first) sb.append(", ");
            sb.append("b:");
            sb.append(this.b);
            first = false;
        }
        if (isSetC()) {
            if (!first) sb.append(", ");
            sb.append("c:");
            sb.append(this.c);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DeepCopyBarStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public DeepCopyBarStandardScheme getScheme() {
            return new DeepCopyBarStandardScheme();
        }
    }

    private static class DeepCopyBarStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeepCopyBar> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, DeepCopyBar struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // A
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.a = iprot.readString();
                            struct.setAIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // B
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.b = iprot.readI32();
                            struct.setBIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // C
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.c = iprot.readBool();
                            struct.setCIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, DeepCopyBar struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.a != null) {
                if (struct.isSetA()) {
                    oprot.writeFieldBegin(A_FIELD_DESC);
                    oprot.writeString(struct.a);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetB()) {
                oprot.writeFieldBegin(B_FIELD_DESC);
                oprot.writeI32(struct.b);
                oprot.writeFieldEnd();
            }
            if (struct.isSetC()) {
                oprot.writeFieldBegin(C_FIELD_DESC);
                oprot.writeBool(struct.c);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DeepCopyBarTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public DeepCopyBarTupleScheme getScheme() {
            return new DeepCopyBarTupleScheme();
        }
    }

    private static class DeepCopyBarTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeepCopyBar> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DeepCopyBar struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetA()) {
                optionals.set(0);
            }
            if (struct.isSetB()) {
                optionals.set(1);
            }
            if (struct.isSetC()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetA()) {
                oprot.writeString(struct.a);
            }
            if (struct.isSetB()) {
                oprot.writeI32(struct.b);
            }
            if (struct.isSetC()) {
                oprot.writeBool(struct.c);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DeepCopyBar struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.a = iprot.readString();
                struct.setAIsSet(true);
            }
            if (incoming.get(1)) {
                struct.b = iprot.readI32();
                struct.setBIsSet(true);
            }
            if (incoming.get(2)) {
                struct.c = iprot.readBool();
                struct.setCIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

