/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class DeepCopyFoo implements org.apache.thrift.TBase<DeepCopyFoo, DeepCopyFoo._Fields>, java.io.Serializable, Cloneable, Comparable<DeepCopyFoo> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeepCopyFoo");

    private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.SET, (short) 2);
    private static final org.apache.thrift.protocol.TField M_FIELD_DESC = new org.apache.thrift.protocol.TField("m", org.apache.thrift.protocol.TType.MAP, (short) 3);
    private static final org.apache.thrift.protocol.TField LI_FIELD_DESC = new org.apache.thrift.protocol.TField("li", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField SI_FIELD_DESC = new org.apache.thrift.protocol.TField("si", org.apache.thrift.protocol.TType.SET, (short) 5);
    private static final org.apache.thrift.protocol.TField MI_FIELD_DESC = new org.apache.thrift.protocol.TField("mi", org.apache.thrift.protocol.TType.MAP, (short) 6);
    private static final org.apache.thrift.protocol.TField BAR_FIELD_DESC = new org.apache.thrift.protocol.TField("bar", org.apache.thrift.protocol.TType.STRUCT, (short) 7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeepCopyFooStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeepCopyFooTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<DeepCopyBar> l; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<DeepCopyBar> s; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, DeepCopyBar> m; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<thrift.test.Object> li; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<thrift.test.Object> si; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, thrift.test.Object> mi; // optional
    public @org.apache.thrift.annotation.Nullable DeepCopyBar bar; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        L((short) 1, "l"),
        S((short) 2, "s"),
        M((short) 3, "m"),
        LI((short) 4, "li"),
        SI((short) 5, "si"),
        MI((short) 6, "mi"),
        BAR((short) 7, "bar");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // L
                    return L;
                case 2: // S
                    return S;
                case 3: // M
                    return M;
                case 4: // LI
                    return LI;
                case 5: // SI
                    return SI;
                case 6: // MI
                    return MI;
                case 7: // BAR
                    return BAR;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.L, _Fields.S, _Fields.M, _Fields.LI, _Fields.SI, _Fields.MI, _Fields.BAR};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeepCopyBar.class))));
        tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeepCopyBar.class))));
        tmpMap.put(_Fields.M, new org.apache.thrift.meta_data.FieldMetaData("m", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeepCopyBar.class))));
        tmpMap.put(_Fields.LI, new org.apache.thrift.meta_data.FieldMetaData("li", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.test.Object.class))));
        tmpMap.put(_Fields.SI, new org.apache.thrift.meta_data.FieldMetaData("si", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.test.Object.class))));
        tmpMap.put(_Fields.MI, new org.apache.thrift.meta_data.FieldMetaData("mi", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.test.Object.class))));
        tmpMap.put(_Fields.BAR, new org.apache.thrift.meta_data.FieldMetaData("bar", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeepCopyBar.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeepCopyFoo.class, metaDataMap);
    }

    public DeepCopyFoo() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeepCopyFoo(DeepCopyFoo other) {
        if (other.isSetL()) {
            java.util.List<DeepCopyBar> __this__l = new java.util.ArrayList<DeepCopyBar>(other.l.size());
            for (DeepCopyBar other_element : other.l) {
                __this__l.add(new DeepCopyBar(other_element));
            }
            this.l = __this__l;
        }
        if (other.isSetS()) {
            java.util.Set<DeepCopyBar> __this__s = new java.util.HashSet<DeepCopyBar>(other.s.size());
            for (DeepCopyBar other_element : other.s) {
                __this__s.add(new DeepCopyBar(other_element));
            }
            this.s = __this__s;
        }
        if (other.isSetM()) {
            java.util.Map<java.lang.String, DeepCopyBar> __this__m = new java.util.HashMap<java.lang.String, DeepCopyBar>(other.m.size());
            for (java.util.Map.Entry<java.lang.String, DeepCopyBar> other_element : other.m.entrySet()) {

                java.lang.String other_element_key = other_element.getKey();
                DeepCopyBar other_element_value = other_element.getValue();

                java.lang.String __this__m_copy_key = other_element_key;

                DeepCopyBar __this__m_copy_value = new DeepCopyBar(other_element_value);

                __this__m.put(__this__m_copy_key, __this__m_copy_value);
            }
            this.m = __this__m;
        }
        if (other.isSetLi()) {
            java.util.List<thrift.test.Object> __this__li = new java.util.ArrayList<thrift.test.Object>(other.li.size());
            for (thrift.test.Object other_element : other.li) {
                __this__li.add(new thrift.test.Object(other_element));
            }
            this.li = __this__li;
        }
        if (other.isSetSi()) {
            java.util.Set<thrift.test.Object> __this__si = new java.util.HashSet<thrift.test.Object>(other.si.size());
            for (thrift.test.Object other_element : other.si) {
                __this__si.add(new thrift.test.Object(other_element));
            }
            this.si = __this__si;
        }
        if (other.isSetMi()) {
            java.util.Map<java.lang.String, thrift.test.Object> __this__mi = new java.util.HashMap<java.lang.String, thrift.test.Object>(other.mi.size());
            for (java.util.Map.Entry<java.lang.String, thrift.test.Object> other_element : other.mi.entrySet()) {

                java.lang.String other_element_key = other_element.getKey();
                thrift.test.Object other_element_value = other_element.getValue();

                java.lang.String __this__mi_copy_key = other_element_key;

                thrift.test.Object __this__mi_copy_value = new thrift.test.Object(other_element_value);

                __this__mi.put(__this__mi_copy_key, __this__mi_copy_value);
            }
            this.mi = __this__mi;
        }
        if (other.isSetBar()) {
            this.bar = new DeepCopyBar(other.bar);
        }
    }

    @Override
    public DeepCopyFoo deepCopy() {
        return new DeepCopyFoo(this);
    }

    @Override
    public void clear() {
        this.l = null;
        this.s = null;
        this.m = null;
        this.li = null;
        this.si = null;
        this.mi = null;
        this.bar = null;
    }

    public int getLSize() {
        return (this.l == null) ? 0 : this.l.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DeepCopyBar> getLIterator() {
        return (this.l == null) ? null : this.l.iterator();
    }

    public void addToL(DeepCopyBar elem) {
        if (this.l == null) {
            this.l = new java.util.ArrayList<DeepCopyBar>();
        }
        this.l.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DeepCopyBar> getL() {
        return this.l;
    }

    public DeepCopyFoo setL(@org.apache.thrift.annotation.Nullable java.util.List<DeepCopyBar> l) {
        this.l = l;
        return this;
    }

    public void unsetL() {
        this.l = null;
    }

    /** Returns true if field l is set (has been assigned a value) and false otherwise */
    public boolean isSetL() {
        return this.l != null;
    }

    public void setLIsSet(boolean value) {
        if (!value) {
            this.l = null;
        }
    }

    public int getSSize() {
        return (this.s == null) ? 0 : this.s.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DeepCopyBar> getSIterator() {
        return (this.s == null) ? null : this.s.iterator();
    }

    public void addToS(DeepCopyBar elem) {
        if (this.s == null) {
            this.s = new java.util.HashSet<DeepCopyBar>();
        }
        this.s.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<DeepCopyBar> getS() {
        return this.s;
    }

    public DeepCopyFoo setS(@org.apache.thrift.annotation.Nullable java.util.Set<DeepCopyBar> s) {
        this.s = s;
        return this;
    }

    public void unsetS() {
        this.s = null;
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
        return this.s != null;
    }

    public void setSIsSet(boolean value) {
        if (!value) {
            this.s = null;
        }
    }

    public int getMSize() {
        return (this.m == null) ? 0 : this.m.size();
    }

    public void putToM(java.lang.String key, DeepCopyBar val) {
        if (this.m == null) {
            this.m = new java.util.HashMap<java.lang.String, DeepCopyBar>();
        }
        this.m.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, DeepCopyBar> getM() {
        return this.m;
    }

    public DeepCopyFoo setM(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, DeepCopyBar> m) {
        this.m = m;
        return this;
    }

    public void unsetM() {
        this.m = null;
    }

    /** Returns true if field m is set (has been assigned a value) and false otherwise */
    public boolean isSetM() {
        return this.m != null;
    }

    public void setMIsSet(boolean value) {
        if (!value) {
            this.m = null;
        }
    }

    public int getLiSize() {
        return (this.li == null) ? 0 : this.li.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<thrift.test.Object> getLiIterator() {
        return (this.li == null) ? null : this.li.iterator();
    }

    public void addToLi(thrift.test.Object elem) {
        if (this.li == null) {
            this.li = new java.util.ArrayList<thrift.test.Object>();
        }
        this.li.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<thrift.test.Object> getLi() {
        return this.li;
    }

    public DeepCopyFoo setLi(@org.apache.thrift.annotation.Nullable java.util.List<thrift.test.Object> li) {
        this.li = li;
        return this;
    }

    public void unsetLi() {
        this.li = null;
    }

    /** Returns true if field li is set (has been assigned a value) and false otherwise */
    public boolean isSetLi() {
        return this.li != null;
    }

    public void setLiIsSet(boolean value) {
        if (!value) {
            this.li = null;
        }
    }

    public int getSiSize() {
        return (this.si == null) ? 0 : this.si.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<thrift.test.Object> getSiIterator() {
        return (this.si == null) ? null : this.si.iterator();
    }

    public void addToSi(thrift.test.Object elem) {
        if (this.si == null) {
            this.si = new java.util.HashSet<thrift.test.Object>();
        }
        this.si.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<thrift.test.Object> getSi() {
        return this.si;
    }

    public DeepCopyFoo setSi(@org.apache.thrift.annotation.Nullable java.util.Set<thrift.test.Object> si) {
        this.si = si;
        return this;
    }

    public void unsetSi() {
        this.si = null;
    }

    /** Returns true if field si is set (has been assigned a value) and false otherwise */
    public boolean isSetSi() {
        return this.si != null;
    }

    public void setSiIsSet(boolean value) {
        if (!value) {
            this.si = null;
        }
    }

    public int getMiSize() {
        return (this.mi == null) ? 0 : this.mi.size();
    }

    public void putToMi(java.lang.String key, thrift.test.Object val) {
        if (this.mi == null) {
            this.mi = new java.util.HashMap<java.lang.String, thrift.test.Object>();
        }
        this.mi.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, thrift.test.Object> getMi() {
        return this.mi;
    }

    public DeepCopyFoo setMi(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, thrift.test.Object> mi) {
        this.mi = mi;
        return this;
    }

    public void unsetMi() {
        this.mi = null;
    }

    /** Returns true if field mi is set (has been assigned a value) and false otherwise */
    public boolean isSetMi() {
        return this.mi != null;
    }

    public void setMiIsSet(boolean value) {
        if (!value) {
            this.mi = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public DeepCopyBar getBar() {
        return this.bar;
    }

    public DeepCopyFoo setBar(@org.apache.thrift.annotation.Nullable DeepCopyBar bar) {
        this.bar = bar;
        return this;
    }

    public void unsetBar() {
        this.bar = null;
    }

    /** Returns true if field bar is set (has been assigned a value) and false otherwise */
    public boolean isSetBar() {
        return this.bar != null;
    }

    public void setBarIsSet(boolean value) {
        if (!value) {
            this.bar = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case L:
                if (value == null) {
                    unsetL();
                } else {
                    setL((java.util.List<DeepCopyBar>) value);
                }
                break;

            case S:
                if (value == null) {
                    unsetS();
                } else {
                    setS((java.util.Set<DeepCopyBar>) value);
                }
                break;

            case M:
                if (value == null) {
                    unsetM();
                } else {
                    setM((java.util.Map<java.lang.String, DeepCopyBar>) value);
                }
                break;

            case LI:
                if (value == null) {
                    unsetLi();
                } else {
                    setLi((java.util.List<thrift.test.Object>) value);
                }
                break;

            case SI:
                if (value == null) {
                    unsetSi();
                } else {
                    setSi((java.util.Set<thrift.test.Object>) value);
                }
                break;

            case MI:
                if (value == null) {
                    unsetMi();
                } else {
                    setMi((java.util.Map<java.lang.String, thrift.test.Object>) value);
                }
                break;

            case BAR:
                if (value == null) {
                    unsetBar();
                } else {
                    setBar((DeepCopyBar) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case L:
                return getL();

            case S:
                return getS();

            case M:
                return getM();

            case LI:
                return getLi();

            case SI:
                return getSi();

            case MI:
                return getMi();

            case BAR:
                return getBar();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case L:
                return isSetL();
            case S:
                return isSetS();
            case M:
                return isSetM();
            case LI:
                return isSetLi();
            case SI:
                return isSetSi();
            case MI:
                return isSetMi();
            case BAR:
                return isSetBar();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof DeepCopyFoo)
            return this.equals((DeepCopyFoo) that);
        return false;
    }

    public boolean equals(DeepCopyFoo that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_l = true && this.isSetL();
        boolean that_present_l = true && that.isSetL();
        if (this_present_l || that_present_l) {
            if (!(this_present_l && that_present_l))
                return false;
            if (!this.l.equals(that.l))
                return false;
        }

        boolean this_present_s = true && this.isSetS();
        boolean that_present_s = true && that.isSetS();
        if (this_present_s || that_present_s) {
            if (!(this_present_s && that_present_s))
                return false;
            if (!this.s.equals(that.s))
                return false;
        }

        boolean this_present_m = true && this.isSetM();
        boolean that_present_m = true && that.isSetM();
        if (this_present_m || that_present_m) {
            if (!(this_present_m && that_present_m))
                return false;
            if (!this.m.equals(that.m))
                return false;
        }

        boolean this_present_li = true && this.isSetLi();
        boolean that_present_li = true && that.isSetLi();
        if (this_present_li || that_present_li) {
            if (!(this_present_li && that_present_li))
                return false;
            if (!this.li.equals(that.li))
                return false;
        }

        boolean this_present_si = true && this.isSetSi();
        boolean that_present_si = true && that.isSetSi();
        if (this_present_si || that_present_si) {
            if (!(this_present_si && that_present_si))
                return false;
            if (!this.si.equals(that.si))
                return false;
        }

        boolean this_present_mi = true && this.isSetMi();
        boolean that_present_mi = true && that.isSetMi();
        if (this_present_mi || that_present_mi) {
            if (!(this_present_mi && that_present_mi))
                return false;
            if (!this.mi.equals(that.mi))
                return false;
        }

        boolean this_present_bar = true && this.isSetBar();
        boolean that_present_bar = true && that.isSetBar();
        if (this_present_bar || that_present_bar) {
            if (!(this_present_bar && that_present_bar))
                return false;
            if (!this.bar.equals(that.bar))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetL()) ? 131071 : 524287);
        if (isSetL())
            hashCode = hashCode * 8191 + l.hashCode();

        hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
        if (isSetS())
            hashCode = hashCode * 8191 + s.hashCode();

        hashCode = hashCode * 8191 + ((isSetM()) ? 131071 : 524287);
        if (isSetM())
            hashCode = hashCode * 8191 + m.hashCode();

        hashCode = hashCode * 8191 + ((isSetLi()) ? 131071 : 524287);
        if (isSetLi())
            hashCode = hashCode * 8191 + li.hashCode();

        hashCode = hashCode * 8191 + ((isSetSi()) ? 131071 : 524287);
        if (isSetSi())
            hashCode = hashCode * 8191 + si.hashCode();

        hashCode = hashCode * 8191 + ((isSetMi()) ? 131071 : 524287);
        if (isSetMi())
            hashCode = hashCode * 8191 + mi.hashCode();

        hashCode = hashCode * 8191 + ((isSetBar()) ? 131071 : 524287);
        if (isSetBar())
            hashCode = hashCode * 8191 + bar.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(DeepCopyFoo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetL(), other.isSetL());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetL()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l, other.l);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetS(), other.isSetS());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetS()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetM(), other.isSetM());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetM()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m, other.m);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetLi(), other.isSetLi());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLi()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.li, other.li);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSi(), other.isSetSi());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSi()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.si, other.si);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetMi(), other.isSetMi());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMi()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mi, other.mi);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBar(), other.isSetBar());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBar()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bar, other.bar);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("DeepCopyFoo(");
        boolean first = true;

        if (isSetL()) {
            sb.append("l:");
            if (this.l == null) {
                sb.append("null");
            } else {
                sb.append(this.l);
            }
            first = false;
        }
        if (isSetS()) {
            if (!first) sb.append(", ");
            sb.append("s:");
            if (this.s == null) {
                sb.append("null");
            } else {
                sb.append(this.s);
            }
            first = false;
        }
        if (isSetM()) {
            if (!first) sb.append(", ");
            sb.append("m:");
            if (this.m == null) {
                sb.append("null");
            } else {
                sb.append(this.m);
            }
            first = false;
        }
        if (isSetLi()) {
            if (!first) sb.append(", ");
            sb.append("li:");
            if (this.li == null) {
                sb.append("null");
            } else {
                sb.append(this.li);
            }
            first = false;
        }
        if (isSetSi()) {
            if (!first) sb.append(", ");
            sb.append("si:");
            if (this.si == null) {
                sb.append("null");
            } else {
                sb.append(this.si);
            }
            first = false;
        }
        if (isSetMi()) {
            if (!first) sb.append(", ");
            sb.append("mi:");
            if (this.mi == null) {
                sb.append("null");
            } else {
                sb.append(this.mi);
            }
            first = false;
        }
        if (isSetBar()) {
            if (!first) sb.append(", ");
            sb.append("bar:");
            if (this.bar == null) {
                sb.append("null");
            } else {
                sb.append(this.bar);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (bar != null) {
            bar.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DeepCopyFooStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public DeepCopyFooStandardScheme getScheme() {
            return new DeepCopyFooStandardScheme();
        }
    }

    private static class DeepCopyFooStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeepCopyFoo> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, DeepCopyFoo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // L
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.l = new java.util.ArrayList<DeepCopyBar>(_list0.size);
                                @org.apache.thrift.annotation.Nullable DeepCopyBar _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = new DeepCopyBar();
                                    _elem1.read(iprot);
                                    struct.l.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setLIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // S
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                                struct.s = new java.util.HashSet<DeepCopyBar>(2 * _set3.size);
                                @org.apache.thrift.annotation.Nullable DeepCopyBar _elem4;
                                for (int _i5 = 0; _i5 < _set3.size; ++_i5) {
                                    _elem4 = new DeepCopyBar();
                                    _elem4.read(iprot);
                                    struct.s.add(_elem4);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setSIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // M
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                                struct.m = new java.util.HashMap<java.lang.String, DeepCopyBar>(2 * _map6.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key7;
                                @org.apache.thrift.annotation.Nullable DeepCopyBar _val8;
                                for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
                                    _key7 = iprot.readString();
                                    _val8 = new DeepCopyBar();
                                    _val8.read(iprot);
                                    struct.m.put(_key7, _val8);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setMIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // LI
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                                struct.li = new java.util.ArrayList<thrift.test.Object>(_list10.size);
                                @org.apache.thrift.annotation.Nullable thrift.test.Object _elem11;
                                for (int _i12 = 0; _i12 < _list10.size; ++_i12) {
                                    _elem11 = new thrift.test.Object();
                                    _elem11.read(iprot);
                                    struct.li.add(_elem11);
                                }
                                iprot.readListEnd();
                            }
                            struct.setLiIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // SI
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set13 = iprot.readSetBegin();
                                struct.si = new java.util.HashSet<thrift.test.Object>(2 * _set13.size);
                                @org.apache.thrift.annotation.Nullable thrift.test.Object _elem14;
                                for (int _i15 = 0; _i15 < _set13.size; ++_i15) {
                                    _elem14 = new thrift.test.Object();
                                    _elem14.read(iprot);
                                    struct.si.add(_elem14);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setSiIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // MI
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                                struct.mi = new java.util.HashMap<java.lang.String, thrift.test.Object>(2 * _map16.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key17;
                                @org.apache.thrift.annotation.Nullable thrift.test.Object _val18;
                                for (int _i19 = 0; _i19 < _map16.size; ++_i19) {
                                    _key17 = iprot.readString();
                                    _val18 = new thrift.test.Object();
                                    _val18.read(iprot);
                                    struct.mi.put(_key17, _val18);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setMiIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // BAR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.bar = new DeepCopyBar();
                            struct.bar.read(iprot);
                            struct.setBarIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, DeepCopyFoo struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.l != null) {
                if (struct.isSetL()) {
                    oprot.writeFieldBegin(L_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.l.size()));
                        for (DeepCopyBar _iter20 : struct.l) {
                            _iter20.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.s != null) {
                if (struct.isSetS()) {
                    oprot.writeFieldBegin(S_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.s.size()));
                        for (DeepCopyBar _iter21 : struct.s) {
                            _iter21.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.m != null) {
                if (struct.isSetM()) {
                    oprot.writeFieldBegin(M_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.m.size()));
                        for (java.util.Map.Entry<java.lang.String, DeepCopyBar> _iter22 : struct.m.entrySet()) {
                            oprot.writeString(_iter22.getKey());
                            _iter22.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.li != null) {
                if (struct.isSetLi()) {
                    oprot.writeFieldBegin(LI_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.li.size()));
                        for (thrift.test.Object _iter23 : struct.li) {
                            _iter23.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.si != null) {
                if (struct.isSetSi()) {
                    oprot.writeFieldBegin(SI_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.si.size()));
                        for (thrift.test.Object _iter24 : struct.si) {
                            _iter24.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.mi != null) {
                if (struct.isSetMi()) {
                    oprot.writeFieldBegin(MI_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mi.size()));
                        for (java.util.Map.Entry<java.lang.String, thrift.test.Object> _iter25 : struct.mi.entrySet()) {
                            oprot.writeString(_iter25.getKey());
                            _iter25.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.bar != null) {
                if (struct.isSetBar()) {
                    oprot.writeFieldBegin(BAR_FIELD_DESC);
                    struct.bar.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DeepCopyFooTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public DeepCopyFooTupleScheme getScheme() {
            return new DeepCopyFooTupleScheme();
        }
    }

    private static class DeepCopyFooTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeepCopyFoo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DeepCopyFoo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetL()) {
                optionals.set(0);
            }
            if (struct.isSetS()) {
                optionals.set(1);
            }
            if (struct.isSetM()) {
                optionals.set(2);
            }
            if (struct.isSetLi()) {
                optionals.set(3);
            }
            if (struct.isSetSi()) {
                optionals.set(4);
            }
            if (struct.isSetMi()) {
                optionals.set(5);
            }
            if (struct.isSetBar()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetL()) {
                {
                    oprot.writeI32(struct.l.size());
                    for (DeepCopyBar _iter26 : struct.l) {
                        _iter26.write(oprot);
                    }
                }
            }
            if (struct.isSetS()) {
                {
                    oprot.writeI32(struct.s.size());
                    for (DeepCopyBar _iter27 : struct.s) {
                        _iter27.write(oprot);
                    }
                }
            }
            if (struct.isSetM()) {
                {
                    oprot.writeI32(struct.m.size());
                    for (java.util.Map.Entry<java.lang.String, DeepCopyBar> _iter28 : struct.m.entrySet()) {
                        oprot.writeString(_iter28.getKey());
                        _iter28.getValue().write(oprot);
                    }
                }
            }
            if (struct.isSetLi()) {
                {
                    oprot.writeI32(struct.li.size());
                    for (thrift.test.Object _iter29 : struct.li) {
                        _iter29.write(oprot);
                    }
                }
            }
            if (struct.isSetSi()) {
                {
                    oprot.writeI32(struct.si.size());
                    for (thrift.test.Object _iter30 : struct.si) {
                        _iter30.write(oprot);
                    }
                }
            }
            if (struct.isSetMi()) {
                {
                    oprot.writeI32(struct.mi.size());
                    for (java.util.Map.Entry<java.lang.String, thrift.test.Object> _iter31 : struct.mi.entrySet()) {
                        oprot.writeString(_iter31.getKey());
                        _iter31.getValue().write(oprot);
                    }
                }
            }
            if (struct.isSetBar()) {
                struct.bar.write(oprot);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DeepCopyFoo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list32 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.l = new java.util.ArrayList<DeepCopyBar>(_list32.size);
                    @org.apache.thrift.annotation.Nullable DeepCopyBar _elem33;
                    for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                        _elem33 = new DeepCopyBar();
                        _elem33.read(iprot);
                        struct.l.add(_elem33);
                    }
                }
                struct.setLIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.s = new java.util.HashSet<DeepCopyBar>(2 * _set35.size);
                    @org.apache.thrift.annotation.Nullable DeepCopyBar _elem36;
                    for (int _i37 = 0; _i37 < _set35.size; ++_i37) {
                        _elem36 = new DeepCopyBar();
                        _elem36.read(iprot);
                        struct.s.add(_elem36);
                    }
                }
                struct.setSIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT);
                    struct.m = new java.util.HashMap<java.lang.String, DeepCopyBar>(2 * _map38.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key39;
                    @org.apache.thrift.annotation.Nullable DeepCopyBar _val40;
                    for (int _i41 = 0; _i41 < _map38.size; ++_i41) {
                        _key39 = iprot.readString();
                        _val40 = new DeepCopyBar();
                        _val40.read(iprot);
                        struct.m.put(_key39, _val40);
                    }
                }
                struct.setMIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list42 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.li = new java.util.ArrayList<thrift.test.Object>(_list42.size);
                    @org.apache.thrift.annotation.Nullable thrift.test.Object _elem43;
                    for (int _i44 = 0; _i44 < _list42.size; ++_i44) {
                        _elem43 = new thrift.test.Object();
                        _elem43.read(iprot);
                        struct.li.add(_elem43);
                    }
                }
                struct.setLiIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TSet _set45 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.si = new java.util.HashSet<thrift.test.Object>(2 * _set45.size);
                    @org.apache.thrift.annotation.Nullable thrift.test.Object _elem46;
                    for (int _i47 = 0; _i47 < _set45.size; ++_i47) {
                        _elem46 = new thrift.test.Object();
                        _elem46.read(iprot);
                        struct.si.add(_elem46);
                    }
                }
                struct.setSiIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT);
                    struct.mi = new java.util.HashMap<java.lang.String, thrift.test.Object>(2 * _map48.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key49;
                    @org.apache.thrift.annotation.Nullable thrift.test.Object _val50;
                    for (int _i51 = 0; _i51 < _map48.size; ++_i51) {
                        _key49 = iprot.readString();
                        _val50 = new thrift.test.Object();
                        _val50.read(iprot);
                        struct.mi.put(_key49, _val50);
                    }
                }
                struct.setMiIsSet(true);
            }
            if (incoming.get(6)) {
                struct.bar = new DeepCopyBar();
                struct.bar.read(iprot);
                struct.setBarIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

