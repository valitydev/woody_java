/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Binaries implements org.apache.thrift.TBase<Binaries, Binaries._Fields>, java.io.Serializable, Cloneable, Comparable<Binaries> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Binaries");

    private static final org.apache.thrift.protocol.TField BIN_FIELD_DESC = new org.apache.thrift.protocol.TField("bin", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField REQ_BIN_FIELD_DESC = new org.apache.thrift.protocol.TField("req_bin", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField OPT_BIN_FIELD_DESC = new org.apache.thrift.protocol.TField("opt_bin", org.apache.thrift.protocol.TType.STRING, (short) 6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BinariesStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BinariesTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer bin; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer req_bin; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer opt_bin; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BIN((short) 4, "bin"),
        REQ_BIN((short) 5, "req_bin"),
        OPT_BIN((short) 6, "opt_bin");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 4: // BIN
                    return BIN;
                case 5: // REQ_BIN
                    return REQ_BIN;
                case 6: // OPT_BIN
                    return OPT_BIN;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.OPT_BIN};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BIN, new org.apache.thrift.meta_data.FieldMetaData("bin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.REQ_BIN, new org.apache.thrift.meta_data.FieldMetaData("req_bin", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.OPT_BIN, new org.apache.thrift.meta_data.FieldMetaData("opt_bin", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Binaries.class, metaDataMap);
    }

    public Binaries() {
    }

    public Binaries(
            java.nio.ByteBuffer bin,
            java.nio.ByteBuffer req_bin) {
        this();
        this.bin = org.apache.thrift.TBaseHelper.copyBinary(bin);
        this.req_bin = org.apache.thrift.TBaseHelper.copyBinary(req_bin);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Binaries(Binaries other) {
        if (other.isSetBin()) {
            this.bin = org.apache.thrift.TBaseHelper.copyBinary(other.bin);
        }
        if (other.isSetReq_bin()) {
            this.req_bin = org.apache.thrift.TBaseHelper.copyBinary(other.req_bin);
        }
        if (other.isSetOpt_bin()) {
            this.opt_bin = org.apache.thrift.TBaseHelper.copyBinary(other.opt_bin);
        }
    }

    @Override
    public Binaries deepCopy() {
        return new Binaries(this);
    }

    @Override
    public void clear() {
        this.bin = null;
        this.req_bin = null;
        this.opt_bin = null;
    }

    public byte[] getBin() {
        setBin(org.apache.thrift.TBaseHelper.rightSize(bin));
        return bin == null ? null : bin.array();
    }

    public java.nio.ByteBuffer bufferForBin() {
        return org.apache.thrift.TBaseHelper.copyBinary(bin);
    }

    public Binaries setBin(byte[] bin) {
        this.bin = bin == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(bin.clone());
        return this;
    }

    public Binaries setBin(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer bin) {
        this.bin = org.apache.thrift.TBaseHelper.copyBinary(bin);
        return this;
    }

    public void unsetBin() {
        this.bin = null;
    }

    /** Returns true if field bin is set (has been assigned a value) and false otherwise */
    public boolean isSetBin() {
        return this.bin != null;
    }

    public void setBinIsSet(boolean value) {
        if (!value) {
            this.bin = null;
        }
    }

    public byte[] getReq_bin() {
        setReq_bin(org.apache.thrift.TBaseHelper.rightSize(req_bin));
        return req_bin == null ? null : req_bin.array();
    }

    public java.nio.ByteBuffer bufferForReq_bin() {
        return org.apache.thrift.TBaseHelper.copyBinary(req_bin);
    }

    public Binaries setReq_bin(byte[] req_bin) {
        this.req_bin = req_bin == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(req_bin.clone());
        return this;
    }

    public Binaries setReq_bin(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer req_bin) {
        this.req_bin = org.apache.thrift.TBaseHelper.copyBinary(req_bin);
        return this;
    }

    public void unsetReq_bin() {
        this.req_bin = null;
    }

    /** Returns true if field req_bin is set (has been assigned a value) and false otherwise */
    public boolean isSetReq_bin() {
        return this.req_bin != null;
    }

    public void setReq_binIsSet(boolean value) {
        if (!value) {
            this.req_bin = null;
        }
    }

    public byte[] getOpt_bin() {
        setOpt_bin(org.apache.thrift.TBaseHelper.rightSize(opt_bin));
        return opt_bin == null ? null : opt_bin.array();
    }

    public java.nio.ByteBuffer bufferForOpt_bin() {
        return org.apache.thrift.TBaseHelper.copyBinary(opt_bin);
    }

    public Binaries setOpt_bin(byte[] opt_bin) {
        this.opt_bin = opt_bin == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(opt_bin.clone());
        return this;
    }

    public Binaries setOpt_bin(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer opt_bin) {
        this.opt_bin = org.apache.thrift.TBaseHelper.copyBinary(opt_bin);
        return this;
    }

    public void unsetOpt_bin() {
        this.opt_bin = null;
    }

    /** Returns true if field opt_bin is set (has been assigned a value) and false otherwise */
    public boolean isSetOpt_bin() {
        return this.opt_bin != null;
    }

    public void setOpt_binIsSet(boolean value) {
        if (!value) {
            this.opt_bin = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case BIN:
                if (value == null) {
                    unsetBin();
                } else {
                    if (value instanceof byte[]) {
                        setBin((byte[]) value);
                    } else {
                        setBin((java.nio.ByteBuffer) value);
                    }
                }
                break;

            case REQ_BIN:
                if (value == null) {
                    unsetReq_bin();
                } else {
                    if (value instanceof byte[]) {
                        setReq_bin((byte[]) value);
                    } else {
                        setReq_bin((java.nio.ByteBuffer) value);
                    }
                }
                break;

            case OPT_BIN:
                if (value == null) {
                    unsetOpt_bin();
                } else {
                    if (value instanceof byte[]) {
                        setOpt_bin((byte[]) value);
                    } else {
                        setOpt_bin((java.nio.ByteBuffer) value);
                    }
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case BIN:
                return getBin();

            case REQ_BIN:
                return getReq_bin();

            case OPT_BIN:
                return getOpt_bin();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case BIN:
                return isSetBin();
            case REQ_BIN:
                return isSetReq_bin();
            case OPT_BIN:
                return isSetOpt_bin();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof Binaries)
            return this.equals((Binaries) that);
        return false;
    }

    public boolean equals(Binaries that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_bin = true && this.isSetBin();
        boolean that_present_bin = true && that.isSetBin();
        if (this_present_bin || that_present_bin) {
            if (!(this_present_bin && that_present_bin))
                return false;
            if (!this.bin.equals(that.bin))
                return false;
        }

        boolean this_present_req_bin = true && this.isSetReq_bin();
        boolean that_present_req_bin = true && that.isSetReq_bin();
        if (this_present_req_bin || that_present_req_bin) {
            if (!(this_present_req_bin && that_present_req_bin))
                return false;
            if (!this.req_bin.equals(that.req_bin))
                return false;
        }

        boolean this_present_opt_bin = true && this.isSetOpt_bin();
        boolean that_present_opt_bin = true && that.isSetOpt_bin();
        if (this_present_opt_bin || that_present_opt_bin) {
            if (!(this_present_opt_bin && that_present_opt_bin))
                return false;
            if (!this.opt_bin.equals(that.opt_bin))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetBin()) ? 131071 : 524287);
        if (isSetBin())
            hashCode = hashCode * 8191 + bin.hashCode();

        hashCode = hashCode * 8191 + ((isSetReq_bin()) ? 131071 : 524287);
        if (isSetReq_bin())
            hashCode = hashCode * 8191 + req_bin.hashCode();

        hashCode = hashCode * 8191 + ((isSetOpt_bin()) ? 131071 : 524287);
        if (isSetOpt_bin())
            hashCode = hashCode * 8191 + opt_bin.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Binaries other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetBin(), other.isSetBin());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBin()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin, other.bin);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetReq_bin(), other.isSetReq_bin());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReq_bin()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req_bin, other.req_bin);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetOpt_bin(), other.isSetOpt_bin());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOpt_bin()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt_bin, other.opt_bin);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Binaries(");
        boolean first = true;

        sb.append("bin:");
        if (this.bin == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.bin, sb);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("req_bin:");
        if (this.req_bin == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.req_bin, sb);
        }
        first = false;
        if (isSetOpt_bin()) {
            if (!first) sb.append(", ");
            sb.append("opt_bin:");
            if (this.opt_bin == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.opt_bin, sb);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (req_bin == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'req_bin' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class BinariesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public BinariesStandardScheme getScheme() {
            return new BinariesStandardScheme();
        }
    }

    private static class BinariesStandardScheme extends org.apache.thrift.scheme.StandardScheme<Binaries> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Binaries struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 4: // BIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.bin = iprot.readBinary();
                            struct.setBinIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // REQ_BIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.req_bin = iprot.readBinary();
                            struct.setReq_binIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // OPT_BIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.opt_bin = iprot.readBinary();
                            struct.setOpt_binIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Binaries struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.bin != null) {
                oprot.writeFieldBegin(BIN_FIELD_DESC);
                oprot.writeBinary(struct.bin);
                oprot.writeFieldEnd();
            }
            if (struct.req_bin != null) {
                oprot.writeFieldBegin(REQ_BIN_FIELD_DESC);
                oprot.writeBinary(struct.req_bin);
                oprot.writeFieldEnd();
            }
            if (struct.opt_bin != null) {
                if (struct.isSetOpt_bin()) {
                    oprot.writeFieldBegin(OPT_BIN_FIELD_DESC);
                    oprot.writeBinary(struct.opt_bin);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class BinariesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public BinariesTupleScheme getScheme() {
            return new BinariesTupleScheme();
        }
    }

    private static class BinariesTupleScheme extends org.apache.thrift.scheme.TupleScheme<Binaries> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Binaries struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeBinary(struct.req_bin);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetBin()) {
                optionals.set(0);
            }
            if (struct.isSetOpt_bin()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetBin()) {
                oprot.writeBinary(struct.bin);
            }
            if (struct.isSetOpt_bin()) {
                oprot.writeBinary(struct.opt_bin);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Binaries struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.req_bin = iprot.readBinary();
            struct.setReq_binIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.bin = iprot.readBinary();
                struct.setBinIsSet(true);
            }
            if (incoming.get(1)) {
                struct.opt_bin = iprot.readBinary();
                struct.setOpt_binIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

