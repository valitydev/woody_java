/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AsyncNonblockingServiceSrv {

    public interface Iface {

        public Object mymethod(Integer integer, String str, Boolean boolean_field, Double dbl, Byte bite, java.util.Map<java.lang.Integer, Integer> intmap, Map somemap) throws Exception, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void mymethod(Integer integer, String str, Boolean boolean_field, Double dbl, Byte bite, java.util.Map<java.lang.Integer, Integer> intmap, Map somemap, org.apache.thrift.async.AsyncMethodCallback<Object> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        @Override
        public Object mymethod(Integer integer, String str, Boolean boolean_field, Double dbl, Byte bite, java.util.Map<java.lang.Integer, Integer> intmap, Map somemap) throws Exception, org.apache.thrift.TException {
            send_mymethod(integer, str, boolean_field, dbl, bite, intmap, somemap);
            return recv_mymethod();
        }

        public void send_mymethod(Integer integer, String str, Boolean boolean_field, Double dbl, Byte bite, java.util.Map<java.lang.Integer, Integer> intmap, Map somemap) throws org.apache.thrift.TException {
            mymethod_args args = new mymethod_args();
            args.setInteger(integer);
            args.setStr(str);
            args.setBoolean_field(boolean_field);
            args.setDbl(dbl);
            args.setBite(bite);
            args.setIntmap(intmap);
            args.setSomemap(somemap);
            sendBase("mymethod", args);
        }

        public Object recv_mymethod() throws Exception, org.apache.thrift.TException {
            mymethod_result result = new mymethod_result();
            receiveBase(result, "mymethod");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mymethod failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            @Override
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        @Override
        public void mymethod(Integer integer, String str, Boolean boolean_field, Double dbl, Byte bite, java.util.Map<java.lang.Integer, Integer> intmap, Map somemap, org.apache.thrift.async.AsyncMethodCallback<Object> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mymethod_call method_call = new mymethod_call(integer, str, boolean_field, dbl, bite, intmap, somemap, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mymethod_call extends org.apache.thrift.async.TAsyncMethodCall<Object> {
            private Integer integer;
            private String str;
            private Boolean boolean_field;
            private Double dbl;
            private Byte bite;
            private java.util.Map<java.lang.Integer, Integer> intmap;
            private Map somemap;

            public mymethod_call(Integer integer, String str, Boolean boolean_field, Double dbl, Byte bite, java.util.Map<java.lang.Integer, Integer> intmap, Map somemap, org.apache.thrift.async.AsyncMethodCallback<Object> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.integer = integer;
                this.str = str;
                this.boolean_field = boolean_field;
                this.dbl = dbl;
                this.bite = bite;
                this.intmap = intmap;
                this.somemap = somemap;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mymethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mymethod_args args = new mymethod_args();
                args.setInteger(integer);
                args.setStr(str);
                args.setBoolean_field(boolean_field);
                args.setDbl(dbl);
                args.setBite(bite);
                args.setIntmap(intmap);
                args.setSomemap(somemap);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Object getResult() throws Exception, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_mymethod();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("mymethod", new mymethod());
            return processMap;
        }

        public static class mymethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mymethod_args> {
            public mymethod() {
                super("mymethod");
            }

            @Override
            public mymethod_args getEmptyArgsInstance() {
                return new mymethod_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public mymethod_result getResult(I iface, mymethod_args args) throws org.apache.thrift.TException {
                mymethod_result result = new mymethod_result();
                try {
                    result.success = iface.mymethod(args.integer, args.str, args.boolean_field, args.dbl, args.bite, args.intmap, args.somemap);
                } catch (Exception ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("mymethod", new mymethod());
            return processMap;
        }

        public static class mymethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mymethod_args, thrift.test.Object> {
            public mymethod() {
                super("mymethod");
            }

            @Override
            public mymethod_args getEmptyArgsInstance() {
                return new mymethod_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<thrift.test.Object> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<thrift.test.Object>() {
                    @Override
                    public void onComplete(thrift.test.Object o) {
                        mymethod_result result = new mymethod_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mymethod_result result = new mymethod_result();
                        if (e instanceof Exception) {
                            result.ex = (Exception) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, mymethod_args args, org.apache.thrift.async.AsyncMethodCallback<thrift.test.Object> resultHandler) throws org.apache.thrift.TException {
                iface.mymethod(args.integer, args.str, args.boolean_field, args.dbl, args.bite, args.intmap, args.somemap, resultHandler);
            }
        }

    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class mymethod_args implements org.apache.thrift.TBase<mymethod_args, mymethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<mymethod_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mymethod_args");

        private static final org.apache.thrift.protocol.TField INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("integer", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField BOOLEAN_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_field", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
        private static final org.apache.thrift.protocol.TField DBL_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl", org.apache.thrift.protocol.TType.STRUCT, (short) 4);
        private static final org.apache.thrift.protocol.TField BITE_FIELD_DESC = new org.apache.thrift.protocol.TField("bite", org.apache.thrift.protocol.TType.STRUCT, (short) 5);
        private static final org.apache.thrift.protocol.TField INTMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intmap", org.apache.thrift.protocol.TType.MAP, (short) 6);
        private static final org.apache.thrift.protocol.TField SOMEMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("somemap", org.apache.thrift.protocol.TType.STRUCT, (short) 7);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mymethod_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mymethod_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable Integer integer; // required
        public @org.apache.thrift.annotation.Nullable String str; // required
        public @org.apache.thrift.annotation.Nullable Boolean boolean_field; // required
        public @org.apache.thrift.annotation.Nullable Double dbl; // required
        public @org.apache.thrift.annotation.Nullable Byte bite; // required
        public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, Integer> intmap; // required
        public @org.apache.thrift.annotation.Nullable Map somemap; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            INTEGER((short) 1, "integer"),
            STR((short) 2, "str"),
            BOOLEAN_FIELD((short) 3, "boolean_field"),
            DBL((short) 4, "dbl"),
            BITE((short) 5, "bite"),
            INTMAP((short) 6, "intmap"),
            SOMEMAP((short) 7, "somemap");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // INTEGER
                        return INTEGER;
                    case 2: // STR
                        return STR;
                    case 3: // BOOLEAN_FIELD
                        return BOOLEAN_FIELD;
                    case 4: // DBL
                        return DBL;
                    case 5: // BITE
                        return BITE;
                    case 6: // INTMAP
                        return INTMAP;
                    case 7: // SOMEMAP
                        return SOMEMAP;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.INTEGER, new org.apache.thrift.meta_data.FieldMetaData("integer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Integer.class)));
            tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, String.class)));
            tmpMap.put(_Fields.BOOLEAN_FIELD, new org.apache.thrift.meta_data.FieldMetaData("boolean_field", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Boolean.class)));
            tmpMap.put(_Fields.DBL, new org.apache.thrift.meta_data.FieldMetaData("dbl", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Double.class)));
            tmpMap.put(_Fields.BITE, new org.apache.thrift.meta_data.FieldMetaData("bite", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Byte.class)));
            tmpMap.put(_Fields.INTMAP, new org.apache.thrift.meta_data.FieldMetaData("intmap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Integer.class))));
            tmpMap.put(_Fields.SOMEMAP, new org.apache.thrift.meta_data.FieldMetaData("somemap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Map.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mymethod_args.class, metaDataMap);
        }

        public mymethod_args() {
        }

        public mymethod_args(
                Integer integer,
                String str,
                Boolean boolean_field,
                Double dbl,
                Byte bite,
                java.util.Map<java.lang.Integer, Integer> intmap,
                Map somemap) {
            this();
            this.integer = integer;
            this.str = str;
            this.boolean_field = boolean_field;
            this.dbl = dbl;
            this.bite = bite;
            this.intmap = intmap;
            this.somemap = somemap;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mymethod_args(mymethod_args other) {
            if (other.isSetInteger()) {
                this.integer = new Integer(other.integer);
            }
            if (other.isSetStr()) {
                this.str = new String(other.str);
            }
            if (other.isSetBoolean_field()) {
                this.boolean_field = new Boolean(other.boolean_field);
            }
            if (other.isSetDbl()) {
                this.dbl = new Double(other.dbl);
            }
            if (other.isSetBite()) {
                this.bite = new Byte(other.bite);
            }
            if (other.isSetIntmap()) {
                java.util.Map<java.lang.Integer, Integer> __this__intmap = new java.util.HashMap<java.lang.Integer, Integer>(other.intmap.size());
                for (java.util.Map.Entry<java.lang.Integer, Integer> other_element : other.intmap.entrySet()) {

                    java.lang.Integer other_element_key = other_element.getKey();
                    Integer other_element_value = other_element.getValue();

                    java.lang.Integer __this__intmap_copy_key = other_element_key;

                    Integer __this__intmap_copy_value = new Integer(other_element_value);

                    __this__intmap.put(__this__intmap_copy_key, __this__intmap_copy_value);
                }
                this.intmap = __this__intmap;
            }
            if (other.isSetSomemap()) {
                this.somemap = new Map(other.somemap);
            }
        }

        @Override
        public mymethod_args deepCopy() {
            return new mymethod_args(this);
        }

        @Override
        public void clear() {
            this.integer = null;
            this.str = null;
            this.boolean_field = null;
            this.dbl = null;
            this.bite = null;
            this.intmap = null;
            this.somemap = null;
        }

        @org.apache.thrift.annotation.Nullable
        public Integer getInteger() {
            return this.integer;
        }

        public mymethod_args setInteger(@org.apache.thrift.annotation.Nullable Integer integer) {
            this.integer = integer;
            return this;
        }

        public void unsetInteger() {
            this.integer = null;
        }

        /** Returns true if field integer is set (has been assigned a value) and false otherwise */
        public boolean isSetInteger() {
            return this.integer != null;
        }

        public void setIntegerIsSet(boolean value) {
            if (!value) {
                this.integer = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public String getStr() {
            return this.str;
        }

        public mymethod_args setStr(@org.apache.thrift.annotation.Nullable String str) {
            this.str = str;
            return this;
        }

        public void unsetStr() {
            this.str = null;
        }

        /** Returns true if field str is set (has been assigned a value) and false otherwise */
        public boolean isSetStr() {
            return this.str != null;
        }

        public void setStrIsSet(boolean value) {
            if (!value) {
                this.str = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public Boolean getBoolean_field() {
            return this.boolean_field;
        }

        public mymethod_args setBoolean_field(@org.apache.thrift.annotation.Nullable Boolean boolean_field) {
            this.boolean_field = boolean_field;
            return this;
        }

        public void unsetBoolean_field() {
            this.boolean_field = null;
        }

        /** Returns true if field boolean_field is set (has been assigned a value) and false otherwise */
        public boolean isSetBoolean_field() {
            return this.boolean_field != null;
        }

        public void setBoolean_fieldIsSet(boolean value) {
            if (!value) {
                this.boolean_field = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public Double getDbl() {
            return this.dbl;
        }

        public mymethod_args setDbl(@org.apache.thrift.annotation.Nullable Double dbl) {
            this.dbl = dbl;
            return this;
        }

        public void unsetDbl() {
            this.dbl = null;
        }

        /** Returns true if field dbl is set (has been assigned a value) and false otherwise */
        public boolean isSetDbl() {
            return this.dbl != null;
        }

        public void setDblIsSet(boolean value) {
            if (!value) {
                this.dbl = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public Byte getBite() {
            return this.bite;
        }

        public mymethod_args setBite(@org.apache.thrift.annotation.Nullable Byte bite) {
            this.bite = bite;
            return this;
        }

        public void unsetBite() {
            this.bite = null;
        }

        /** Returns true if field bite is set (has been assigned a value) and false otherwise */
        public boolean isSetBite() {
            return this.bite != null;
        }

        public void setBiteIsSet(boolean value) {
            if (!value) {
                this.bite = null;
            }
        }

        public int getIntmapSize() {
            return (this.intmap == null) ? 0 : this.intmap.size();
        }

        public void putToIntmap(int key, Integer val) {
            if (this.intmap == null) {
                this.intmap = new java.util.HashMap<java.lang.Integer, Integer>();
            }
            this.intmap.put(key, val);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Map<java.lang.Integer, Integer> getIntmap() {
            return this.intmap;
        }

        public mymethod_args setIntmap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, Integer> intmap) {
            this.intmap = intmap;
            return this;
        }

        public void unsetIntmap() {
            this.intmap = null;
        }

        /** Returns true if field intmap is set (has been assigned a value) and false otherwise */
        public boolean isSetIntmap() {
            return this.intmap != null;
        }

        public void setIntmapIsSet(boolean value) {
            if (!value) {
                this.intmap = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public Map getSomemap() {
            return this.somemap;
        }

        public mymethod_args setSomemap(@org.apache.thrift.annotation.Nullable Map somemap) {
            this.somemap = somemap;
            return this;
        }

        public void unsetSomemap() {
            this.somemap = null;
        }

        /** Returns true if field somemap is set (has been assigned a value) and false otherwise */
        public boolean isSetSomemap() {
            return this.somemap != null;
        }

        public void setSomemapIsSet(boolean value) {
            if (!value) {
                this.somemap = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case INTEGER:
                    if (value == null) {
                        unsetInteger();
                    } else {
                        setInteger((Integer) value);
                    }
                    break;

                case STR:
                    if (value == null) {
                        unsetStr();
                    } else {
                        setStr((String) value);
                    }
                    break;

                case BOOLEAN_FIELD:
                    if (value == null) {
                        unsetBoolean_field();
                    } else {
                        setBoolean_field((Boolean) value);
                    }
                    break;

                case DBL:
                    if (value == null) {
                        unsetDbl();
                    } else {
                        setDbl((Double) value);
                    }
                    break;

                case BITE:
                    if (value == null) {
                        unsetBite();
                    } else {
                        setBite((Byte) value);
                    }
                    break;

                case INTMAP:
                    if (value == null) {
                        unsetIntmap();
                    } else {
                        setIntmap((java.util.Map<java.lang.Integer, Integer>) value);
                    }
                    break;

                case SOMEMAP:
                    if (value == null) {
                        unsetSomemap();
                    } else {
                        setSomemap((Map) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case INTEGER:
                    return getInteger();

                case STR:
                    return getStr();

                case BOOLEAN_FIELD:
                    return getBoolean_field();

                case DBL:
                    return getDbl();

                case BITE:
                    return getBite();

                case INTMAP:
                    return getIntmap();

                case SOMEMAP:
                    return getSomemap();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case INTEGER:
                    return isSetInteger();
                case STR:
                    return isSetStr();
                case BOOLEAN_FIELD:
                    return isSetBoolean_field();
                case DBL:
                    return isSetDbl();
                case BITE:
                    return isSetBite();
                case INTMAP:
                    return isSetIntmap();
                case SOMEMAP:
                    return isSetSomemap();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mymethod_args)
                return this.equals((mymethod_args) that);
            return false;
        }

        public boolean equals(mymethod_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_integer = true && this.isSetInteger();
            boolean that_present_integer = true && that.isSetInteger();
            if (this_present_integer || that_present_integer) {
                if (!(this_present_integer && that_present_integer))
                    return false;
                if (!this.integer.equals(that.integer))
                    return false;
            }

            boolean this_present_str = true && this.isSetStr();
            boolean that_present_str = true && that.isSetStr();
            if (this_present_str || that_present_str) {
                if (!(this_present_str && that_present_str))
                    return false;
                if (!this.str.equals(that.str))
                    return false;
            }

            boolean this_present_boolean_field = true && this.isSetBoolean_field();
            boolean that_present_boolean_field = true && that.isSetBoolean_field();
            if (this_present_boolean_field || that_present_boolean_field) {
                if (!(this_present_boolean_field && that_present_boolean_field))
                    return false;
                if (!this.boolean_field.equals(that.boolean_field))
                    return false;
            }

            boolean this_present_dbl = true && this.isSetDbl();
            boolean that_present_dbl = true && that.isSetDbl();
            if (this_present_dbl || that_present_dbl) {
                if (!(this_present_dbl && that_present_dbl))
                    return false;
                if (!this.dbl.equals(that.dbl))
                    return false;
            }

            boolean this_present_bite = true && this.isSetBite();
            boolean that_present_bite = true && that.isSetBite();
            if (this_present_bite || that_present_bite) {
                if (!(this_present_bite && that_present_bite))
                    return false;
                if (!this.bite.equals(that.bite))
                    return false;
            }

            boolean this_present_intmap = true && this.isSetIntmap();
            boolean that_present_intmap = true && that.isSetIntmap();
            if (this_present_intmap || that_present_intmap) {
                if (!(this_present_intmap && that_present_intmap))
                    return false;
                if (!this.intmap.equals(that.intmap))
                    return false;
            }

            boolean this_present_somemap = true && this.isSetSomemap();
            boolean that_present_somemap = true && that.isSetSomemap();
            if (this_present_somemap || that_present_somemap) {
                if (!(this_present_somemap && that_present_somemap))
                    return false;
                if (!this.somemap.equals(that.somemap))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetInteger()) ? 131071 : 524287);
            if (isSetInteger())
                hashCode = hashCode * 8191 + integer.hashCode();

            hashCode = hashCode * 8191 + ((isSetStr()) ? 131071 : 524287);
            if (isSetStr())
                hashCode = hashCode * 8191 + str.hashCode();

            hashCode = hashCode * 8191 + ((isSetBoolean_field()) ? 131071 : 524287);
            if (isSetBoolean_field())
                hashCode = hashCode * 8191 + boolean_field.hashCode();

            hashCode = hashCode * 8191 + ((isSetDbl()) ? 131071 : 524287);
            if (isSetDbl())
                hashCode = hashCode * 8191 + dbl.hashCode();

            hashCode = hashCode * 8191 + ((isSetBite()) ? 131071 : 524287);
            if (isSetBite())
                hashCode = hashCode * 8191 + bite.hashCode();

            hashCode = hashCode * 8191 + ((isSetIntmap()) ? 131071 : 524287);
            if (isSetIntmap())
                hashCode = hashCode * 8191 + intmap.hashCode();

            hashCode = hashCode * 8191 + ((isSetSomemap()) ? 131071 : 524287);
            if (isSetSomemap())
                hashCode = hashCode * 8191 + somemap.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mymethod_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetInteger(), other.isSetInteger());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInteger()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer, other.integer);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetStr(), other.isSetStr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetBoolean_field(), other.isSetBoolean_field());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBoolean_field()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_field, other.boolean_field);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDbl(), other.isSetDbl());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDbl()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl, other.dbl);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetBite(), other.isSetBite());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBite()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bite, other.bite);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetIntmap(), other.isSetIntmap());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIntmap()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intmap, other.intmap);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSomemap(), other.isSetSomemap());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSomemap()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.somemap, other.somemap);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mymethod_args(");
            boolean first = true;

            sb.append("integer:");
            if (this.integer == null) {
                sb.append("null");
            } else {
                sb.append(this.integer);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("str:");
            if (this.str == null) {
                sb.append("null");
            } else {
                sb.append(this.str);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("boolean_field:");
            if (this.boolean_field == null) {
                sb.append("null");
            } else {
                sb.append(this.boolean_field);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("dbl:");
            if (this.dbl == null) {
                sb.append("null");
            } else {
                sb.append(this.dbl);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("bite:");
            if (this.bite == null) {
                sb.append("null");
            } else {
                sb.append(this.bite);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("intmap:");
            if (this.intmap == null) {
                sb.append("null");
            } else {
                sb.append(this.intmap);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("somemap:");
            if (this.somemap == null) {
                sb.append("null");
            } else {
                sb.append(this.somemap);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (integer != null) {
                integer.validate();
            }
            if (str != null) {
                str.validate();
            }
            if (boolean_field != null) {
                boolean_field.validate();
            }
            if (dbl != null) {
                dbl.validate();
            }
            if (bite != null) {
                bite.validate();
            }
            if (somemap != null) {
                somemap.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mymethod_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public mymethod_argsStandardScheme getScheme() {
                return new mymethod_argsStandardScheme();
            }
        }

        private static class mymethod_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mymethod_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, mymethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // INTEGER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.integer = new Integer();
                                struct.integer.read(iprot);
                                struct.setIntegerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // STR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.str = new String();
                                struct.str.read(iprot);
                                struct.setStrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BOOLEAN_FIELD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.boolean_field = new Boolean();
                                struct.boolean_field.read(iprot);
                                struct.setBoolean_fieldIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // DBL
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.dbl = new Double();
                                struct.dbl.read(iprot);
                                struct.setDblIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // BITE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.bite = new Byte();
                                struct.bite.read(iprot);
                                struct.setBiteIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // INTMAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                                    struct.intmap = new java.util.HashMap<java.lang.Integer, Integer>(2 * _map66.size);
                                    int _key67;
                                    @org.apache.thrift.annotation.Nullable Integer _val68;
                                    for (int _i69 = 0; _i69 < _map66.size; ++_i69) {
                                        _key67 = iprot.readI32();
                                        _val68 = new Integer();
                                        _val68.read(iprot);
                                        struct.intmap.put(_key67, _val68);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setIntmapIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 7: // SOMEMAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.somemap = new Map();
                                struct.somemap.read(iprot);
                                struct.setSomemapIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, mymethod_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.integer != null) {
                    oprot.writeFieldBegin(INTEGER_FIELD_DESC);
                    struct.integer.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.str != null) {
                    oprot.writeFieldBegin(STR_FIELD_DESC);
                    struct.str.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.boolean_field != null) {
                    oprot.writeFieldBegin(BOOLEAN_FIELD_FIELD_DESC);
                    struct.boolean_field.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.dbl != null) {
                    oprot.writeFieldBegin(DBL_FIELD_DESC);
                    struct.dbl.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.bite != null) {
                    oprot.writeFieldBegin(BITE_FIELD_DESC);
                    struct.bite.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.intmap != null) {
                    oprot.writeFieldBegin(INTMAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.intmap.size()));
                        for (java.util.Map.Entry<java.lang.Integer, Integer> _iter70 : struct.intmap.entrySet()) {
                            oprot.writeI32(_iter70.getKey());
                            _iter70.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.somemap != null) {
                    oprot.writeFieldBegin(SOMEMAP_FIELD_DESC);
                    struct.somemap.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mymethod_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public mymethod_argsTupleScheme getScheme() {
                return new mymethod_argsTupleScheme();
            }
        }

        private static class mymethod_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mymethod_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mymethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetInteger()) {
                    optionals.set(0);
                }
                if (struct.isSetStr()) {
                    optionals.set(1);
                }
                if (struct.isSetBoolean_field()) {
                    optionals.set(2);
                }
                if (struct.isSetDbl()) {
                    optionals.set(3);
                }
                if (struct.isSetBite()) {
                    optionals.set(4);
                }
                if (struct.isSetIntmap()) {
                    optionals.set(5);
                }
                if (struct.isSetSomemap()) {
                    optionals.set(6);
                }
                oprot.writeBitSet(optionals, 7);
                if (struct.isSetInteger()) {
                    struct.integer.write(oprot);
                }
                if (struct.isSetStr()) {
                    struct.str.write(oprot);
                }
                if (struct.isSetBoolean_field()) {
                    struct.boolean_field.write(oprot);
                }
                if (struct.isSetDbl()) {
                    struct.dbl.write(oprot);
                }
                if (struct.isSetBite()) {
                    struct.bite.write(oprot);
                }
                if (struct.isSetIntmap()) {
                    {
                        oprot.writeI32(struct.intmap.size());
                        for (java.util.Map.Entry<java.lang.Integer, Integer> _iter71 : struct.intmap.entrySet()) {
                            oprot.writeI32(_iter71.getKey());
                            _iter71.getValue().write(oprot);
                        }
                    }
                }
                if (struct.isSetSomemap()) {
                    struct.somemap.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mymethod_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(7);
                if (incoming.get(0)) {
                    struct.integer = new Integer();
                    struct.integer.read(iprot);
                    struct.setIntegerIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.str = new String();
                    struct.str.read(iprot);
                    struct.setStrIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.boolean_field = new Boolean();
                    struct.boolean_field.read(iprot);
                    struct.setBoolean_fieldIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.dbl = new Double();
                    struct.dbl.read(iprot);
                    struct.setDblIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.bite = new Byte();
                    struct.bite.read(iprot);
                    struct.setBiteIsSet(true);
                }
                if (incoming.get(5)) {
                    {
                        org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT);
                        struct.intmap = new java.util.HashMap<java.lang.Integer, Integer>(2 * _map72.size);
                        int _key73;
                        @org.apache.thrift.annotation.Nullable Integer _val74;
                        for (int _i75 = 0; _i75 < _map72.size; ++_i75) {
                            _key73 = iprot.readI32();
                            _val74 = new Integer();
                            _val74.read(iprot);
                            struct.intmap.put(_key73, _val74);
                        }
                    }
                    struct.setIntmapIsSet(true);
                }
                if (incoming.get(6)) {
                    struct.somemap = new Map();
                    struct.somemap.read(iprot);
                    struct.setSomemapIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class mymethod_result implements org.apache.thrift.TBase<mymethod_result, mymethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<mymethod_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mymethod_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mymethod_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mymethod_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable Object success; // required
        public @org.apache.thrift.annotation.Nullable Exception ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Object.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Exception.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mymethod_result.class, metaDataMap);
        }

        public mymethod_result() {
        }

        public mymethod_result(
                Object success,
                Exception ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mymethod_result(mymethod_result other) {
            if (other.isSetSuccess()) {
                this.success = new Object(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new Exception(other.ex);
            }
        }

        @Override
        public mymethod_result deepCopy() {
            return new mymethod_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public Object getSuccess() {
            return this.success;
        }

        public mymethod_result setSuccess(@org.apache.thrift.annotation.Nullable Object success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public Exception getEx() {
            return this.ex;
        }

        public mymethod_result setEx(@org.apache.thrift.annotation.Nullable Exception ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Object) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((Exception) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mymethod_result)
                return this.equals((mymethod_result) that);
            return false;
        }

        public boolean equals(mymethod_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mymethod_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mymethod_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mymethod_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public mymethod_resultStandardScheme getScheme() {
                return new mymethod_resultStandardScheme();
            }
        }

        private static class mymethod_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mymethod_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, mymethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Object();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new Exception();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, mymethod_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mymethod_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public mymethod_resultTupleScheme getScheme() {
                return new mymethod_resultTupleScheme();
            }
        }

        private static class mymethod_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mymethod_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mymethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mymethod_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new Object();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new Exception();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
