/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test.annotations;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-06-21")
public class OneOfEachBeansWithAnnotations implements org.apache.thrift.TBase<OneOfEachBeansWithAnnotations, OneOfEachBeansWithAnnotations._Fields>, java.io.Serializable, Cloneable, Comparable<OneOfEachBeansWithAnnotations> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OneOfEachBeansWithAnnotations");

    private static final org.apache.thrift.protocol.TField BOOLEAN_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_field", org.apache.thrift.protocol.TType.BOOL, (short) 1);
    private static final org.apache.thrift.protocol.TField A_BITE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_bite", org.apache.thrift.protocol.TType.BYTE, (short) 2);
    private static final org.apache.thrift.protocol.TField INTEGER16_FIELD_DESC = new org.apache.thrift.protocol.TField("integer16", org.apache.thrift.protocol.TType.I16, (short) 3);
    private static final org.apache.thrift.protocol.TField INTEGER32_FIELD_DESC = new org.apache.thrift.protocol.TField("integer32", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField INTEGER64_FIELD_DESC = new org.apache.thrift.protocol.TField("integer64", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField DOUBLE_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("double_precision", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);
    private static final org.apache.thrift.protocol.TField SOME_CHARACTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("some_characters", org.apache.thrift.protocol.TType.STRING, (short) 7);
    private static final org.apache.thrift.protocol.TField BASE64_FIELD_DESC = new org.apache.thrift.protocol.TField("base64", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_list", org.apache.thrift.protocol.TType.LIST, (short) 9);
    private static final org.apache.thrift.protocol.TField I16_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_list", org.apache.thrift.protocol.TType.LIST, (short) 10);
    private static final org.apache.thrift.protocol.TField I64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_list", org.apache.thrift.protocol.TType.LIST, (short) 11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OneOfEachBeansWithAnnotationsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OneOfEachBeansWithAnnotationsTupleSchemeFactory();

    public boolean boolean_field; // required
    public byte a_bite; // required
    public short integer16; // required
    public int integer32; // required
    public long integer64; // required
    public double double_precision; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String some_characters; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer base64; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> byte_list; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> i16_list; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> i64_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BOOLEAN_FIELD((short) 1, "boolean_field"),
        A_BITE((short) 2, "a_bite"),
        INTEGER16((short) 3, "integer16"),
        INTEGER32((short) 4, "integer32"),
        INTEGER64((short) 5, "integer64"),
        DOUBLE_PRECISION((short) 6, "double_precision"),
        SOME_CHARACTERS((short) 7, "some_characters"),
        BASE64((short) 8, "base64"),
        BYTE_LIST((short) 9, "byte_list"),
        I16_LIST((short) 10, "i16_list"),
        I64_LIST((short) 11, "i64_list");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // BOOLEAN_FIELD
                    return BOOLEAN_FIELD;
                case 2: // A_BITE
                    return A_BITE;
                case 3: // INTEGER16
                    return INTEGER16;
                case 4: // INTEGER32
                    return INTEGER32;
                case 5: // INTEGER64
                    return INTEGER64;
                case 6: // DOUBLE_PRECISION
                    return DOUBLE_PRECISION;
                case 7: // SOME_CHARACTERS
                    return SOME_CHARACTERS;
                case 8: // BASE64
                    return BASE64;
                case 9: // BYTE_LIST
                    return BYTE_LIST;
                case 10: // I16_LIST
                    return I16_LIST;
                case 11: // I64_LIST
                    return I64_LIST;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __BOOLEAN_FIELD_ISSET_ID = 0;
    private static final int __A_BITE_ISSET_ID = 1;
    private static final int __INTEGER16_ISSET_ID = 2;
    private static final int __INTEGER32_ISSET_ID = 3;
    private static final int __INTEGER64_ISSET_ID = 4;
    private static final int __DOUBLE_PRECISION_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BOOLEAN_FIELD, new org.apache.thrift.meta_data.FieldMetaData("boolean_field", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.A_BITE, new org.apache.thrift.meta_data.FieldMetaData("a_bite", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
                java.util.stream.Stream.<java.util.Map.Entry<java.lang.String, java.lang.String>>builder()
                        .add(new java.util.AbstractMap.SimpleImmutableEntry<>("compression", "false"))
                        .build().collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getKey, java.util.Map.Entry::getValue))));
        tmpMap.put(_Fields.INTEGER16, new org.apache.thrift.meta_data.FieldMetaData("integer16", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
                java.util.stream.Stream.<java.util.Map.Entry<java.lang.String, java.lang.String>>builder()
                        .add(new java.util.AbstractMap.SimpleImmutableEntry<>("must_be_postive", "true"))
                        .build().collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getKey, java.util.Map.Entry::getValue))));
        tmpMap.put(_Fields.INTEGER32, new org.apache.thrift.meta_data.FieldMetaData("integer32", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.INTEGER64, new org.apache.thrift.meta_data.FieldMetaData("integer64", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DOUBLE_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("double_precision", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE),
                java.util.stream.Stream.<java.util.Map.Entry<java.lang.String, java.lang.String>>builder()
                        .add(new java.util.AbstractMap.SimpleImmutableEntry<>("nan_inf_allowed", "false"))
                        .build().collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getKey, java.util.Map.Entry::getValue))));
        tmpMap.put(_Fields.SOME_CHARACTERS, new org.apache.thrift.meta_data.FieldMetaData("some_characters", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BASE64, new org.apache.thrift.meta_data.FieldMetaData("base64", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byte_list", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)),
                java.util.stream.Stream.<java.util.Map.Entry<java.lang.String, java.lang.String>>builder()
                        .add(new java.util.AbstractMap.SimpleImmutableEntry<>("non_empty", "true"))
                        .build().collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getKey, java.util.Map.Entry::getValue))));
        tmpMap.put(_Fields.I16_LIST, new org.apache.thrift.meta_data.FieldMetaData("i16_list", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
        tmpMap.put(_Fields.I64_LIST, new org.apache.thrift.meta_data.FieldMetaData("i64_list", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneOfEachBeansWithAnnotations.class, metaDataMap);
    }

    public OneOfEachBeansWithAnnotations() {
    }

    public OneOfEachBeansWithAnnotations(
            boolean boolean_field,
            byte a_bite,
            short integer16,
            int integer32,
            long integer64,
            double double_precision,
            java.lang.String some_characters,
            java.nio.ByteBuffer base64,
            java.util.List<java.lang.Byte> byte_list,
            java.util.List<java.lang.Short> i16_list,
            java.util.List<java.lang.Long> i64_list) {
        this();
        this.boolean_field = boolean_field;
        setBoolean_fieldIsSet(true);
        this.a_bite = a_bite;
        setA_biteIsSet(true);
        this.integer16 = integer16;
        setInteger16IsSet(true);
        this.integer32 = integer32;
        setInteger32IsSet(true);
        this.integer64 = integer64;
        setInteger64IsSet(true);
        this.double_precision = double_precision;
        setDouble_precisionIsSet(true);
        this.some_characters = some_characters;
        this.base64 = org.apache.thrift.TBaseHelper.copyBinary(base64);
        this.byte_list = byte_list;
        this.i16_list = i16_list;
        this.i64_list = i64_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OneOfEachBeansWithAnnotations(OneOfEachBeansWithAnnotations other) {
        __isset_bitfield = other.__isset_bitfield;
        this.boolean_field = other.boolean_field;
        this.a_bite = other.a_bite;
        this.integer16 = other.integer16;
        this.integer32 = other.integer32;
        this.integer64 = other.integer64;
        this.double_precision = other.double_precision;
        if (other.isSetSome_characters()) {
            this.some_characters = other.some_characters;
        }
        if (other.isSetBase64()) {
            this.base64 = org.apache.thrift.TBaseHelper.copyBinary(other.base64);
        }
        if (other.isSetByte_list()) {
            java.util.List<java.lang.Byte> __this__byte_list = new java.util.ArrayList<java.lang.Byte>(other.byte_list);
            this.byte_list = __this__byte_list;
        }
        if (other.isSetI16_list()) {
            java.util.List<java.lang.Short> __this__i16_list = new java.util.ArrayList<java.lang.Short>(other.i16_list);
            this.i16_list = __this__i16_list;
        }
        if (other.isSetI64_list()) {
            java.util.List<java.lang.Long> __this__i64_list = new java.util.ArrayList<java.lang.Long>(other.i64_list);
            this.i64_list = __this__i64_list;
        }
    }

    @Override
    public OneOfEachBeansWithAnnotations deepCopy() {
        return new OneOfEachBeansWithAnnotations(this);
    }

    @Override
    public void clear() {
        setBoolean_fieldIsSet(false);
        this.boolean_field = false;
        setA_biteIsSet(false);
        this.a_bite = 0;
        setInteger16IsSet(false);
        this.integer16 = 0;
        setInteger32IsSet(false);
        this.integer32 = 0;
        setInteger64IsSet(false);
        this.integer64 = 0;
        setDouble_precisionIsSet(false);
        this.double_precision = 0.0;
        this.some_characters = null;
        this.base64 = null;
        this.byte_list = null;
        this.i16_list = null;
        this.i64_list = null;
    }

    public boolean isBoolean_field() {
        return this.boolean_field;
    }

    public OneOfEachBeansWithAnnotations setBoolean_field(boolean boolean_field) {
        this.boolean_field = boolean_field;
        setBoolean_fieldIsSet(true);
        return this;
    }

    public void unsetBoolean_field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOLEAN_FIELD_ISSET_ID);
    }

    /** Returns true if field boolean_field is set (has been assigned a value) and false otherwise */
    public boolean isSetBoolean_field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOLEAN_FIELD_ISSET_ID);
    }

    public void setBoolean_fieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOLEAN_FIELD_ISSET_ID, value);
    }

    public byte getA_bite() {
        return this.a_bite;
    }

    public OneOfEachBeansWithAnnotations setA_bite(byte a_bite) {
        this.a_bite = a_bite;
        setA_biteIsSet(true);
        return this;
    }

    public void unsetA_bite() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A_BITE_ISSET_ID);
    }

    /** Returns true if field a_bite is set (has been assigned a value) and false otherwise */
    public boolean isSetA_bite() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A_BITE_ISSET_ID);
    }

    public void setA_biteIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A_BITE_ISSET_ID, value);
    }

    public short getInteger16() {
        return this.integer16;
    }

    public OneOfEachBeansWithAnnotations setInteger16(short integer16) {
        this.integer16 = integer16;
        setInteger16IsSet(true);
        return this;
    }

    public void unsetInteger16() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEGER16_ISSET_ID);
    }

    /** Returns true if field integer16 is set (has been assigned a value) and false otherwise */
    public boolean isSetInteger16() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEGER16_ISSET_ID);
    }

    public void setInteger16IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEGER16_ISSET_ID, value);
    }

    public int getInteger32() {
        return this.integer32;
    }

    public OneOfEachBeansWithAnnotations setInteger32(int integer32) {
        this.integer32 = integer32;
        setInteger32IsSet(true);
        return this;
    }

    public void unsetInteger32() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEGER32_ISSET_ID);
    }

    /** Returns true if field integer32 is set (has been assigned a value) and false otherwise */
    public boolean isSetInteger32() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEGER32_ISSET_ID);
    }

    public void setInteger32IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEGER32_ISSET_ID, value);
    }

    public long getInteger64() {
        return this.integer64;
    }

    public OneOfEachBeansWithAnnotations setInteger64(long integer64) {
        this.integer64 = integer64;
        setInteger64IsSet(true);
        return this;
    }

    public void unsetInteger64() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEGER64_ISSET_ID);
    }

    /** Returns true if field integer64 is set (has been assigned a value) and false otherwise */
    public boolean isSetInteger64() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEGER64_ISSET_ID);
    }

    public void setInteger64IsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEGER64_ISSET_ID, value);
    }

    public double getDouble_precision() {
        return this.double_precision;
    }

    public OneOfEachBeansWithAnnotations setDouble_precision(double double_precision) {
        this.double_precision = double_precision;
        setDouble_precisionIsSet(true);
        return this;
    }

    public void unsetDouble_precision() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
    }

    /** Returns true if field double_precision is set (has been assigned a value) and false otherwise */
    public boolean isSetDouble_precision() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID);
    }

    public void setDouble_precisionIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOUBLE_PRECISION_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSome_characters() {
        return this.some_characters;
    }

    public OneOfEachBeansWithAnnotations setSome_characters(@org.apache.thrift.annotation.Nullable java.lang.String some_characters) {
        this.some_characters = some_characters;
        return this;
    }

    public void unsetSome_characters() {
        this.some_characters = null;
    }

    /** Returns true if field some_characters is set (has been assigned a value) and false otherwise */
    public boolean isSetSome_characters() {
        return this.some_characters != null;
    }

    public void setSome_charactersIsSet(boolean value) {
        if (!value) {
            this.some_characters = null;
        }
    }

    public byte[] getBase64() {
        setBase64(org.apache.thrift.TBaseHelper.rightSize(base64));
        return base64 == null ? null : base64.array();
    }

    public java.nio.ByteBuffer bufferForBase64() {
        return org.apache.thrift.TBaseHelper.copyBinary(base64);
    }

    public OneOfEachBeansWithAnnotations setBase64(byte[] base64) {
        this.base64 = base64 == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(base64.clone());
        return this;
    }

    public OneOfEachBeansWithAnnotations setBase64(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer base64) {
        this.base64 = org.apache.thrift.TBaseHelper.copyBinary(base64);
        return this;
    }

    public void unsetBase64() {
        this.base64 = null;
    }

    /** Returns true if field base64 is set (has been assigned a value) and false otherwise */
    public boolean isSetBase64() {
        return this.base64 != null;
    }

    public void setBase64IsSet(boolean value) {
        if (!value) {
            this.base64 = null;
        }
    }

    public int getByte_listSize() {
        return (this.byte_list == null) ? 0 : this.byte_list.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Byte> getByte_listIterator() {
        return (this.byte_list == null) ? null : this.byte_list.iterator();
    }

    public void addToByte_list(byte elem) {
        if (this.byte_list == null) {
            this.byte_list = new java.util.ArrayList<java.lang.Byte>();
        }
        this.byte_list.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Byte> getByte_list() {
        return this.byte_list;
    }

    public OneOfEachBeansWithAnnotations setByte_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> byte_list) {
        this.byte_list = byte_list;
        return this;
    }

    public void unsetByte_list() {
        this.byte_list = null;
    }

    /** Returns true if field byte_list is set (has been assigned a value) and false otherwise */
    public boolean isSetByte_list() {
        return this.byte_list != null;
    }

    public void setByte_listIsSet(boolean value) {
        if (!value) {
            this.byte_list = null;
        }
    }

    public int getI16_listSize() {
        return (this.i16_list == null) ? 0 : this.i16_list.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Short> getI16_listIterator() {
        return (this.i16_list == null) ? null : this.i16_list.iterator();
    }

    public void addToI16_list(short elem) {
        if (this.i16_list == null) {
            this.i16_list = new java.util.ArrayList<java.lang.Short>();
        }
        this.i16_list.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Short> getI16_list() {
        return this.i16_list;
    }

    public OneOfEachBeansWithAnnotations setI16_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> i16_list) {
        this.i16_list = i16_list;
        return this;
    }

    public void unsetI16_list() {
        this.i16_list = null;
    }

    /** Returns true if field i16_list is set (has been assigned a value) and false otherwise */
    public boolean isSetI16_list() {
        return this.i16_list != null;
    }

    public void setI16_listIsSet(boolean value) {
        if (!value) {
            this.i16_list = null;
        }
    }

    public int getI64_listSize() {
        return (this.i64_list == null) ? 0 : this.i64_list.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getI64_listIterator() {
        return (this.i64_list == null) ? null : this.i64_list.iterator();
    }

    public void addToI64_list(long elem) {
        if (this.i64_list == null) {
            this.i64_list = new java.util.ArrayList<java.lang.Long>();
        }
        this.i64_list.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getI64_list() {
        return this.i64_list;
    }

    public OneOfEachBeansWithAnnotations setI64_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> i64_list) {
        this.i64_list = i64_list;
        return this;
    }

    public void unsetI64_list() {
        this.i64_list = null;
    }

    /** Returns true if field i64_list is set (has been assigned a value) and false otherwise */
    public boolean isSetI64_list() {
        return this.i64_list != null;
    }

    public void setI64_listIsSet(boolean value) {
        if (!value) {
            this.i64_list = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case BOOLEAN_FIELD:
                if (value == null) {
                    unsetBoolean_field();
                } else {
                    setBoolean_field((java.lang.Boolean) value);
                }
                break;

            case A_BITE:
                if (value == null) {
                    unsetA_bite();
                } else {
                    setA_bite((java.lang.Byte) value);
                }
                break;

            case INTEGER16:
                if (value == null) {
                    unsetInteger16();
                } else {
                    setInteger16((java.lang.Short) value);
                }
                break;

            case INTEGER32:
                if (value == null) {
                    unsetInteger32();
                } else {
                    setInteger32((java.lang.Integer) value);
                }
                break;

            case INTEGER64:
                if (value == null) {
                    unsetInteger64();
                } else {
                    setInteger64((java.lang.Long) value);
                }
                break;

            case DOUBLE_PRECISION:
                if (value == null) {
                    unsetDouble_precision();
                } else {
                    setDouble_precision((java.lang.Double) value);
                }
                break;

            case SOME_CHARACTERS:
                if (value == null) {
                    unsetSome_characters();
                } else {
                    setSome_characters((java.lang.String) value);
                }
                break;

            case BASE64:
                if (value == null) {
                    unsetBase64();
                } else {
                    if (value instanceof byte[]) {
                        setBase64((byte[]) value);
                    } else {
                        setBase64((java.nio.ByteBuffer) value);
                    }
                }
                break;

            case BYTE_LIST:
                if (value == null) {
                    unsetByte_list();
                } else {
                    setByte_list((java.util.List<java.lang.Byte>) value);
                }
                break;

            case I16_LIST:
                if (value == null) {
                    unsetI16_list();
                } else {
                    setI16_list((java.util.List<java.lang.Short>) value);
                }
                break;

            case I64_LIST:
                if (value == null) {
                    unsetI64_list();
                } else {
                    setI64_list((java.util.List<java.lang.Long>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case BOOLEAN_FIELD:
                return isBoolean_field();

            case A_BITE:
                return getA_bite();

            case INTEGER16:
                return getInteger16();

            case INTEGER32:
                return getInteger32();

            case INTEGER64:
                return getInteger64();

            case DOUBLE_PRECISION:
                return getDouble_precision();

            case SOME_CHARACTERS:
                return getSome_characters();

            case BASE64:
                return getBase64();

            case BYTE_LIST:
                return getByte_list();

            case I16_LIST:
                return getI16_list();

            case I64_LIST:
                return getI64_list();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case BOOLEAN_FIELD:
                return isSetBoolean_field();
            case A_BITE:
                return isSetA_bite();
            case INTEGER16:
                return isSetInteger16();
            case INTEGER32:
                return isSetInteger32();
            case INTEGER64:
                return isSetInteger64();
            case DOUBLE_PRECISION:
                return isSetDouble_precision();
            case SOME_CHARACTERS:
                return isSetSome_characters();
            case BASE64:
                return isSetBase64();
            case BYTE_LIST:
                return isSetByte_list();
            case I16_LIST:
                return isSetI16_list();
            case I64_LIST:
                return isSetI64_list();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof OneOfEachBeansWithAnnotations)
            return this.equals((OneOfEachBeansWithAnnotations) that);
        return false;
    }

    public boolean equals(OneOfEachBeansWithAnnotations that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_boolean_field = true;
        boolean that_present_boolean_field = true;
        if (this_present_boolean_field || that_present_boolean_field) {
            if (!(this_present_boolean_field && that_present_boolean_field))
                return false;
            if (this.boolean_field != that.boolean_field)
                return false;
        }

        boolean this_present_a_bite = true;
        boolean that_present_a_bite = true;
        if (this_present_a_bite || that_present_a_bite) {
            if (!(this_present_a_bite && that_present_a_bite))
                return false;
            if (this.a_bite != that.a_bite)
                return false;
        }

        boolean this_present_integer16 = true;
        boolean that_present_integer16 = true;
        if (this_present_integer16 || that_present_integer16) {
            if (!(this_present_integer16 && that_present_integer16))
                return false;
            if (this.integer16 != that.integer16)
                return false;
        }

        boolean this_present_integer32 = true;
        boolean that_present_integer32 = true;
        if (this_present_integer32 || that_present_integer32) {
            if (!(this_present_integer32 && that_present_integer32))
                return false;
            if (this.integer32 != that.integer32)
                return false;
        }

        boolean this_present_integer64 = true;
        boolean that_present_integer64 = true;
        if (this_present_integer64 || that_present_integer64) {
            if (!(this_present_integer64 && that_present_integer64))
                return false;
            if (this.integer64 != that.integer64)
                return false;
        }

        boolean this_present_double_precision = true;
        boolean that_present_double_precision = true;
        if (this_present_double_precision || that_present_double_precision) {
            if (!(this_present_double_precision && that_present_double_precision))
                return false;
            if (this.double_precision != that.double_precision)
                return false;
        }

        boolean this_present_some_characters = true && this.isSetSome_characters();
        boolean that_present_some_characters = true && that.isSetSome_characters();
        if (this_present_some_characters || that_present_some_characters) {
            if (!(this_present_some_characters && that_present_some_characters))
                return false;
            if (!this.some_characters.equals(that.some_characters))
                return false;
        }

        boolean this_present_base64 = true && this.isSetBase64();
        boolean that_present_base64 = true && that.isSetBase64();
        if (this_present_base64 || that_present_base64) {
            if (!(this_present_base64 && that_present_base64))
                return false;
            if (!this.base64.equals(that.base64))
                return false;
        }

        boolean this_present_byte_list = true && this.isSetByte_list();
        boolean that_present_byte_list = true && that.isSetByte_list();
        if (this_present_byte_list || that_present_byte_list) {
            if (!(this_present_byte_list && that_present_byte_list))
                return false;
            if (!this.byte_list.equals(that.byte_list))
                return false;
        }

        boolean this_present_i16_list = true && this.isSetI16_list();
        boolean that_present_i16_list = true && that.isSetI16_list();
        if (this_present_i16_list || that_present_i16_list) {
            if (!(this_present_i16_list && that_present_i16_list))
                return false;
            if (!this.i16_list.equals(that.i16_list))
                return false;
        }

        boolean this_present_i64_list = true && this.isSetI64_list();
        boolean that_present_i64_list = true && that.isSetI64_list();
        if (this_present_i64_list || that_present_i64_list) {
            if (!(this_present_i64_list && that_present_i64_list))
                return false;
            if (!this.i64_list.equals(that.i64_list))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((boolean_field) ? 131071 : 524287);

        hashCode = hashCode * 8191 + (int) (a_bite);

        hashCode = hashCode * 8191 + integer16;

        hashCode = hashCode * 8191 + integer32;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(integer64);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(double_precision);

        hashCode = hashCode * 8191 + ((isSetSome_characters()) ? 131071 : 524287);
        if (isSetSome_characters())
            hashCode = hashCode * 8191 + some_characters.hashCode();

        hashCode = hashCode * 8191 + ((isSetBase64()) ? 131071 : 524287);
        if (isSetBase64())
            hashCode = hashCode * 8191 + base64.hashCode();

        hashCode = hashCode * 8191 + ((isSetByte_list()) ? 131071 : 524287);
        if (isSetByte_list())
            hashCode = hashCode * 8191 + byte_list.hashCode();

        hashCode = hashCode * 8191 + ((isSetI16_list()) ? 131071 : 524287);
        if (isSetI16_list())
            hashCode = hashCode * 8191 + i16_list.hashCode();

        hashCode = hashCode * 8191 + ((isSetI64_list()) ? 131071 : 524287);
        if (isSetI64_list())
            hashCode = hashCode * 8191 + i64_list.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(OneOfEachBeansWithAnnotations other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetBoolean_field(), other.isSetBoolean_field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBoolean_field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_field, other.boolean_field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetA_bite(), other.isSetA_bite());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetA_bite()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_bite, other.a_bite);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetInteger16(), other.isSetInteger16());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInteger16()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer16, other.integer16);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetInteger32(), other.isSetInteger32());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInteger32()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer32, other.integer32);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetInteger64(), other.isSetInteger64());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInteger64()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer64, other.integer64);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDouble_precision(), other.isSetDouble_precision());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDouble_precision()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_precision, other.double_precision);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSome_characters(), other.isSetSome_characters());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSome_characters()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.some_characters, other.some_characters);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBase64(), other.isSetBase64());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBase64()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base64, other.base64);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetByte_list(), other.isSetByte_list());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetByte_list()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_list, other.byte_list);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI16_list(), other.isSetI16_list());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI16_list()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_list, other.i16_list);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI64_list(), other.isSetI64_list());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI64_list()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_list, other.i64_list);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("OneOfEachBeansWithAnnotations(");
        boolean first = true;

        sb.append("boolean_field:");
        sb.append(this.boolean_field);
        first = false;
        if (!first) sb.append(", ");
        sb.append("a_bite:");
        sb.append(this.a_bite);
        first = false;
        if (!first) sb.append(", ");
        sb.append("integer16:");
        sb.append(this.integer16);
        first = false;
        if (!first) sb.append(", ");
        sb.append("integer32:");
        sb.append(this.integer32);
        first = false;
        if (!first) sb.append(", ");
        sb.append("integer64:");
        sb.append(this.integer64);
        first = false;
        if (!first) sb.append(", ");
        sb.append("double_precision:");
        sb.append(this.double_precision);
        first = false;
        if (!first) sb.append(", ");
        sb.append("some_characters:");
        if (this.some_characters == null) {
            sb.append("null");
        } else {
            sb.append(this.some_characters);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("base64:");
        if (this.base64 == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.base64, sb);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("byte_list:");
        if (this.byte_list == null) {
            sb.append("null");
        } else {
            sb.append(this.byte_list);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("i16_list:");
        if (this.i16_list == null) {
            sb.append("null");
        } else {
            sb.append(this.i16_list);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("i64_list:");
        if (this.i64_list == null) {
            sb.append("null");
        } else {
            sb.append(this.i64_list);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class OneOfEachBeansWithAnnotationsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public OneOfEachBeansWithAnnotationsStandardScheme getScheme() {
            return new OneOfEachBeansWithAnnotationsStandardScheme();
        }
    }

    private static class OneOfEachBeansWithAnnotationsStandardScheme extends org.apache.thrift.scheme.StandardScheme<OneOfEachBeansWithAnnotations> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, OneOfEachBeansWithAnnotations struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BOOLEAN_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.boolean_field = iprot.readBool();
                            struct.setBoolean_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // A_BITE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.a_bite = iprot.readByte();
                            struct.setA_biteIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // INTEGER16
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.integer16 = iprot.readI16();
                            struct.setInteger16IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // INTEGER32
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.integer32 = iprot.readI32();
                            struct.setInteger32IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INTEGER64
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.integer64 = iprot.readI64();
                            struct.setInteger64IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // DOUBLE_PRECISION
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.double_precision = iprot.readDouble();
                            struct.setDouble_precisionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // SOME_CHARACTERS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.some_characters = iprot.readString();
                            struct.setSome_charactersIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // BASE64
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.base64 = iprot.readBinary();
                            struct.setBase64IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // BYTE_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.byte_list = new java.util.ArrayList<java.lang.Byte>(_list0.size);
                                byte _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readByte();
                                    struct.byte_list.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setByte_listIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // I16_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                                struct.i16_list = new java.util.ArrayList<java.lang.Short>(_list3.size);
                                short _elem4;
                                for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                    _elem4 = iprot.readI16();
                                    struct.i16_list.add(_elem4);
                                }
                                iprot.readListEnd();
                            }
                            struct.setI16_listIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // I64_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                                struct.i64_list = new java.util.ArrayList<java.lang.Long>(_list6.size);
                                long _elem7;
                                for (int _i8 = 0; _i8 < _list6.size; ++_i8) {
                                    _elem7 = iprot.readI64();
                                    struct.i64_list.add(_elem7);
                                }
                                iprot.readListEnd();
                            }
                            struct.setI64_listIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, OneOfEachBeansWithAnnotations struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(BOOLEAN_FIELD_FIELD_DESC);
            oprot.writeBool(struct.boolean_field);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(A_BITE_FIELD_DESC);
            oprot.writeByte(struct.a_bite);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTEGER16_FIELD_DESC);
            oprot.writeI16(struct.integer16);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTEGER32_FIELD_DESC);
            oprot.writeI32(struct.integer32);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTEGER64_FIELD_DESC);
            oprot.writeI64(struct.integer64);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(DOUBLE_PRECISION_FIELD_DESC);
            oprot.writeDouble(struct.double_precision);
            oprot.writeFieldEnd();
            if (struct.some_characters != null) {
                oprot.writeFieldBegin(SOME_CHARACTERS_FIELD_DESC);
                oprot.writeString(struct.some_characters);
                oprot.writeFieldEnd();
            }
            if (struct.base64 != null) {
                oprot.writeFieldBegin(BASE64_FIELD_DESC);
                oprot.writeBinary(struct.base64);
                oprot.writeFieldEnd();
            }
            if (struct.byte_list != null) {
                oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byte_list.size()));
                    for (byte _iter9 : struct.byte_list) {
                        oprot.writeByte(_iter9);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.i16_list != null) {
                oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.i16_list.size()));
                    for (short _iter10 : struct.i16_list) {
                        oprot.writeI16(_iter10);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.i64_list != null) {
                oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64_list.size()));
                    for (long _iter11 : struct.i64_list) {
                        oprot.writeI64(_iter11);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class OneOfEachBeansWithAnnotationsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public OneOfEachBeansWithAnnotationsTupleScheme getScheme() {
            return new OneOfEachBeansWithAnnotationsTupleScheme();
        }
    }

    private static class OneOfEachBeansWithAnnotationsTupleScheme extends org.apache.thrift.scheme.TupleScheme<OneOfEachBeansWithAnnotations> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, OneOfEachBeansWithAnnotations struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetBoolean_field()) {
                optionals.set(0);
            }
            if (struct.isSetA_bite()) {
                optionals.set(1);
            }
            if (struct.isSetInteger16()) {
                optionals.set(2);
            }
            if (struct.isSetInteger32()) {
                optionals.set(3);
            }
            if (struct.isSetInteger64()) {
                optionals.set(4);
            }
            if (struct.isSetDouble_precision()) {
                optionals.set(5);
            }
            if (struct.isSetSome_characters()) {
                optionals.set(6);
            }
            if (struct.isSetBase64()) {
                optionals.set(7);
            }
            if (struct.isSetByte_list()) {
                optionals.set(8);
            }
            if (struct.isSetI16_list()) {
                optionals.set(9);
            }
            if (struct.isSetI64_list()) {
                optionals.set(10);
            }
            oprot.writeBitSet(optionals, 11);
            if (struct.isSetBoolean_field()) {
                oprot.writeBool(struct.boolean_field);
            }
            if (struct.isSetA_bite()) {
                oprot.writeByte(struct.a_bite);
            }
            if (struct.isSetInteger16()) {
                oprot.writeI16(struct.integer16);
            }
            if (struct.isSetInteger32()) {
                oprot.writeI32(struct.integer32);
            }
            if (struct.isSetInteger64()) {
                oprot.writeI64(struct.integer64);
            }
            if (struct.isSetDouble_precision()) {
                oprot.writeDouble(struct.double_precision);
            }
            if (struct.isSetSome_characters()) {
                oprot.writeString(struct.some_characters);
            }
            if (struct.isSetBase64()) {
                oprot.writeBinary(struct.base64);
            }
            if (struct.isSetByte_list()) {
                {
                    oprot.writeI32(struct.byte_list.size());
                    for (byte _iter12 : struct.byte_list) {
                        oprot.writeByte(_iter12);
                    }
                }
            }
            if (struct.isSetI16_list()) {
                {
                    oprot.writeI32(struct.i16_list.size());
                    for (short _iter13 : struct.i16_list) {
                        oprot.writeI16(_iter13);
                    }
                }
            }
            if (struct.isSetI64_list()) {
                {
                    oprot.writeI32(struct.i64_list.size());
                    for (long _iter14 : struct.i64_list) {
                        oprot.writeI64(_iter14);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, OneOfEachBeansWithAnnotations struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(11);
            if (incoming.get(0)) {
                struct.boolean_field = iprot.readBool();
                struct.setBoolean_fieldIsSet(true);
            }
            if (incoming.get(1)) {
                struct.a_bite = iprot.readByte();
                struct.setA_biteIsSet(true);
            }
            if (incoming.get(2)) {
                struct.integer16 = iprot.readI16();
                struct.setInteger16IsSet(true);
            }
            if (incoming.get(3)) {
                struct.integer32 = iprot.readI32();
                struct.setInteger32IsSet(true);
            }
            if (incoming.get(4)) {
                struct.integer64 = iprot.readI64();
                struct.setInteger64IsSet(true);
            }
            if (incoming.get(5)) {
                struct.double_precision = iprot.readDouble();
                struct.setDouble_precisionIsSet(true);
            }
            if (incoming.get(6)) {
                struct.some_characters = iprot.readString();
                struct.setSome_charactersIsSet(true);
            }
            if (incoming.get(7)) {
                struct.base64 = iprot.readBinary();
                struct.setBase64IsSet(true);
            }
            if (incoming.get(8)) {
                {
                    org.apache.thrift.protocol.TList _list15 = iprot.readListBegin(org.apache.thrift.protocol.TType.BYTE);
                    struct.byte_list = new java.util.ArrayList<java.lang.Byte>(_list15.size);
                    byte _elem16;
                    for (int _i17 = 0; _i17 < _list15.size; ++_i17) {
                        _elem16 = iprot.readByte();
                        struct.byte_list.add(_elem16);
                    }
                }
                struct.setByte_listIsSet(true);
            }
            if (incoming.get(9)) {
                {
                    org.apache.thrift.protocol.TList _list18 = iprot.readListBegin(org.apache.thrift.protocol.TType.I16);
                    struct.i16_list = new java.util.ArrayList<java.lang.Short>(_list18.size);
                    short _elem19;
                    for (int _i20 = 0; _i20 < _list18.size; ++_i20) {
                        _elem19 = iprot.readI16();
                        struct.i16_list.add(_elem19);
                    }
                }
                struct.setI16_listIsSet(true);
            }
            if (incoming.get(10)) {
                {
                    org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
                    struct.i64_list = new java.util.ArrayList<java.lang.Long>(_list21.size);
                    long _elem22;
                    for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
                        _elem22 = iprot.readI64();
                        struct.i64_list.add(_elem22);
                    }
                }
                struct.setI64_listIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

