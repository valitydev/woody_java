/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Object implements org.apache.thrift.TBase<Object, Object._Fields>, java.io.Serializable, Cloneable, Comparable<Object> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Object");

    private static final org.apache.thrift.protocol.TField INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("integer", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
    private static final org.apache.thrift.protocol.TField BOOLEAN_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_field", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
    private static final org.apache.thrift.protocol.TField DBL_FIELD_DESC = new org.apache.thrift.protocol.TField("dbl", org.apache.thrift.protocol.TType.STRUCT, (short) 4);
    private static final org.apache.thrift.protocol.TField BITE_FIELD_DESC = new org.apache.thrift.protocol.TField("bite", org.apache.thrift.protocol.TType.STRUCT, (short) 5);
    private static final org.apache.thrift.protocol.TField INTMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intmap", org.apache.thrift.protocol.TType.MAP, (short) 6);
    private static final org.apache.thrift.protocol.TField SOMEMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("somemap", org.apache.thrift.protocol.TType.STRUCT, (short) 7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ObjectStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ObjectTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Integer integer; // required
    public @org.apache.thrift.annotation.Nullable String str; // required
    public @org.apache.thrift.annotation.Nullable Boolean boolean_field; // required
    public @org.apache.thrift.annotation.Nullable Double dbl; // required
    public @org.apache.thrift.annotation.Nullable Byte bite; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, Integer> intmap; // required
    public @org.apache.thrift.annotation.Nullable Map somemap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        INTEGER((short) 1, "integer"),
        STR((short) 2, "str"),
        BOOLEAN_FIELD((short) 3, "boolean_field"),
        DBL((short) 4, "dbl"),
        BITE((short) 5, "bite"),
        INTMAP((short) 6, "intmap"),
        SOMEMAP((short) 7, "somemap");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // INTEGER
                    return INTEGER;
                case 2: // STR
                    return STR;
                case 3: // BOOLEAN_FIELD
                    return BOOLEAN_FIELD;
                case 4: // DBL
                    return DBL;
                case 5: // BITE
                    return BITE;
                case 6: // INTMAP
                    return INTMAP;
                case 7: // SOMEMAP
                    return SOMEMAP;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.INTEGER, new org.apache.thrift.meta_data.FieldMetaData("integer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Integer.class)));
        tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, String.class)));
        tmpMap.put(_Fields.BOOLEAN_FIELD, new org.apache.thrift.meta_data.FieldMetaData("boolean_field", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Boolean.class)));
        tmpMap.put(_Fields.DBL, new org.apache.thrift.meta_data.FieldMetaData("dbl", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Double.class)));
        tmpMap.put(_Fields.BITE, new org.apache.thrift.meta_data.FieldMetaData("bite", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Byte.class)));
        tmpMap.put(_Fields.INTMAP, new org.apache.thrift.meta_data.FieldMetaData("intmap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Integer.class))));
        tmpMap.put(_Fields.SOMEMAP, new org.apache.thrift.meta_data.FieldMetaData("somemap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Map.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Object.class, metaDataMap);
    }

    public Object() {
    }

    public Object(
            Integer integer,
            String str,
            Boolean boolean_field,
            Double dbl,
            Byte bite,
            java.util.Map<java.lang.Integer, Integer> intmap,
            Map somemap) {
        this();
        this.integer = integer;
        this.str = str;
        this.boolean_field = boolean_field;
        this.dbl = dbl;
        this.bite = bite;
        this.intmap = intmap;
        this.somemap = somemap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Object(Object other) {
        if (other.isSetInteger()) {
            this.integer = new Integer(other.integer);
        }
        if (other.isSetStr()) {
            this.str = new String(other.str);
        }
        if (other.isSetBoolean_field()) {
            this.boolean_field = new Boolean(other.boolean_field);
        }
        if (other.isSetDbl()) {
            this.dbl = new Double(other.dbl);
        }
        if (other.isSetBite()) {
            this.bite = new Byte(other.bite);
        }
        if (other.isSetIntmap()) {
            java.util.Map<java.lang.Integer, Integer> __this__intmap = new java.util.HashMap<java.lang.Integer, Integer>(other.intmap.size());
            for (java.util.Map.Entry<java.lang.Integer, Integer> other_element : other.intmap.entrySet()) {

                java.lang.Integer other_element_key = other_element.getKey();
                Integer other_element_value = other_element.getValue();

                java.lang.Integer __this__intmap_copy_key = other_element_key;

                Integer __this__intmap_copy_value = new Integer(other_element_value);

                __this__intmap.put(__this__intmap_copy_key, __this__intmap_copy_value);
            }
            this.intmap = __this__intmap;
        }
        if (other.isSetSomemap()) {
            this.somemap = new Map(other.somemap);
        }
    }

    @Override
    public Object deepCopy() {
        return new Object(this);
    }

    @Override
    public void clear() {
        this.integer = null;
        this.str = null;
        this.boolean_field = null;
        this.dbl = null;
        this.bite = null;
        this.intmap = null;
        this.somemap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Integer getInteger() {
        return this.integer;
    }

    public Object setInteger(@org.apache.thrift.annotation.Nullable Integer integer) {
        this.integer = integer;
        return this;
    }

    public void unsetInteger() {
        this.integer = null;
    }

    /** Returns true if field integer is set (has been assigned a value) and false otherwise */
    public boolean isSetInteger() {
        return this.integer != null;
    }

    public void setIntegerIsSet(boolean value) {
        if (!value) {
            this.integer = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public String getStr() {
        return this.str;
    }

    public Object setStr(@org.apache.thrift.annotation.Nullable String str) {
        this.str = str;
        return this;
    }

    public void unsetStr() {
        this.str = null;
    }

    /** Returns true if field str is set (has been assigned a value) and false otherwise */
    public boolean isSetStr() {
        return this.str != null;
    }

    public void setStrIsSet(boolean value) {
        if (!value) {
            this.str = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public Boolean getBoolean_field() {
        return this.boolean_field;
    }

    public Object setBoolean_field(@org.apache.thrift.annotation.Nullable Boolean boolean_field) {
        this.boolean_field = boolean_field;
        return this;
    }

    public void unsetBoolean_field() {
        this.boolean_field = null;
    }

    /** Returns true if field boolean_field is set (has been assigned a value) and false otherwise */
    public boolean isSetBoolean_field() {
        return this.boolean_field != null;
    }

    public void setBoolean_fieldIsSet(boolean value) {
        if (!value) {
            this.boolean_field = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public Double getDbl() {
        return this.dbl;
    }

    public Object setDbl(@org.apache.thrift.annotation.Nullable Double dbl) {
        this.dbl = dbl;
        return this;
    }

    public void unsetDbl() {
        this.dbl = null;
    }

    /** Returns true if field dbl is set (has been assigned a value) and false otherwise */
    public boolean isSetDbl() {
        return this.dbl != null;
    }

    public void setDblIsSet(boolean value) {
        if (!value) {
            this.dbl = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public Byte getBite() {
        return this.bite;
    }

    public Object setBite(@org.apache.thrift.annotation.Nullable Byte bite) {
        this.bite = bite;
        return this;
    }

    public void unsetBite() {
        this.bite = null;
    }

    /** Returns true if field bite is set (has been assigned a value) and false otherwise */
    public boolean isSetBite() {
        return this.bite != null;
    }

    public void setBiteIsSet(boolean value) {
        if (!value) {
            this.bite = null;
        }
    }

    public int getIntmapSize() {
        return (this.intmap == null) ? 0 : this.intmap.size();
    }

    public void putToIntmap(int key, Integer val) {
        if (this.intmap == null) {
            this.intmap = new java.util.HashMap<java.lang.Integer, Integer>();
        }
        this.intmap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, Integer> getIntmap() {
        return this.intmap;
    }

    public Object setIntmap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, Integer> intmap) {
        this.intmap = intmap;
        return this;
    }

    public void unsetIntmap() {
        this.intmap = null;
    }

    /** Returns true if field intmap is set (has been assigned a value) and false otherwise */
    public boolean isSetIntmap() {
        return this.intmap != null;
    }

    public void setIntmapIsSet(boolean value) {
        if (!value) {
            this.intmap = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public Map getSomemap() {
        return this.somemap;
    }

    public Object setSomemap(@org.apache.thrift.annotation.Nullable Map somemap) {
        this.somemap = somemap;
        return this;
    }

    public void unsetSomemap() {
        this.somemap = null;
    }

    /** Returns true if field somemap is set (has been assigned a value) and false otherwise */
    public boolean isSetSomemap() {
        return this.somemap != null;
    }

    public void setSomemapIsSet(boolean value) {
        if (!value) {
            this.somemap = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case INTEGER:
                if (value == null) {
                    unsetInteger();
                } else {
                    setInteger((Integer) value);
                }
                break;

            case STR:
                if (value == null) {
                    unsetStr();
                } else {
                    setStr((String) value);
                }
                break;

            case BOOLEAN_FIELD:
                if (value == null) {
                    unsetBoolean_field();
                } else {
                    setBoolean_field((Boolean) value);
                }
                break;

            case DBL:
                if (value == null) {
                    unsetDbl();
                } else {
                    setDbl((Double) value);
                }
                break;

            case BITE:
                if (value == null) {
                    unsetBite();
                } else {
                    setBite((Byte) value);
                }
                break;

            case INTMAP:
                if (value == null) {
                    unsetIntmap();
                } else {
                    setIntmap((java.util.Map<java.lang.Integer, Integer>) value);
                }
                break;

            case SOMEMAP:
                if (value == null) {
                    unsetSomemap();
                } else {
                    setSomemap((Map) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case INTEGER:
                return getInteger();

            case STR:
                return getStr();

            case BOOLEAN_FIELD:
                return getBoolean_field();

            case DBL:
                return getDbl();

            case BITE:
                return getBite();

            case INTMAP:
                return getIntmap();

            case SOMEMAP:
                return getSomemap();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case INTEGER:
                return isSetInteger();
            case STR:
                return isSetStr();
            case BOOLEAN_FIELD:
                return isSetBoolean_field();
            case DBL:
                return isSetDbl();
            case BITE:
                return isSetBite();
            case INTMAP:
                return isSetIntmap();
            case SOMEMAP:
                return isSetSomemap();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof Object)
            return this.equals((Object) that);
        return false;
    }

    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_integer = true && this.isSetInteger();
        boolean that_present_integer = true && that.isSetInteger();
        if (this_present_integer || that_present_integer) {
            if (!(this_present_integer && that_present_integer))
                return false;
            if (!this.integer.equals(that.integer))
                return false;
        }

        boolean this_present_str = true && this.isSetStr();
        boolean that_present_str = true && that.isSetStr();
        if (this_present_str || that_present_str) {
            if (!(this_present_str && that_present_str))
                return false;
            if (!this.str.equals(that.str))
                return false;
        }

        boolean this_present_boolean_field = true && this.isSetBoolean_field();
        boolean that_present_boolean_field = true && that.isSetBoolean_field();
        if (this_present_boolean_field || that_present_boolean_field) {
            if (!(this_present_boolean_field && that_present_boolean_field))
                return false;
            if (!this.boolean_field.equals(that.boolean_field))
                return false;
        }

        boolean this_present_dbl = true && this.isSetDbl();
        boolean that_present_dbl = true && that.isSetDbl();
        if (this_present_dbl || that_present_dbl) {
            if (!(this_present_dbl && that_present_dbl))
                return false;
            if (!this.dbl.equals(that.dbl))
                return false;
        }

        boolean this_present_bite = true && this.isSetBite();
        boolean that_present_bite = true && that.isSetBite();
        if (this_present_bite || that_present_bite) {
            if (!(this_present_bite && that_present_bite))
                return false;
            if (!this.bite.equals(that.bite))
                return false;
        }

        boolean this_present_intmap = true && this.isSetIntmap();
        boolean that_present_intmap = true && that.isSetIntmap();
        if (this_present_intmap || that_present_intmap) {
            if (!(this_present_intmap && that_present_intmap))
                return false;
            if (!this.intmap.equals(that.intmap))
                return false;
        }

        boolean this_present_somemap = true && this.isSetSomemap();
        boolean that_present_somemap = true && that.isSetSomemap();
        if (this_present_somemap || that_present_somemap) {
            if (!(this_present_somemap && that_present_somemap))
                return false;
            if (!this.somemap.equals(that.somemap))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetInteger()) ? 131071 : 524287);
        if (isSetInteger())
            hashCode = hashCode * 8191 + integer.hashCode();

        hashCode = hashCode * 8191 + ((isSetStr()) ? 131071 : 524287);
        if (isSetStr())
            hashCode = hashCode * 8191 + str.hashCode();

        hashCode = hashCode * 8191 + ((isSetBoolean_field()) ? 131071 : 524287);
        if (isSetBoolean_field())
            hashCode = hashCode * 8191 + boolean_field.hashCode();

        hashCode = hashCode * 8191 + ((isSetDbl()) ? 131071 : 524287);
        if (isSetDbl())
            hashCode = hashCode * 8191 + dbl.hashCode();

        hashCode = hashCode * 8191 + ((isSetBite()) ? 131071 : 524287);
        if (isSetBite())
            hashCode = hashCode * 8191 + bite.hashCode();

        hashCode = hashCode * 8191 + ((isSetIntmap()) ? 131071 : 524287);
        if (isSetIntmap())
            hashCode = hashCode * 8191 + intmap.hashCode();

        hashCode = hashCode * 8191 + ((isSetSomemap()) ? 131071 : 524287);
        if (isSetSomemap())
            hashCode = hashCode * 8191 + somemap.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Object other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetInteger(), other.isSetInteger());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInteger()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer, other.integer);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStr(), other.isSetStr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBoolean_field(), other.isSetBoolean_field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBoolean_field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_field, other.boolean_field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDbl(), other.isSetDbl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDbl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbl, other.dbl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBite(), other.isSetBite());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBite()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bite, other.bite);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetIntmap(), other.isSetIntmap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIntmap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intmap, other.intmap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSomemap(), other.isSetSomemap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSomemap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.somemap, other.somemap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Object(");
        boolean first = true;

        sb.append("integer:");
        if (this.integer == null) {
            sb.append("null");
        } else {
            sb.append(this.integer);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("str:");
        if (this.str == null) {
            sb.append("null");
        } else {
            sb.append(this.str);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("boolean_field:");
        if (this.boolean_field == null) {
            sb.append("null");
        } else {
            sb.append(this.boolean_field);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("dbl:");
        if (this.dbl == null) {
            sb.append("null");
        } else {
            sb.append(this.dbl);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("bite:");
        if (this.bite == null) {
            sb.append("null");
        } else {
            sb.append(this.bite);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("intmap:");
        if (this.intmap == null) {
            sb.append("null");
        } else {
            sb.append(this.intmap);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("somemap:");
        if (this.somemap == null) {
            sb.append("null");
        } else {
            sb.append(this.somemap);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (integer != null) {
            integer.validate();
        }
        if (str != null) {
            str.validate();
        }
        if (boolean_field != null) {
            boolean_field.validate();
        }
        if (dbl != null) {
            dbl.validate();
        }
        if (bite != null) {
            bite.validate();
        }
        if (somemap != null) {
            somemap.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public ObjectStandardScheme getScheme() {
            return new ObjectStandardScheme();
        }
    }

    private static class ObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<Object> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Object struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // INTEGER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.integer = new Integer();
                            struct.integer.read(iprot);
                            struct.setIntegerIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // STR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.str = new String();
                            struct.str.read(iprot);
                            struct.setStrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // BOOLEAN_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.boolean_field = new Boolean();
                            struct.boolean_field.read(iprot);
                            struct.setBoolean_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // DBL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.dbl = new Double();
                            struct.dbl.read(iprot);
                            struct.setDblIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // BITE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.bite = new Byte();
                            struct.bite.read(iprot);
                            struct.setBiteIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // INTMAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                                struct.intmap = new java.util.HashMap<java.lang.Integer, Integer>(2 * _map56.size);
                                int _key57;
                                @org.apache.thrift.annotation.Nullable Integer _val58;
                                for (int _i59 = 0; _i59 < _map56.size; ++_i59) {
                                    _key57 = iprot.readI32();
                                    _val58 = new Integer();
                                    _val58.read(iprot);
                                    struct.intmap.put(_key57, _val58);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setIntmapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // SOMEMAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.somemap = new Map();
                            struct.somemap.read(iprot);
                            struct.setSomemapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Object struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.integer != null) {
                oprot.writeFieldBegin(INTEGER_FIELD_DESC);
                struct.integer.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.str != null) {
                oprot.writeFieldBegin(STR_FIELD_DESC);
                struct.str.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.boolean_field != null) {
                oprot.writeFieldBegin(BOOLEAN_FIELD_FIELD_DESC);
                struct.boolean_field.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.dbl != null) {
                oprot.writeFieldBegin(DBL_FIELD_DESC);
                struct.dbl.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.bite != null) {
                oprot.writeFieldBegin(BITE_FIELD_DESC);
                struct.bite.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.intmap != null) {
                oprot.writeFieldBegin(INTMAP_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.intmap.size()));
                    for (java.util.Map.Entry<java.lang.Integer, Integer> _iter60 : struct.intmap.entrySet()) {
                        oprot.writeI32(_iter60.getKey());
                        _iter60.getValue().write(oprot);
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.somemap != null) {
                oprot.writeFieldBegin(SOMEMAP_FIELD_DESC);
                struct.somemap.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public ObjectTupleScheme getScheme() {
            return new ObjectTupleScheme();
        }
    }

    private static class ObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<Object> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Object struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetInteger()) {
                optionals.set(0);
            }
            if (struct.isSetStr()) {
                optionals.set(1);
            }
            if (struct.isSetBoolean_field()) {
                optionals.set(2);
            }
            if (struct.isSetDbl()) {
                optionals.set(3);
            }
            if (struct.isSetBite()) {
                optionals.set(4);
            }
            if (struct.isSetIntmap()) {
                optionals.set(5);
            }
            if (struct.isSetSomemap()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetInteger()) {
                struct.integer.write(oprot);
            }
            if (struct.isSetStr()) {
                struct.str.write(oprot);
            }
            if (struct.isSetBoolean_field()) {
                struct.boolean_field.write(oprot);
            }
            if (struct.isSetDbl()) {
                struct.dbl.write(oprot);
            }
            if (struct.isSetBite()) {
                struct.bite.write(oprot);
            }
            if (struct.isSetIntmap()) {
                {
                    oprot.writeI32(struct.intmap.size());
                    for (java.util.Map.Entry<java.lang.Integer, Integer> _iter61 : struct.intmap.entrySet()) {
                        oprot.writeI32(_iter61.getKey());
                        _iter61.getValue().write(oprot);
                    }
                }
            }
            if (struct.isSetSomemap()) {
                struct.somemap.write(oprot);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Object struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.integer = new Integer();
                struct.integer.read(iprot);
                struct.setIntegerIsSet(true);
            }
            if (incoming.get(1)) {
                struct.str = new String();
                struct.str.read(iprot);
                struct.setStrIsSet(true);
            }
            if (incoming.get(2)) {
                struct.boolean_field = new Boolean();
                struct.boolean_field.read(iprot);
                struct.setBoolean_fieldIsSet(true);
            }
            if (incoming.get(3)) {
                struct.dbl = new Double();
                struct.dbl.read(iprot);
                struct.setDblIsSet(true);
            }
            if (incoming.get(4)) {
                struct.bite = new Byte();
                struct.bite.read(iprot);
                struct.setBiteIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT);
                    struct.intmap = new java.util.HashMap<java.lang.Integer, Integer>(2 * _map62.size);
                    int _key63;
                    @org.apache.thrift.annotation.Nullable Integer _val64;
                    for (int _i65 = 0; _i65 < _map62.size; ++_i65) {
                        _key63 = iprot.readI32();
                        _val64 = new Integer();
                        _val64.read(iprot);
                        struct.intmap.put(_key63, _val64);
                    }
                }
                struct.setIntmapIsSet(true);
            }
            if (incoming.get(6)) {
                struct.somemap = new Map();
                struct.somemap.read(iprot);
                struct.setSomemapIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

