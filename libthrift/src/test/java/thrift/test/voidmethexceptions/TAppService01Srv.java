/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test.voidmethexceptions;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TAppService01Srv {

    public interface Iface {

        public java.lang.String returnString(java.lang.String msg, boolean throwException) throws TExampleException, org.apache.thrift.TException;

        public void returnVoidThrows(java.lang.String msg, boolean throwException) throws TExampleException, org.apache.thrift.TException;

        public void returnVoidNoThrowsRuntimeException(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException;

        public void returnVoidNoThrowsTApplicationException(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException;

        public void onewayVoidNoThrows(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void returnString(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void returnVoidThrows(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void returnVoidNoThrowsRuntimeException(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void returnVoidNoThrowsTApplicationException(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void onewayVoidNoThrows(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        @Override
        public java.lang.String returnString(java.lang.String msg, boolean throwException) throws TExampleException, org.apache.thrift.TException {
            send_returnString(msg, throwException);
            return recv_returnString();
        }

        public void send_returnString(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            returnString_args args = new returnString_args();
            args.setMsg(msg);
            args.setThrowException(throwException);
            sendBase("returnString", args);
        }

        public java.lang.String recv_returnString() throws TExampleException, org.apache.thrift.TException {
            returnString_result result = new returnString_result();
            receiveBase(result, "returnString");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.error != null) {
                throw result.error;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnString failed: unknown result");
        }

        @Override
        public void returnVoidThrows(java.lang.String msg, boolean throwException) throws TExampleException, org.apache.thrift.TException {
            send_returnVoidThrows(msg, throwException);
            recv_returnVoidThrows();
        }

        public void send_returnVoidThrows(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            returnVoidThrows_args args = new returnVoidThrows_args();
            args.setMsg(msg);
            args.setThrowException(throwException);
            sendBase("returnVoidThrows", args);
        }

        public void recv_returnVoidThrows() throws TExampleException, org.apache.thrift.TException {
            returnVoidThrows_result result = new returnVoidThrows_result();
            receiveBase(result, "returnVoidThrows");
            if (result.error != null) {
                throw result.error;
            }
            return;
        }

        @Override
        public void returnVoidNoThrowsRuntimeException(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            send_returnVoidNoThrowsRuntimeException(msg, throwException);
            recv_returnVoidNoThrowsRuntimeException();
        }

        public void send_returnVoidNoThrowsRuntimeException(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            returnVoidNoThrowsRuntimeException_args args = new returnVoidNoThrowsRuntimeException_args();
            args.setMsg(msg);
            args.setThrowException(throwException);
            sendBase("returnVoidNoThrowsRuntimeException", args);
        }

        public void recv_returnVoidNoThrowsRuntimeException() throws org.apache.thrift.TException {
            returnVoidNoThrowsRuntimeException_result result = new returnVoidNoThrowsRuntimeException_result();
            receiveBase(result, "returnVoidNoThrowsRuntimeException");
            return;
        }

        @Override
        public void returnVoidNoThrowsTApplicationException(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            send_returnVoidNoThrowsTApplicationException(msg, throwException);
            recv_returnVoidNoThrowsTApplicationException();
        }

        public void send_returnVoidNoThrowsTApplicationException(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            returnVoidNoThrowsTApplicationException_args args = new returnVoidNoThrowsTApplicationException_args();
            args.setMsg(msg);
            args.setThrowException(throwException);
            sendBase("returnVoidNoThrowsTApplicationException", args);
        }

        public void recv_returnVoidNoThrowsTApplicationException() throws org.apache.thrift.TException {
            returnVoidNoThrowsTApplicationException_result result = new returnVoidNoThrowsTApplicationException_result();
            receiveBase(result, "returnVoidNoThrowsTApplicationException");
            return;
        }

        @Override
        public void onewayVoidNoThrows(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            send_onewayVoidNoThrows(msg, throwException);
        }

        public void send_onewayVoidNoThrows(java.lang.String msg, boolean throwException) throws org.apache.thrift.TException {
            onewayVoidNoThrows_args args = new onewayVoidNoThrows_args();
            args.setMsg(msg);
            args.setThrowException(throwException);
            sendBaseOneway("onewayVoidNoThrows", args);
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            @Override
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        @Override
        public void returnString(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            returnString_call method_call = new returnString_call(msg, throwException, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class returnString_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String msg;
            private boolean throwException;

            public returnString_call(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.msg = msg;
                this.throwException = throwException;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnString", org.apache.thrift.protocol.TMessageType.CALL, 0));
                returnString_args args = new returnString_args();
                args.setMsg(msg);
                args.setThrowException(throwException);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public java.lang.String getResult() throws TExampleException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_returnString();
            }
        }

        @Override
        public void returnVoidThrows(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            returnVoidThrows_call method_call = new returnVoidThrows_call(msg, throwException, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class returnVoidThrows_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String msg;
            private boolean throwException;

            public returnVoidThrows_call(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.msg = msg;
                this.throwException = throwException;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnVoidThrows", org.apache.thrift.protocol.TMessageType.CALL, 0));
                returnVoidThrows_args args = new returnVoidThrows_args();
                args.setMsg(msg);
                args.setThrowException(throwException);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws TExampleException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_returnVoidThrows();
                return null;
            }
        }

        @Override
        public void returnVoidNoThrowsRuntimeException(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            returnVoidNoThrowsRuntimeException_call method_call = new returnVoidNoThrowsRuntimeException_call(msg, throwException, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class returnVoidNoThrowsRuntimeException_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String msg;
            private boolean throwException;

            public returnVoidNoThrowsRuntimeException_call(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.msg = msg;
                this.throwException = throwException;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnVoidNoThrowsRuntimeException", org.apache.thrift.protocol.TMessageType.CALL, 0));
                returnVoidNoThrowsRuntimeException_args args = new returnVoidNoThrowsRuntimeException_args();
                args.setMsg(msg);
                args.setThrowException(throwException);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_returnVoidNoThrowsRuntimeException();
                return null;
            }
        }

        @Override
        public void returnVoidNoThrowsTApplicationException(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            returnVoidNoThrowsTApplicationException_call method_call = new returnVoidNoThrowsTApplicationException_call(msg, throwException, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class returnVoidNoThrowsTApplicationException_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String msg;
            private boolean throwException;

            public returnVoidNoThrowsTApplicationException_call(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.msg = msg;
                this.throwException = throwException;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnVoidNoThrowsTApplicationException", org.apache.thrift.protocol.TMessageType.CALL, 0));
                returnVoidNoThrowsTApplicationException_args args = new returnVoidNoThrowsTApplicationException_args();
                args.setMsg(msg);
                args.setThrowException(throwException);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_returnVoidNoThrowsTApplicationException();
                return null;
            }
        }

        @Override
        public void onewayVoidNoThrows(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            onewayVoidNoThrows_call method_call = new onewayVoidNoThrows_call(msg, throwException, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class onewayVoidNoThrows_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String msg;
            private boolean throwException;

            public onewayVoidNoThrows_call(java.lang.String msg, boolean throwException, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.msg = msg;
                this.throwException = throwException;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onewayVoidNoThrows", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                onewayVoidNoThrows_args args = new onewayVoidNoThrows_args();
                args.setMsg(msg);
                args.setThrowException(throwException);
                args.write(prot);
                prot.writeMessageEnd();
            }

            @Override
            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("returnString", new returnString());
            processMap.put("returnVoidThrows", new returnVoidThrows());
            processMap.put("returnVoidNoThrowsRuntimeException", new returnVoidNoThrowsRuntimeException());
            processMap.put("returnVoidNoThrowsTApplicationException", new returnVoidNoThrowsTApplicationException());
            processMap.put("onewayVoidNoThrows", new onewayVoidNoThrows());
            return processMap;
        }

        public static class returnString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnString_args> {
            public returnString() {
                super("returnString");
            }

            @Override
            public returnString_args getEmptyArgsInstance() {
                return new returnString_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public returnString_result getResult(I iface, returnString_args args) throws org.apache.thrift.TException {
                returnString_result result = new returnString_result();
                try {
                    result.success = iface.returnString(args.msg, args.throwException);
                } catch (TExampleException error) {
                    result.error = error;
                }
                return result;
            }
        }

        public static class returnVoidThrows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnVoidThrows_args> {
            public returnVoidThrows() {
                super("returnVoidThrows");
            }

            @Override
            public returnVoidThrows_args getEmptyArgsInstance() {
                return new returnVoidThrows_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public returnVoidThrows_result getResult(I iface, returnVoidThrows_args args) throws org.apache.thrift.TException {
                returnVoidThrows_result result = new returnVoidThrows_result();
                try {
                    iface.returnVoidThrows(args.msg, args.throwException);
                } catch (TExampleException error) {
                    result.error = error;
                }
                return result;
            }
        }

        public static class returnVoidNoThrowsRuntimeException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnVoidNoThrowsRuntimeException_args> {
            public returnVoidNoThrowsRuntimeException() {
                super("returnVoidNoThrowsRuntimeException");
            }

            @Override
            public returnVoidNoThrowsRuntimeException_args getEmptyArgsInstance() {
                return new returnVoidNoThrowsRuntimeException_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public returnVoidNoThrowsRuntimeException_result getResult(I iface, returnVoidNoThrowsRuntimeException_args args) throws org.apache.thrift.TException {
                returnVoidNoThrowsRuntimeException_result result = new returnVoidNoThrowsRuntimeException_result();
                iface.returnVoidNoThrowsRuntimeException(args.msg, args.throwException);
                return result;
            }
        }

        public static class returnVoidNoThrowsTApplicationException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnVoidNoThrowsTApplicationException_args> {
            public returnVoidNoThrowsTApplicationException() {
                super("returnVoidNoThrowsTApplicationException");
            }

            @Override
            public returnVoidNoThrowsTApplicationException_args getEmptyArgsInstance() {
                return new returnVoidNoThrowsTApplicationException_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public returnVoidNoThrowsTApplicationException_result getResult(I iface, returnVoidNoThrowsTApplicationException_args args) throws org.apache.thrift.TException {
                returnVoidNoThrowsTApplicationException_result result = new returnVoidNoThrowsTApplicationException_result();
                iface.returnVoidNoThrowsTApplicationException(args.msg, args.throwException);
                return result;
            }
        }

        public static class onewayVoidNoThrows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onewayVoidNoThrows_args> {
            public onewayVoidNoThrows() {
                super("onewayVoidNoThrows");
            }

            @Override
            public onewayVoidNoThrows_args getEmptyArgsInstance() {
                return new onewayVoidNoThrows_args();
            }

            @Override
            protected boolean isOneway() {
                return true;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            @Override
            public org.apache.thrift.TBase getResult(I iface, onewayVoidNoThrows_args args) throws org.apache.thrift.TException {
                iface.onewayVoidNoThrows(args.msg, args.throwException);
                return null;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("returnString", new returnString());
            processMap.put("returnVoidThrows", new returnVoidThrows());
            processMap.put("returnVoidNoThrowsRuntimeException", new returnVoidNoThrowsRuntimeException());
            processMap.put("returnVoidNoThrowsTApplicationException", new returnVoidNoThrowsTApplicationException());
            processMap.put("onewayVoidNoThrows", new onewayVoidNoThrows());
            return processMap;
        }

        public static class returnString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnString_args, java.lang.String> {
            public returnString() {
                super("returnString");
            }

            @Override
            public returnString_args getEmptyArgsInstance() {
                return new returnString_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    @Override
                    public void onComplete(java.lang.String o) {
                        returnString_result result = new returnString_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        returnString_result result = new returnString_result();
                        if (e instanceof TExampleException) {
                            result.error = (TExampleException) e;
                            result.setErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, returnString_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.returnString(args.msg, args.throwException, resultHandler);
            }
        }

        public static class returnVoidThrows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnVoidThrows_args, Void> {
            public returnVoidThrows() {
                super("returnVoidThrows");
            }

            @Override
            public returnVoidThrows_args getEmptyArgsInstance() {
                return new returnVoidThrows_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                        returnVoidThrows_result result = new returnVoidThrows_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        returnVoidThrows_result result = new returnVoidThrows_result();
                        if (e instanceof TExampleException) {
                            result.error = (TExampleException) e;
                            result.setErrorIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, returnVoidThrows_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.returnVoidThrows(args.msg, args.throwException, resultHandler);
            }
        }

        public static class returnVoidNoThrowsRuntimeException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnVoidNoThrowsRuntimeException_args, Void> {
            public returnVoidNoThrowsRuntimeException() {
                super("returnVoidNoThrowsRuntimeException");
            }

            @Override
            public returnVoidNoThrowsRuntimeException_args getEmptyArgsInstance() {
                return new returnVoidNoThrowsRuntimeException_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                        returnVoidNoThrowsRuntimeException_result result = new returnVoidNoThrowsRuntimeException_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        returnVoidNoThrowsRuntimeException_result result = new returnVoidNoThrowsRuntimeException_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, returnVoidNoThrowsRuntimeException_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.returnVoidNoThrowsRuntimeException(args.msg, args.throwException, resultHandler);
            }
        }

        public static class returnVoidNoThrowsTApplicationException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnVoidNoThrowsTApplicationException_args, Void> {
            public returnVoidNoThrowsTApplicationException() {
                super("returnVoidNoThrowsTApplicationException");
            }

            @Override
            public returnVoidNoThrowsTApplicationException_args getEmptyArgsInstance() {
                return new returnVoidNoThrowsTApplicationException_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                        returnVoidNoThrowsTApplicationException_result result = new returnVoidNoThrowsTApplicationException_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        returnVoidNoThrowsTApplicationException_result result = new returnVoidNoThrowsTApplicationException_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, returnVoidNoThrowsTApplicationException_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.returnVoidNoThrowsTApplicationException(args.msg, args.throwException, resultHandler);
            }
        }

        public static class onewayVoidNoThrows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onewayVoidNoThrows_args, Void> {
            public onewayVoidNoThrows() {
                super("onewayVoidNoThrows");
            }

            @Override
            public onewayVoidNoThrows_args getEmptyArgsInstance() {
                return new onewayVoidNoThrows_args();
            }

            @Override
            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    @Override
                    public void onComplete(Void o) {
                    }

                    @Override
                    public void onError(java.lang.Exception e) {
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                        } else {
                            _LOGGER.error("Exception inside oneway handler", e);
                        }
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return true;
            }

            @Override
            public void start(I iface, onewayVoidNoThrows_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.onewayVoidNoThrows(args.msg, args.throwException, resultHandler);
            }
        }

    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnString_args implements org.apache.thrift.TBase<returnString_args, returnString_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnString_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnString_args");

        private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField THROW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("throwException", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnString_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnString_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required
        public boolean throwException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MSG((short) 1, "msg"),
            THROW_EXCEPTION((short) 2, "throwException");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MSG
                        return MSG;
                    case 2: // THROW_EXCEPTION
                        return THROW_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __THROWEXCEPTION_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.THROW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("throwException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnString_args.class, metaDataMap);
        }

        public returnString_args() {
        }

        public returnString_args(
                java.lang.String msg,
                boolean throwException) {
            this();
            this.msg = msg;
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnString_args(returnString_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetMsg()) {
                this.msg = other.msg;
            }
            this.throwException = other.throwException;
        }

        @Override
        public returnString_args deepCopy() {
            return new returnString_args(this);
        }

        @Override
        public void clear() {
            this.msg = null;
            setThrowExceptionIsSet(false);
            this.throwException = false;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getMsg() {
            return this.msg;
        }

        public returnString_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
            this.msg = msg;
            return this;
        }

        public void unsetMsg() {
            this.msg = null;
        }

        /** Returns true if field msg is set (has been assigned a value) and false otherwise */
        public boolean isSetMsg() {
            return this.msg != null;
        }

        public void setMsgIsSet(boolean value) {
            if (!value) {
                this.msg = null;
            }
        }

        public boolean isThrowException() {
            return this.throwException;
        }

        public returnString_args setThrowException(boolean throwException) {
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
            return this;
        }

        public void unsetThrowException() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        /** Returns true if field throwException is set (has been assigned a value) and false otherwise */
        public boolean isSetThrowException() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        public void setThrowExceptionIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case MSG:
                    if (value == null) {
                        unsetMsg();
                    } else {
                        setMsg((java.lang.String) value);
                    }
                    break;

                case THROW_EXCEPTION:
                    if (value == null) {
                        unsetThrowException();
                    } else {
                        setThrowException((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case MSG:
                    return getMsg();

                case THROW_EXCEPTION:
                    return isThrowException();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case MSG:
                    return isSetMsg();
                case THROW_EXCEPTION:
                    return isSetThrowException();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnString_args)
                return this.equals((returnString_args) that);
            return false;
        }

        public boolean equals(returnString_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_msg = true && this.isSetMsg();
            boolean that_present_msg = true && that.isSetMsg();
            if (this_present_msg || that_present_msg) {
                if (!(this_present_msg && that_present_msg))
                    return false;
                if (!this.msg.equals(that.msg))
                    return false;
            }

            boolean this_present_throwException = true;
            boolean that_present_throwException = true;
            if (this_present_throwException || that_present_throwException) {
                if (!(this_present_throwException && that_present_throwException))
                    return false;
                if (this.throwException != that.throwException)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
            if (isSetMsg())
                hashCode = hashCode * 8191 + msg.hashCode();

            hashCode = hashCode * 8191 + ((throwException) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(returnString_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMsg()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetThrowException(), other.isSetThrowException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThrowException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwException, other.throwException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnString_args(");
            boolean first = true;

            sb.append("msg:");
            if (this.msg == null) {
                sb.append("null");
            } else {
                sb.append(this.msg);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("throwException:");
            sb.append(this.throwException);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnString_argsStandardScheme getScheme() {
                return new returnString_argsStandardScheme();
            }
        }

        private static class returnString_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnString_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnString_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MSG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.msg = iprot.readString();
                                struct.setMsgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // THROW_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.throwException = iprot.readBool();
                                struct.setThrowExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnString_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.msg != null) {
                    oprot.writeFieldBegin(MSG_FIELD_DESC);
                    oprot.writeString(struct.msg);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(THROW_EXCEPTION_FIELD_DESC);
                oprot.writeBool(struct.throwException);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnString_argsTupleScheme getScheme() {
                return new returnString_argsTupleScheme();
            }
        }

        private static class returnString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnString_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnString_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetMsg()) {
                    optionals.set(0);
                }
                if (struct.isSetThrowException()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMsg()) {
                    oprot.writeString(struct.msg);
                }
                if (struct.isSetThrowException()) {
                    oprot.writeBool(struct.throwException);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnString_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.msg = iprot.readString();
                    struct.setMsgIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.throwException = iprot.readBool();
                    struct.setThrowExceptionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnString_result implements org.apache.thrift.TBase<returnString_result, returnString_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnString_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnString_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnString_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnString_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
        public @org.apache.thrift.annotation.Nullable TExampleException error; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            ERROR((short) 1, "error");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // ERROR
                        return ERROR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExampleException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnString_result.class, metaDataMap);
        }

        public returnString_result() {
        }

        public returnString_result(
                java.lang.String success,
                TExampleException error) {
            this();
            this.success = success;
            this.error = error;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnString_result(returnString_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetError()) {
                this.error = new TExampleException(other.error);
            }
        }

        @Override
        public returnString_result deepCopy() {
            return new returnString_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.error = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public returnString_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public TExampleException getError() {
            return this.error;
        }

        public returnString_result setError(@org.apache.thrift.annotation.Nullable TExampleException error) {
            this.error = error;
            return this;
        }

        public void unsetError() {
            this.error = null;
        }

        /** Returns true if field error is set (has been assigned a value) and false otherwise */
        public boolean isSetError() {
            return this.error != null;
        }

        public void setErrorIsSet(boolean value) {
            if (!value) {
                this.error = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

                case ERROR:
                    if (value == null) {
                        unsetError();
                    } else {
                        setError((TExampleException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case ERROR:
                    return getError();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case ERROR:
                    return isSetError();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnString_result)
                return this.equals((returnString_result) that);
            return false;
        }

        public boolean equals(returnString_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_error = true && this.isSetError();
            boolean that_present_error = true && that.isSetError();
            if (this_present_error || that_present_error) {
                if (!(this_present_error && that_present_error))
                    return false;
                if (!this.error.equals(that.error))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
            if (isSetError())
                hashCode = hashCode * 8191 + error.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(returnString_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetError(), other.isSetError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnString_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("error:");
            if (this.error == null) {
                sb.append("null");
            } else {
                sb.append(this.error);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnString_resultStandardScheme getScheme() {
                return new returnString_resultStandardScheme();
            }
        }

        private static class returnString_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnString_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnString_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // ERROR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.error = new TExampleException();
                                struct.error.read(iprot);
                                struct.setErrorIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnString_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.error != null) {
                    oprot.writeFieldBegin(ERROR_FIELD_DESC);
                    struct.error.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnString_resultTupleScheme getScheme() {
                return new returnString_resultTupleScheme();
            }
        }

        private static class returnString_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnString_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnString_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetError()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetError()) {
                    struct.error.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnString_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.error = new TExampleException();
                    struct.error.read(iprot);
                    struct.setErrorIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnVoidThrows_args implements org.apache.thrift.TBase<returnVoidThrows_args, returnVoidThrows_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoidThrows_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoidThrows_args");

        private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField THROW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("throwException", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnVoidThrows_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnVoidThrows_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required
        public boolean throwException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MSG((short) 1, "msg"),
            THROW_EXCEPTION((short) 2, "throwException");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MSG
                        return MSG;
                    case 2: // THROW_EXCEPTION
                        return THROW_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __THROWEXCEPTION_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.THROW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("throwException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoidThrows_args.class, metaDataMap);
        }

        public returnVoidThrows_args() {
        }

        public returnVoidThrows_args(
                java.lang.String msg,
                boolean throwException) {
            this();
            this.msg = msg;
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnVoidThrows_args(returnVoidThrows_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetMsg()) {
                this.msg = other.msg;
            }
            this.throwException = other.throwException;
        }

        @Override
        public returnVoidThrows_args deepCopy() {
            return new returnVoidThrows_args(this);
        }

        @Override
        public void clear() {
            this.msg = null;
            setThrowExceptionIsSet(false);
            this.throwException = false;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getMsg() {
            return this.msg;
        }

        public returnVoidThrows_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
            this.msg = msg;
            return this;
        }

        public void unsetMsg() {
            this.msg = null;
        }

        /** Returns true if field msg is set (has been assigned a value) and false otherwise */
        public boolean isSetMsg() {
            return this.msg != null;
        }

        public void setMsgIsSet(boolean value) {
            if (!value) {
                this.msg = null;
            }
        }

        public boolean isThrowException() {
            return this.throwException;
        }

        public returnVoidThrows_args setThrowException(boolean throwException) {
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
            return this;
        }

        public void unsetThrowException() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        /** Returns true if field throwException is set (has been assigned a value) and false otherwise */
        public boolean isSetThrowException() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        public void setThrowExceptionIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case MSG:
                    if (value == null) {
                        unsetMsg();
                    } else {
                        setMsg((java.lang.String) value);
                    }
                    break;

                case THROW_EXCEPTION:
                    if (value == null) {
                        unsetThrowException();
                    } else {
                        setThrowException((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case MSG:
                    return getMsg();

                case THROW_EXCEPTION:
                    return isThrowException();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case MSG:
                    return isSetMsg();
                case THROW_EXCEPTION:
                    return isSetThrowException();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnVoidThrows_args)
                return this.equals((returnVoidThrows_args) that);
            return false;
        }

        public boolean equals(returnVoidThrows_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_msg = true && this.isSetMsg();
            boolean that_present_msg = true && that.isSetMsg();
            if (this_present_msg || that_present_msg) {
                if (!(this_present_msg && that_present_msg))
                    return false;
                if (!this.msg.equals(that.msg))
                    return false;
            }

            boolean this_present_throwException = true;
            boolean that_present_throwException = true;
            if (this_present_throwException || that_present_throwException) {
                if (!(this_present_throwException && that_present_throwException))
                    return false;
                if (this.throwException != that.throwException)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
            if (isSetMsg())
                hashCode = hashCode * 8191 + msg.hashCode();

            hashCode = hashCode * 8191 + ((throwException) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(returnVoidThrows_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMsg()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetThrowException(), other.isSetThrowException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThrowException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwException, other.throwException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnVoidThrows_args(");
            boolean first = true;

            sb.append("msg:");
            if (this.msg == null) {
                sb.append("null");
            } else {
                sb.append(this.msg);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("throwException:");
            sb.append(this.throwException);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnVoidThrows_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidThrows_argsStandardScheme getScheme() {
                return new returnVoidThrows_argsStandardScheme();
            }
        }

        private static class returnVoidThrows_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnVoidThrows_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoidThrows_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MSG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.msg = iprot.readString();
                                struct.setMsgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // THROW_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.throwException = iprot.readBool();
                                struct.setThrowExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoidThrows_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.msg != null) {
                    oprot.writeFieldBegin(MSG_FIELD_DESC);
                    oprot.writeString(struct.msg);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(THROW_EXCEPTION_FIELD_DESC);
                oprot.writeBool(struct.throwException);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnVoidThrows_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidThrows_argsTupleScheme getScheme() {
                return new returnVoidThrows_argsTupleScheme();
            }
        }

        private static class returnVoidThrows_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnVoidThrows_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnVoidThrows_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetMsg()) {
                    optionals.set(0);
                }
                if (struct.isSetThrowException()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMsg()) {
                    oprot.writeString(struct.msg);
                }
                if (struct.isSetThrowException()) {
                    oprot.writeBool(struct.throwException);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnVoidThrows_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.msg = iprot.readString();
                    struct.setMsgIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.throwException = iprot.readBool();
                    struct.setThrowExceptionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnVoidThrows_result implements org.apache.thrift.TBase<returnVoidThrows_result, returnVoidThrows_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoidThrows_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoidThrows_result");

        private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnVoidThrows_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnVoidThrows_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable TExampleException error; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ERROR((short) 1, "error");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ERROR
                        return ERROR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExampleException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoidThrows_result.class, metaDataMap);
        }

        public returnVoidThrows_result() {
        }

        public returnVoidThrows_result(
                TExampleException error) {
            this();
            this.error = error;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnVoidThrows_result(returnVoidThrows_result other) {
            if (other.isSetError()) {
                this.error = new TExampleException(other.error);
            }
        }

        @Override
        public returnVoidThrows_result deepCopy() {
            return new returnVoidThrows_result(this);
        }

        @Override
        public void clear() {
            this.error = null;
        }

        @org.apache.thrift.annotation.Nullable
        public TExampleException getError() {
            return this.error;
        }

        public returnVoidThrows_result setError(@org.apache.thrift.annotation.Nullable TExampleException error) {
            this.error = error;
            return this;
        }

        public void unsetError() {
            this.error = null;
        }

        /** Returns true if field error is set (has been assigned a value) and false otherwise */
        public boolean isSetError() {
            return this.error != null;
        }

        public void setErrorIsSet(boolean value) {
            if (!value) {
                this.error = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ERROR:
                    if (value == null) {
                        unsetError();
                    } else {
                        setError((TExampleException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ERROR:
                    return getError();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ERROR:
                    return isSetError();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnVoidThrows_result)
                return this.equals((returnVoidThrows_result) that);
            return false;
        }

        public boolean equals(returnVoidThrows_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_error = true && this.isSetError();
            boolean that_present_error = true && that.isSetError();
            if (this_present_error || that_present_error) {
                if (!(this_present_error && that_present_error))
                    return false;
                if (!this.error.equals(that.error))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
            if (isSetError())
                hashCode = hashCode * 8191 + error.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(returnVoidThrows_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetError(), other.isSetError());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetError()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnVoidThrows_result(");
            boolean first = true;

            sb.append("error:");
            if (this.error == null) {
                sb.append("null");
            } else {
                sb.append(this.error);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnVoidThrows_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidThrows_resultStandardScheme getScheme() {
                return new returnVoidThrows_resultStandardScheme();
            }
        }

        private static class returnVoidThrows_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnVoidThrows_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoidThrows_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ERROR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.error = new TExampleException();
                                struct.error.read(iprot);
                                struct.setErrorIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoidThrows_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.error != null) {
                    oprot.writeFieldBegin(ERROR_FIELD_DESC);
                    struct.error.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnVoidThrows_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidThrows_resultTupleScheme getScheme() {
                return new returnVoidThrows_resultTupleScheme();
            }
        }

        private static class returnVoidThrows_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnVoidThrows_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnVoidThrows_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetError()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetError()) {
                    struct.error.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnVoidThrows_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.error = new TExampleException();
                    struct.error.read(iprot);
                    struct.setErrorIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnVoidNoThrowsRuntimeException_args implements org.apache.thrift.TBase<returnVoidNoThrowsRuntimeException_args, returnVoidNoThrowsRuntimeException_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoidNoThrowsRuntimeException_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoidNoThrowsRuntimeException_args");

        private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField THROW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("throwException", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnVoidNoThrowsRuntimeException_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnVoidNoThrowsRuntimeException_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required
        public boolean throwException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MSG((short) 1, "msg"),
            THROW_EXCEPTION((short) 2, "throwException");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MSG
                        return MSG;
                    case 2: // THROW_EXCEPTION
                        return THROW_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __THROWEXCEPTION_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.THROW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("throwException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoidNoThrowsRuntimeException_args.class, metaDataMap);
        }

        public returnVoidNoThrowsRuntimeException_args() {
        }

        public returnVoidNoThrowsRuntimeException_args(
                java.lang.String msg,
                boolean throwException) {
            this();
            this.msg = msg;
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnVoidNoThrowsRuntimeException_args(returnVoidNoThrowsRuntimeException_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetMsg()) {
                this.msg = other.msg;
            }
            this.throwException = other.throwException;
        }

        @Override
        public returnVoidNoThrowsRuntimeException_args deepCopy() {
            return new returnVoidNoThrowsRuntimeException_args(this);
        }

        @Override
        public void clear() {
            this.msg = null;
            setThrowExceptionIsSet(false);
            this.throwException = false;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getMsg() {
            return this.msg;
        }

        public returnVoidNoThrowsRuntimeException_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
            this.msg = msg;
            return this;
        }

        public void unsetMsg() {
            this.msg = null;
        }

        /** Returns true if field msg is set (has been assigned a value) and false otherwise */
        public boolean isSetMsg() {
            return this.msg != null;
        }

        public void setMsgIsSet(boolean value) {
            if (!value) {
                this.msg = null;
            }
        }

        public boolean isThrowException() {
            return this.throwException;
        }

        public returnVoidNoThrowsRuntimeException_args setThrowException(boolean throwException) {
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
            return this;
        }

        public void unsetThrowException() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        /** Returns true if field throwException is set (has been assigned a value) and false otherwise */
        public boolean isSetThrowException() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        public void setThrowExceptionIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case MSG:
                    if (value == null) {
                        unsetMsg();
                    } else {
                        setMsg((java.lang.String) value);
                    }
                    break;

                case THROW_EXCEPTION:
                    if (value == null) {
                        unsetThrowException();
                    } else {
                        setThrowException((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case MSG:
                    return getMsg();

                case THROW_EXCEPTION:
                    return isThrowException();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case MSG:
                    return isSetMsg();
                case THROW_EXCEPTION:
                    return isSetThrowException();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnVoidNoThrowsRuntimeException_args)
                return this.equals((returnVoidNoThrowsRuntimeException_args) that);
            return false;
        }

        public boolean equals(returnVoidNoThrowsRuntimeException_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_msg = true && this.isSetMsg();
            boolean that_present_msg = true && that.isSetMsg();
            if (this_present_msg || that_present_msg) {
                if (!(this_present_msg && that_present_msg))
                    return false;
                if (!this.msg.equals(that.msg))
                    return false;
            }

            boolean this_present_throwException = true;
            boolean that_present_throwException = true;
            if (this_present_throwException || that_present_throwException) {
                if (!(this_present_throwException && that_present_throwException))
                    return false;
                if (this.throwException != that.throwException)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
            if (isSetMsg())
                hashCode = hashCode * 8191 + msg.hashCode();

            hashCode = hashCode * 8191 + ((throwException) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(returnVoidNoThrowsRuntimeException_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMsg()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetThrowException(), other.isSetThrowException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThrowException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwException, other.throwException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnVoidNoThrowsRuntimeException_args(");
            boolean first = true;

            sb.append("msg:");
            if (this.msg == null) {
                sb.append("null");
            } else {
                sb.append(this.msg);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("throwException:");
            sb.append(this.throwException);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnVoidNoThrowsRuntimeException_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsRuntimeException_argsStandardScheme getScheme() {
                return new returnVoidNoThrowsRuntimeException_argsStandardScheme();
            }
        }

        private static class returnVoidNoThrowsRuntimeException_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnVoidNoThrowsRuntimeException_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoidNoThrowsRuntimeException_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MSG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.msg = iprot.readString();
                                struct.setMsgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // THROW_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.throwException = iprot.readBool();
                                struct.setThrowExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoidNoThrowsRuntimeException_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.msg != null) {
                    oprot.writeFieldBegin(MSG_FIELD_DESC);
                    oprot.writeString(struct.msg);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(THROW_EXCEPTION_FIELD_DESC);
                oprot.writeBool(struct.throwException);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnVoidNoThrowsRuntimeException_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsRuntimeException_argsTupleScheme getScheme() {
                return new returnVoidNoThrowsRuntimeException_argsTupleScheme();
            }
        }

        private static class returnVoidNoThrowsRuntimeException_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnVoidNoThrowsRuntimeException_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsRuntimeException_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetMsg()) {
                    optionals.set(0);
                }
                if (struct.isSetThrowException()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMsg()) {
                    oprot.writeString(struct.msg);
                }
                if (struct.isSetThrowException()) {
                    oprot.writeBool(struct.throwException);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsRuntimeException_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.msg = iprot.readString();
                    struct.setMsgIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.throwException = iprot.readBool();
                    struct.setThrowExceptionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnVoidNoThrowsRuntimeException_result implements org.apache.thrift.TBase<returnVoidNoThrowsRuntimeException_result, returnVoidNoThrowsRuntimeException_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoidNoThrowsRuntimeException_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoidNoThrowsRuntimeException_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnVoidNoThrowsRuntimeException_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnVoidNoThrowsRuntimeException_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoidNoThrowsRuntimeException_result.class, metaDataMap);
        }

        public returnVoidNoThrowsRuntimeException_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnVoidNoThrowsRuntimeException_result(returnVoidNoThrowsRuntimeException_result other) {
        }

        @Override
        public returnVoidNoThrowsRuntimeException_result deepCopy() {
            return new returnVoidNoThrowsRuntimeException_result(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnVoidNoThrowsRuntimeException_result)
                return this.equals((returnVoidNoThrowsRuntimeException_result) that);
            return false;
        }

        public boolean equals(returnVoidNoThrowsRuntimeException_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(returnVoidNoThrowsRuntimeException_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnVoidNoThrowsRuntimeException_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnVoidNoThrowsRuntimeException_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsRuntimeException_resultStandardScheme getScheme() {
                return new returnVoidNoThrowsRuntimeException_resultStandardScheme();
            }
        }

        private static class returnVoidNoThrowsRuntimeException_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnVoidNoThrowsRuntimeException_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoidNoThrowsRuntimeException_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoidNoThrowsRuntimeException_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnVoidNoThrowsRuntimeException_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsRuntimeException_resultTupleScheme getScheme() {
                return new returnVoidNoThrowsRuntimeException_resultTupleScheme();
            }
        }

        private static class returnVoidNoThrowsRuntimeException_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnVoidNoThrowsRuntimeException_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsRuntimeException_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsRuntimeException_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnVoidNoThrowsTApplicationException_args implements org.apache.thrift.TBase<returnVoidNoThrowsTApplicationException_args, returnVoidNoThrowsTApplicationException_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoidNoThrowsTApplicationException_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoidNoThrowsTApplicationException_args");

        private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField THROW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("throwException", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnVoidNoThrowsTApplicationException_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnVoidNoThrowsTApplicationException_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required
        public boolean throwException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MSG((short) 1, "msg"),
            THROW_EXCEPTION((short) 2, "throwException");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MSG
                        return MSG;
                    case 2: // THROW_EXCEPTION
                        return THROW_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __THROWEXCEPTION_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.THROW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("throwException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoidNoThrowsTApplicationException_args.class, metaDataMap);
        }

        public returnVoidNoThrowsTApplicationException_args() {
        }

        public returnVoidNoThrowsTApplicationException_args(
                java.lang.String msg,
                boolean throwException) {
            this();
            this.msg = msg;
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnVoidNoThrowsTApplicationException_args(returnVoidNoThrowsTApplicationException_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetMsg()) {
                this.msg = other.msg;
            }
            this.throwException = other.throwException;
        }

        @Override
        public returnVoidNoThrowsTApplicationException_args deepCopy() {
            return new returnVoidNoThrowsTApplicationException_args(this);
        }

        @Override
        public void clear() {
            this.msg = null;
            setThrowExceptionIsSet(false);
            this.throwException = false;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getMsg() {
            return this.msg;
        }

        public returnVoidNoThrowsTApplicationException_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
            this.msg = msg;
            return this;
        }

        public void unsetMsg() {
            this.msg = null;
        }

        /** Returns true if field msg is set (has been assigned a value) and false otherwise */
        public boolean isSetMsg() {
            return this.msg != null;
        }

        public void setMsgIsSet(boolean value) {
            if (!value) {
                this.msg = null;
            }
        }

        public boolean isThrowException() {
            return this.throwException;
        }

        public returnVoidNoThrowsTApplicationException_args setThrowException(boolean throwException) {
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
            return this;
        }

        public void unsetThrowException() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        /** Returns true if field throwException is set (has been assigned a value) and false otherwise */
        public boolean isSetThrowException() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        public void setThrowExceptionIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case MSG:
                    if (value == null) {
                        unsetMsg();
                    } else {
                        setMsg((java.lang.String) value);
                    }
                    break;

                case THROW_EXCEPTION:
                    if (value == null) {
                        unsetThrowException();
                    } else {
                        setThrowException((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case MSG:
                    return getMsg();

                case THROW_EXCEPTION:
                    return isThrowException();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case MSG:
                    return isSetMsg();
                case THROW_EXCEPTION:
                    return isSetThrowException();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnVoidNoThrowsTApplicationException_args)
                return this.equals((returnVoidNoThrowsTApplicationException_args) that);
            return false;
        }

        public boolean equals(returnVoidNoThrowsTApplicationException_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_msg = true && this.isSetMsg();
            boolean that_present_msg = true && that.isSetMsg();
            if (this_present_msg || that_present_msg) {
                if (!(this_present_msg && that_present_msg))
                    return false;
                if (!this.msg.equals(that.msg))
                    return false;
            }

            boolean this_present_throwException = true;
            boolean that_present_throwException = true;
            if (this_present_throwException || that_present_throwException) {
                if (!(this_present_throwException && that_present_throwException))
                    return false;
                if (this.throwException != that.throwException)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
            if (isSetMsg())
                hashCode = hashCode * 8191 + msg.hashCode();

            hashCode = hashCode * 8191 + ((throwException) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(returnVoidNoThrowsTApplicationException_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMsg()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetThrowException(), other.isSetThrowException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThrowException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwException, other.throwException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnVoidNoThrowsTApplicationException_args(");
            boolean first = true;

            sb.append("msg:");
            if (this.msg == null) {
                sb.append("null");
            } else {
                sb.append(this.msg);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("throwException:");
            sb.append(this.throwException);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnVoidNoThrowsTApplicationException_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsTApplicationException_argsStandardScheme getScheme() {
                return new returnVoidNoThrowsTApplicationException_argsStandardScheme();
            }
        }

        private static class returnVoidNoThrowsTApplicationException_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnVoidNoThrowsTApplicationException_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoidNoThrowsTApplicationException_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MSG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.msg = iprot.readString();
                                struct.setMsgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // THROW_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.throwException = iprot.readBool();
                                struct.setThrowExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoidNoThrowsTApplicationException_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.msg != null) {
                    oprot.writeFieldBegin(MSG_FIELD_DESC);
                    oprot.writeString(struct.msg);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(THROW_EXCEPTION_FIELD_DESC);
                oprot.writeBool(struct.throwException);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnVoidNoThrowsTApplicationException_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsTApplicationException_argsTupleScheme getScheme() {
                return new returnVoidNoThrowsTApplicationException_argsTupleScheme();
            }
        }

        private static class returnVoidNoThrowsTApplicationException_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnVoidNoThrowsTApplicationException_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsTApplicationException_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetMsg()) {
                    optionals.set(0);
                }
                if (struct.isSetThrowException()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMsg()) {
                    oprot.writeString(struct.msg);
                }
                if (struct.isSetThrowException()) {
                    oprot.writeBool(struct.throwException);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsTApplicationException_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.msg = iprot.readString();
                    struct.setMsgIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.throwException = iprot.readBool();
                    struct.setThrowExceptionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class returnVoidNoThrowsTApplicationException_result implements org.apache.thrift.TBase<returnVoidNoThrowsTApplicationException_result, returnVoidNoThrowsTApplicationException_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoidNoThrowsTApplicationException_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoidNoThrowsTApplicationException_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnVoidNoThrowsTApplicationException_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnVoidNoThrowsTApplicationException_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoidNoThrowsTApplicationException_result.class, metaDataMap);
        }

        public returnVoidNoThrowsTApplicationException_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public returnVoidNoThrowsTApplicationException_result(returnVoidNoThrowsTApplicationException_result other) {
        }

        @Override
        public returnVoidNoThrowsTApplicationException_result deepCopy() {
            return new returnVoidNoThrowsTApplicationException_result(this);
        }

        @Override
        public void clear() {
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof returnVoidNoThrowsTApplicationException_result)
                return this.equals((returnVoidNoThrowsTApplicationException_result) that);
            return false;
        }

        public boolean equals(returnVoidNoThrowsTApplicationException_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(returnVoidNoThrowsTApplicationException_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("returnVoidNoThrowsTApplicationException_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class returnVoidNoThrowsTApplicationException_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsTApplicationException_resultStandardScheme getScheme() {
                return new returnVoidNoThrowsTApplicationException_resultStandardScheme();
            }
        }

        private static class returnVoidNoThrowsTApplicationException_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnVoidNoThrowsTApplicationException_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoidNoThrowsTApplicationException_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoidNoThrowsTApplicationException_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class returnVoidNoThrowsTApplicationException_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public returnVoidNoThrowsTApplicationException_resultTupleScheme getScheme() {
                return new returnVoidNoThrowsTApplicationException_resultTupleScheme();
            }
        }

        private static class returnVoidNoThrowsTApplicationException_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnVoidNoThrowsTApplicationException_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsTApplicationException_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, returnVoidNoThrowsTApplicationException_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
    public static class onewayVoidNoThrows_args implements org.apache.thrift.TBase<onewayVoidNoThrows_args, onewayVoidNoThrows_args._Fields>, java.io.Serializable, Cloneable, Comparable<onewayVoidNoThrows_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onewayVoidNoThrows_args");

        private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField THROW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("throwException", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onewayVoidNoThrows_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onewayVoidNoThrows_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required
        public boolean throwException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MSG((short) 1, "msg"),
            THROW_EXCEPTION((short) 2, "throwException");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MSG
                        return MSG;
                    case 2: // THROW_EXCEPTION
                        return THROW_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __THROWEXCEPTION_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.THROW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("throwException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onewayVoidNoThrows_args.class, metaDataMap);
        }

        public onewayVoidNoThrows_args() {
        }

        public onewayVoidNoThrows_args(
                java.lang.String msg,
                boolean throwException) {
            this();
            this.msg = msg;
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public onewayVoidNoThrows_args(onewayVoidNoThrows_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetMsg()) {
                this.msg = other.msg;
            }
            this.throwException = other.throwException;
        }

        @Override
        public onewayVoidNoThrows_args deepCopy() {
            return new onewayVoidNoThrows_args(this);
        }

        @Override
        public void clear() {
            this.msg = null;
            setThrowExceptionIsSet(false);
            this.throwException = false;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getMsg() {
            return this.msg;
        }

        public onewayVoidNoThrows_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
            this.msg = msg;
            return this;
        }

        public void unsetMsg() {
            this.msg = null;
        }

        /** Returns true if field msg is set (has been assigned a value) and false otherwise */
        public boolean isSetMsg() {
            return this.msg != null;
        }

        public void setMsgIsSet(boolean value) {
            if (!value) {
                this.msg = null;
            }
        }

        public boolean isThrowException() {
            return this.throwException;
        }

        public onewayVoidNoThrows_args setThrowException(boolean throwException) {
            this.throwException = throwException;
            setThrowExceptionIsSet(true);
            return this;
        }

        public void unsetThrowException() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        /** Returns true if field throwException is set (has been assigned a value) and false otherwise */
        public boolean isSetThrowException() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID);
        }

        public void setThrowExceptionIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THROWEXCEPTION_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case MSG:
                    if (value == null) {
                        unsetMsg();
                    } else {
                        setMsg((java.lang.String) value);
                    }
                    break;

                case THROW_EXCEPTION:
                    if (value == null) {
                        unsetThrowException();
                    } else {
                        setThrowException((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case MSG:
                    return getMsg();

                case THROW_EXCEPTION:
                    return isThrowException();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case MSG:
                    return isSetMsg();
                case THROW_EXCEPTION:
                    return isSetThrowException();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof onewayVoidNoThrows_args)
                return this.equals((onewayVoidNoThrows_args) that);
            return false;
        }

        public boolean equals(onewayVoidNoThrows_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_msg = true && this.isSetMsg();
            boolean that_present_msg = true && that.isSetMsg();
            if (this_present_msg || that_present_msg) {
                if (!(this_present_msg && that_present_msg))
                    return false;
                if (!this.msg.equals(that.msg))
                    return false;
            }

            boolean this_present_throwException = true;
            boolean that_present_throwException = true;
            if (this_present_throwException || that_present_throwException) {
                if (!(this_present_throwException && that_present_throwException))
                    return false;
                if (this.throwException != that.throwException)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
            if (isSetMsg())
                hashCode = hashCode * 8191 + msg.hashCode();

            hashCode = hashCode * 8191 + ((throwException) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(onewayVoidNoThrows_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMsg()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetThrowException(), other.isSetThrowException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThrowException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwException, other.throwException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public _Fields[] getFields() {
            return _Fields.values();
        }

        public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
            return metaDataMap;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("onewayVoidNoThrows_args(");
            boolean first = true;

            sb.append("msg:");
            if (this.msg == null) {
                sb.append("null");
            } else {
                sb.append(this.msg);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("throwException:");
            sb.append(this.throwException);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class onewayVoidNoThrows_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public onewayVoidNoThrows_argsStandardScheme getScheme() {
                return new onewayVoidNoThrows_argsStandardScheme();
            }
        }

        private static class onewayVoidNoThrows_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onewayVoidNoThrows_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, onewayVoidNoThrows_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MSG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.msg = iprot.readString();
                                struct.setMsgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // THROW_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.throwException = iprot.readBool();
                                struct.setThrowExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, onewayVoidNoThrows_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.msg != null) {
                    oprot.writeFieldBegin(MSG_FIELD_DESC);
                    oprot.writeString(struct.msg);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(THROW_EXCEPTION_FIELD_DESC);
                oprot.writeBool(struct.throwException);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class onewayVoidNoThrows_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            @Override
            public onewayVoidNoThrows_argsTupleScheme getScheme() {
                return new onewayVoidNoThrows_argsTupleScheme();
            }
        }

        private static class onewayVoidNoThrows_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onewayVoidNoThrows_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, onewayVoidNoThrows_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetMsg()) {
                    optionals.set(0);
                }
                if (struct.isSetThrowException()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMsg()) {
                    oprot.writeString(struct.msg);
                }
                if (struct.isSetThrowException()) {
                    oprot.writeBool(struct.throwException);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, onewayVoidNoThrows_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.msg = iprot.readString();
                    struct.setMsgIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.throwException = iprot.readBool();
                    struct.setThrowExceptionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
