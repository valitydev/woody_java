/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Tricky2 implements org.apache.thrift.TBase<Tricky2, Tricky2._Fields>, java.io.Serializable, Cloneable, Comparable<Tricky2> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tricky2");

    private static final org.apache.thrift.protocol.TField IM_OPTIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("im_optional", org.apache.thrift.protocol.TType.I16, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Tricky2StandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Tricky2TupleSchemeFactory();

    public short im_optional; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        IM_OPTIONAL((short) 1, "im_optional");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // IM_OPTIONAL
                    return IM_OPTIONAL;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __IM_OPTIONAL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.IM_OPTIONAL};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IM_OPTIONAL, new org.apache.thrift.meta_data.FieldMetaData("im_optional", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tricky2.class, metaDataMap);
    }

    public Tricky2() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Tricky2(Tricky2 other) {
        __isset_bitfield = other.__isset_bitfield;
        this.im_optional = other.im_optional;
    }

    @Override
    public Tricky2 deepCopy() {
        return new Tricky2(this);
    }

    @Override
    public void clear() {
        setIm_optionalIsSet(false);
        this.im_optional = 0;
    }

    public short getIm_optional() {
        return this.im_optional;
    }

    public Tricky2 setIm_optional(short im_optional) {
        this.im_optional = im_optional;
        setIm_optionalIsSet(true);
        return this;
    }

    public void unsetIm_optional() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IM_OPTIONAL_ISSET_ID);
    }

    /** Returns true if field im_optional is set (has been assigned a value) and false otherwise */
    public boolean isSetIm_optional() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IM_OPTIONAL_ISSET_ID);
    }

    public void setIm_optionalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IM_OPTIONAL_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case IM_OPTIONAL:
                if (value == null) {
                    unsetIm_optional();
                } else {
                    setIm_optional((java.lang.Short) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case IM_OPTIONAL:
                return getIm_optional();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case IM_OPTIONAL:
                return isSetIm_optional();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof Tricky2)
            return this.equals((Tricky2) that);
        return false;
    }

    public boolean equals(Tricky2 that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_im_optional = true && this.isSetIm_optional();
        boolean that_present_im_optional = true && that.isSetIm_optional();
        if (this_present_im_optional || that_present_im_optional) {
            if (!(this_present_im_optional && that_present_im_optional))
                return false;
            if (this.im_optional != that.im_optional)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetIm_optional()) ? 131071 : 524287);
        if (isSetIm_optional())
            hashCode = hashCode * 8191 + im_optional;

        return hashCode;
    }

    @Override
    public int compareTo(Tricky2 other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetIm_optional(), other.isSetIm_optional());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIm_optional()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im_optional, other.im_optional);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Tricky2(");
        boolean first = true;

        if (isSetIm_optional()) {
            sb.append("im_optional:");
            sb.append(this.im_optional);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class Tricky2StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public Tricky2StandardScheme getScheme() {
            return new Tricky2StandardScheme();
        }
    }

    private static class Tricky2StandardScheme extends org.apache.thrift.scheme.StandardScheme<Tricky2> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Tricky2 struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IM_OPTIONAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.im_optional = iprot.readI16();
                            struct.setIm_optionalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Tricky2 struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetIm_optional()) {
                oprot.writeFieldBegin(IM_OPTIONAL_FIELD_DESC);
                oprot.writeI16(struct.im_optional);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class Tricky2TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public Tricky2TupleScheme getScheme() {
            return new Tricky2TupleScheme();
        }
    }

    private static class Tricky2TupleScheme extends org.apache.thrift.scheme.TupleScheme<Tricky2> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Tricky2 struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetIm_optional()) {
                optionals.set(0);
            }
            oprot.writeBitSet(optionals, 1);
            if (struct.isSetIm_optional()) {
                oprot.writeI16(struct.im_optional);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Tricky2 struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(1);
            if (incoming.get(0)) {
                struct.im_optional = iprot.readI16();
                struct.setIm_optionalIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

