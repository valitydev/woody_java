/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TreeMap implements org.apache.thrift.TBase<TreeMap, TreeMap._Fields>, java.io.Serializable, Cloneable, Comparable<TreeMap> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TreeMap");

    private static final org.apache.thrift.protocol.TField VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("vals", org.apache.thrift.protocol.TType.MAP, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TreeMapStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TreeMapTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> vals; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        VALS((short) 1, "vals");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // VALS
                    return VALS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VALS, new org.apache.thrift.meta_data.FieldMetaData("vals", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TreeMap.class, metaDataMap);
    }

    public TreeMap() {
    }

    public TreeMap(
            java.util.Map<java.lang.String, java.lang.String> vals) {
        this();
        this.vals = vals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TreeMap(TreeMap other) {
        if (other.isSetVals()) {
            java.util.Map<java.lang.String, java.lang.String> __this__vals = new java.util.HashMap<java.lang.String, java.lang.String>(other.vals);
            this.vals = __this__vals;
        }
    }

    @Override
    public TreeMap deepCopy() {
        return new TreeMap(this);
    }

    @Override
    public void clear() {
        this.vals = null;
    }

    public int getValsSize() {
        return (this.vals == null) ? 0 : this.vals.size();
    }

    public void putToVals(java.lang.String key, java.lang.String val) {
        if (this.vals == null) {
            this.vals = new java.util.HashMap<java.lang.String, java.lang.String>();
        }
        this.vals.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, java.lang.String> getVals() {
        return this.vals;
    }

    public TreeMap setVals(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> vals) {
        this.vals = vals;
        return this;
    }

    public void unsetVals() {
        this.vals = null;
    }

    /** Returns true if field vals is set (has been assigned a value) and false otherwise */
    public boolean isSetVals() {
        return this.vals != null;
    }

    public void setValsIsSet(boolean value) {
        if (!value) {
            this.vals = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case VALS:
                if (value == null) {
                    unsetVals();
                } else {
                    setVals((java.util.Map<java.lang.String, java.lang.String>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case VALS:
                return getVals();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case VALS:
                return isSetVals();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof TreeMap)
            return this.equals((TreeMap) that);
        return false;
    }

    public boolean equals(TreeMap that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_vals = true && this.isSetVals();
        boolean that_present_vals = true && that.isSetVals();
        if (this_present_vals || that_present_vals) {
            if (!(this_present_vals && that_present_vals))
                return false;
            if (!this.vals.equals(that.vals))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetVals()) ? 131071 : 524287);
        if (isSetVals())
            hashCode = hashCode * 8191 + vals.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TreeMap other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetVals(), other.isSetVals());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVals()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vals, other.vals);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TreeMap(");
        boolean first = true;

        sb.append("vals:");
        if (this.vals == null) {
            sb.append("null");
        } else {
            sb.append(this.vals);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TreeMapStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public TreeMapStandardScheme getScheme() {
            return new TreeMapStandardScheme();
        }
    }

    private static class TreeMapStandardScheme extends org.apache.thrift.scheme.StandardScheme<TreeMap> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, TreeMap struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // VALS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                                struct.vals = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map26.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key27;
                                @org.apache.thrift.annotation.Nullable java.lang.String _val28;
                                for (int _i29 = 0; _i29 < _map26.size; ++_i29) {
                                    _key27 = iprot.readString();
                                    _val28 = iprot.readString();
                                    struct.vals.put(_key27, _val28);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setValsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, TreeMap struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.vals != null) {
                oprot.writeFieldBegin(VALS_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.vals.size()));
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter30 : struct.vals.entrySet()) {
                        oprot.writeString(_iter30.getKey());
                        oprot.writeString(_iter30.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TreeMapTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public TreeMapTupleScheme getScheme() {
            return new TreeMapTupleScheme();
        }
    }

    private static class TreeMapTupleScheme extends org.apache.thrift.scheme.TupleScheme<TreeMap> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TreeMap struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetVals()) {
                optionals.set(0);
            }
            oprot.writeBitSet(optionals, 1);
            if (struct.isSetVals()) {
                {
                    oprot.writeI32(struct.vals.size());
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter31 : struct.vals.entrySet()) {
                        oprot.writeString(_iter31.getKey());
                        oprot.writeString(_iter31.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TreeMap struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(1);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
                    struct.vals = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map32.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key33;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val34;
                    for (int _i35 = 0; _i35 < _map32.size; ++_i35) {
                        _key33 = iprot.readString();
                        _val34 = iprot.readString();
                        struct.vals.put(_key33, _val34);
                    }
                }
                struct.setValsIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

