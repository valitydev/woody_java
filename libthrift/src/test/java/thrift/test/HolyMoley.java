/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class HolyMoley implements org.apache.thrift.TBase<HolyMoley, HolyMoley._Fields>, java.io.Serializable, Cloneable, Comparable<HolyMoley> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HolyMoley");

    private static final org.apache.thrift.protocol.TField BIG_FIELD_DESC = new org.apache.thrift.protocol.TField("big", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField CONTAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("contain", org.apache.thrift.protocol.TType.SET, (short) 2);
    private static final org.apache.thrift.protocol.TField BONKS_FIELD_DESC = new org.apache.thrift.protocol.TField("bonks", org.apache.thrift.protocol.TType.MAP, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HolyMoleyStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HolyMoleyTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<OneOfEach> big; // required
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.String>> contain; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.List<Bonk>> bonks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BIG((short) 1, "big"),
        CONTAIN((short) 2, "contain"),
        BONKS((short) 3, "bonks");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // BIG
                    return BIG;
                case 2: // CONTAIN
                    return CONTAIN;
                case 3: // BONKS
                    return BONKS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BIG, new org.apache.thrift.meta_data.FieldMetaData("big", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OneOfEach.class))));
        tmpMap.put(_Fields.CONTAIN, new org.apache.thrift.meta_data.FieldMetaData("contain", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
        tmpMap.put(_Fields.BONKS, new org.apache.thrift.meta_data.FieldMetaData("bonks", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bonk.class)))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HolyMoley.class, metaDataMap);
    }

    public HolyMoley() {
    }

    public HolyMoley(
            java.util.List<OneOfEach> big,
            java.util.Set<java.util.List<java.lang.String>> contain,
            java.util.Map<java.lang.String, java.util.List<Bonk>> bonks) {
        this();
        this.big = big;
        this.contain = contain;
        this.bonks = bonks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HolyMoley(HolyMoley other) {
        if (other.isSetBig()) {
            java.util.List<OneOfEach> __this__big = new java.util.ArrayList<OneOfEach>(other.big.size());
            for (OneOfEach other_element : other.big) {
                __this__big.add(new OneOfEach(other_element));
            }
            this.big = __this__big;
        }
        if (other.isSetContain()) {
            java.util.Set<java.util.List<java.lang.String>> __this__contain = new java.util.HashSet<java.util.List<java.lang.String>>(other.contain.size());
            for (java.util.List<java.lang.String> other_element : other.contain) {
                java.util.List<java.lang.String> __this__contain_copy = new java.util.ArrayList<java.lang.String>(other_element);
                __this__contain.add(__this__contain_copy);
            }
            this.contain = __this__contain;
        }
        if (other.isSetBonks()) {
            java.util.Map<java.lang.String, java.util.List<Bonk>> __this__bonks = new java.util.HashMap<java.lang.String, java.util.List<Bonk>>(other.bonks.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<Bonk>> other_element : other.bonks.entrySet()) {

                java.lang.String other_element_key = other_element.getKey();
                java.util.List<Bonk> other_element_value = other_element.getValue();

                java.lang.String __this__bonks_copy_key = other_element_key;

                java.util.List<Bonk> __this__bonks_copy_value = new java.util.ArrayList<Bonk>(other_element_value.size());
                for (Bonk other_element_value_element : other_element_value) {
                    __this__bonks_copy_value.add(new Bonk(other_element_value_element));
                }

                __this__bonks.put(__this__bonks_copy_key, __this__bonks_copy_value);
            }
            this.bonks = __this__bonks;
        }
    }

    @Override
    public HolyMoley deepCopy() {
        return new HolyMoley(this);
    }

    @Override
    public void clear() {
        this.big = null;
        this.contain = null;
        this.bonks = null;
    }

    public int getBigSize() {
        return (this.big == null) ? 0 : this.big.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<OneOfEach> getBigIterator() {
        return (this.big == null) ? null : this.big.iterator();
    }

    public void addToBig(OneOfEach elem) {
        if (this.big == null) {
            this.big = new java.util.ArrayList<OneOfEach>();
        }
        this.big.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<OneOfEach> getBig() {
        return this.big;
    }

    public HolyMoley setBig(@org.apache.thrift.annotation.Nullable java.util.List<OneOfEach> big) {
        this.big = big;
        return this;
    }

    public void unsetBig() {
        this.big = null;
    }

    /** Returns true if field big is set (has been assigned a value) and false otherwise */
    public boolean isSetBig() {
        return this.big != null;
    }

    public void setBigIsSet(boolean value) {
        if (!value) {
            this.big = null;
        }
    }

    public int getContainSize() {
        return (this.contain == null) ? 0 : this.contain.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.String>> getContainIterator() {
        return (this.contain == null) ? null : this.contain.iterator();
    }

    public void addToContain(java.util.List<java.lang.String> elem) {
        if (this.contain == null) {
            this.contain = new java.util.HashSet<java.util.List<java.lang.String>>();
        }
        this.contain.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.util.List<java.lang.String>> getContain() {
        return this.contain;
    }

    public HolyMoley setContain(@org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.String>> contain) {
        this.contain = contain;
        return this;
    }

    public void unsetContain() {
        this.contain = null;
    }

    /** Returns true if field contain is set (has been assigned a value) and false otherwise */
    public boolean isSetContain() {
        return this.contain != null;
    }

    public void setContainIsSet(boolean value) {
        if (!value) {
            this.contain = null;
        }
    }

    public int getBonksSize() {
        return (this.bonks == null) ? 0 : this.bonks.size();
    }

    public void putToBonks(java.lang.String key, java.util.List<Bonk> val) {
        if (this.bonks == null) {
            this.bonks = new java.util.HashMap<java.lang.String, java.util.List<Bonk>>();
        }
        this.bonks.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, java.util.List<Bonk>> getBonks() {
        return this.bonks;
    }

    public HolyMoley setBonks(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.List<Bonk>> bonks) {
        this.bonks = bonks;
        return this;
    }

    public void unsetBonks() {
        this.bonks = null;
    }

    /** Returns true if field bonks is set (has been assigned a value) and false otherwise */
    public boolean isSetBonks() {
        return this.bonks != null;
    }

    public void setBonksIsSet(boolean value) {
        if (!value) {
            this.bonks = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case BIG:
                if (value == null) {
                    unsetBig();
                } else {
                    setBig((java.util.List<OneOfEach>) value);
                }
                break;

            case CONTAIN:
                if (value == null) {
                    unsetContain();
                } else {
                    setContain((java.util.Set<java.util.List<java.lang.String>>) value);
                }
                break;

            case BONKS:
                if (value == null) {
                    unsetBonks();
                } else {
                    setBonks((java.util.Map<java.lang.String, java.util.List<Bonk>>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case BIG:
                return getBig();

            case CONTAIN:
                return getContain();

            case BONKS:
                return getBonks();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case BIG:
                return isSetBig();
            case CONTAIN:
                return isSetContain();
            case BONKS:
                return isSetBonks();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof HolyMoley)
            return this.equals((HolyMoley) that);
        return false;
    }

    public boolean equals(HolyMoley that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_big = true && this.isSetBig();
        boolean that_present_big = true && that.isSetBig();
        if (this_present_big || that_present_big) {
            if (!(this_present_big && that_present_big))
                return false;
            if (!this.big.equals(that.big))
                return false;
        }

        boolean this_present_contain = true && this.isSetContain();
        boolean that_present_contain = true && that.isSetContain();
        if (this_present_contain || that_present_contain) {
            if (!(this_present_contain && that_present_contain))
                return false;
            if (!this.contain.equals(that.contain))
                return false;
        }

        boolean this_present_bonks = true && this.isSetBonks();
        boolean that_present_bonks = true && that.isSetBonks();
        if (this_present_bonks || that_present_bonks) {
            if (!(this_present_bonks && that_present_bonks))
                return false;
            if (!this.bonks.equals(that.bonks))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetBig()) ? 131071 : 524287);
        if (isSetBig())
            hashCode = hashCode * 8191 + big.hashCode();

        hashCode = hashCode * 8191 + ((isSetContain()) ? 131071 : 524287);
        if (isSetContain())
            hashCode = hashCode * 8191 + contain.hashCode();

        hashCode = hashCode * 8191 + ((isSetBonks()) ? 131071 : 524287);
        if (isSetBonks())
            hashCode = hashCode * 8191 + bonks.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(HolyMoley other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetBig(), other.isSetBig());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBig()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big, other.big);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetContain(), other.isSetContain());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetContain()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contain, other.contain);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBonks(), other.isSetBonks());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBonks()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bonks, other.bonks);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("HolyMoley(");
        boolean first = true;

        sb.append("big:");
        if (this.big == null) {
            sb.append("null");
        } else {
            sb.append(this.big);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("contain:");
        if (this.contain == null) {
            sb.append("null");
        } else {
            sb.append(this.contain);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("bonks:");
        if (this.bonks == null) {
            sb.append("null");
        } else {
            sb.append(this.bonks);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class HolyMoleyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public HolyMoleyStandardScheme getScheme() {
            return new HolyMoleyStandardScheme();
        }
    }

    private static class HolyMoleyStandardScheme extends org.apache.thrift.scheme.StandardScheme<HolyMoley> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, HolyMoley struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BIG
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                struct.big = new java.util.ArrayList<OneOfEach>(_list24.size);
                                @org.apache.thrift.annotation.Nullable OneOfEach _elem25;
                                for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
                                    _elem25 = new OneOfEach();
                                    _elem25.read(iprot);
                                    struct.big.add(_elem25);
                                }
                                iprot.readListEnd();
                            }
                            struct.setBigIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CONTAIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                                struct.contain = new java.util.HashSet<java.util.List<java.lang.String>>(2 * _set27.size);
                                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem28;
                                for (int _i29 = 0; _i29 < _set27.size; ++_i29) {
                                    {
                                        org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                                        _elem28 = new java.util.ArrayList<java.lang.String>(_list30.size);
                                        @org.apache.thrift.annotation.Nullable java.lang.String _elem31;
                                        for (int _i32 = 0; _i32 < _list30.size; ++_i32) {
                                            _elem31 = iprot.readString();
                                            _elem28.add(_elem31);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.contain.add(_elem28);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setContainIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // BONKS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
                                struct.bonks = new java.util.HashMap<java.lang.String, java.util.List<Bonk>>(2 * _map33.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key34;
                                @org.apache.thrift.annotation.Nullable java.util.List<Bonk> _val35;
                                for (int _i36 = 0; _i36 < _map33.size; ++_i36) {
                                    _key34 = iprot.readString();
                                    {
                                        org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                                        _val35 = new java.util.ArrayList<Bonk>(_list37.size);
                                        @org.apache.thrift.annotation.Nullable Bonk _elem38;
                                        for (int _i39 = 0; _i39 < _list37.size; ++_i39) {
                                            _elem38 = new Bonk();
                                            _elem38.read(iprot);
                                            _val35.add(_elem38);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.bonks.put(_key34, _val35);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setBonksIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, HolyMoley struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.big != null) {
                oprot.writeFieldBegin(BIG_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.big.size()));
                    for (OneOfEach _iter40 : struct.big) {
                        _iter40.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.contain != null) {
                oprot.writeFieldBegin(CONTAIN_FIELD_DESC);
                {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, struct.contain.size()));
                    for (java.util.List<java.lang.String> _iter41 : struct.contain) {
                        {
                            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter41.size()));
                            for (java.lang.String _iter42 : _iter41) {
                                oprot.writeString(_iter42);
                            }
                            oprot.writeListEnd();
                        }
                    }
                    oprot.writeSetEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.bonks != null) {
                oprot.writeFieldBegin(BONKS_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.bonks.size()));
                    for (java.util.Map.Entry<java.lang.String, java.util.List<Bonk>> _iter43 : struct.bonks.entrySet()) {
                        oprot.writeString(_iter43.getKey());
                        {
                            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter43.getValue().size()));
                            for (Bonk _iter44 : _iter43.getValue()) {
                                _iter44.write(oprot);
                            }
                            oprot.writeListEnd();
                        }
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class HolyMoleyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public HolyMoleyTupleScheme getScheme() {
            return new HolyMoleyTupleScheme();
        }
    }

    private static class HolyMoleyTupleScheme extends org.apache.thrift.scheme.TupleScheme<HolyMoley> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, HolyMoley struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetBig()) {
                optionals.set(0);
            }
            if (struct.isSetContain()) {
                optionals.set(1);
            }
            if (struct.isSetBonks()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetBig()) {
                {
                    oprot.writeI32(struct.big.size());
                    for (OneOfEach _iter45 : struct.big) {
                        _iter45.write(oprot);
                    }
                }
            }
            if (struct.isSetContain()) {
                {
                    oprot.writeI32(struct.contain.size());
                    for (java.util.List<java.lang.String> _iter46 : struct.contain) {
                        {
                            oprot.writeI32(_iter46.size());
                            for (java.lang.String _iter47 : _iter46) {
                                oprot.writeString(_iter47);
                            }
                        }
                    }
                }
            }
            if (struct.isSetBonks()) {
                {
                    oprot.writeI32(struct.bonks.size());
                    for (java.util.Map.Entry<java.lang.String, java.util.List<Bonk>> _iter48 : struct.bonks.entrySet()) {
                        oprot.writeString(_iter48.getKey());
                        {
                            oprot.writeI32(_iter48.getValue().size());
                            for (Bonk _iter49 : _iter48.getValue()) {
                                _iter49.write(oprot);
                            }
                        }
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, HolyMoley struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list50 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.big = new java.util.ArrayList<OneOfEach>(_list50.size);
                    @org.apache.thrift.annotation.Nullable OneOfEach _elem51;
                    for (int _i52 = 0; _i52 < _list50.size; ++_i52) {
                        _elem51 = new OneOfEach();
                        _elem51.read(iprot);
                        struct.big.add(_elem51);
                    }
                }
                struct.setBigIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TSet _set53 = iprot.readSetBegin(org.apache.thrift.protocol.TType.LIST);
                    struct.contain = new java.util.HashSet<java.util.List<java.lang.String>>(2 * _set53.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem54;
                    for (int _i55 = 0; _i55 < _set53.size; ++_i55) {
                        {
                            org.apache.thrift.protocol.TList _list56 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                            _elem54 = new java.util.ArrayList<java.lang.String>(_list56.size);
                            @org.apache.thrift.annotation.Nullable java.lang.String _elem57;
                            for (int _i58 = 0; _i58 < _list56.size; ++_i58) {
                                _elem57 = iprot.readString();
                                _elem54.add(_elem57);
                            }
                        }
                        struct.contain.add(_elem54);
                    }
                }
                struct.setContainIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST);
                    struct.bonks = new java.util.HashMap<java.lang.String, java.util.List<Bonk>>(2 * _map59.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key60;
                    @org.apache.thrift.annotation.Nullable java.util.List<Bonk> _val61;
                    for (int _i62 = 0; _i62 < _map59.size; ++_i62) {
                        _key60 = iprot.readString();
                        {
                            org.apache.thrift.protocol.TList _list63 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                            _val61 = new java.util.ArrayList<Bonk>(_list63.size);
                            @org.apache.thrift.annotation.Nullable Bonk _elem64;
                            for (int _i65 = 0; _i65 < _list63.size; ++_i65) {
                                _elem64 = new Bonk();
                                _elem64.read(iprot);
                                _val61.add(_elem64);
                            }
                        }
                        struct.bonks.put(_key60, _val61);
                    }
                }
                struct.setBonksIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

