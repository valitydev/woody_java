/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.thrift.partial;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class StructWithUnions implements org.apache.thrift.TBase<StructWithUnions, StructWithUnions._Fields>, java.io.Serializable, Cloneable, Comparable<StructWithUnions> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StructWithUnions");

    private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField SMALL_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("smallStruct", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
    private static final org.apache.thrift.protocol.TField SIMPLE_UNION_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleUnion", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
    private static final org.apache.thrift.protocol.TField UNION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("unionList", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField UNION_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("unionSet", org.apache.thrift.protocol.TType.SET, (short) 5);
    private static final org.apache.thrift.protocol.TField KEY_UNION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("keyUnionMap", org.apache.thrift.protocol.TType.MAP, (short) 6);
    private static final org.apache.thrift.protocol.TField VAL_UNION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("valUnionMap", org.apache.thrift.protocol.TType.MAP, (short) 7);
    private static final org.apache.thrift.protocol.TField UNION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("unionMap", org.apache.thrift.protocol.TType.MAP, (short) 8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StructWithUnionsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StructWithUnionsTupleSchemeFactory();

    public int intValue; // optional
    public @org.apache.thrift.annotation.Nullable SmallStruct smallStruct; // optional
    public @org.apache.thrift.annotation.Nullable SimpleUnion simpleUnion; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<SimpleUnion> unionList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<SimpleUnion> unionSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<SimpleUnion, java.lang.String> keyUnionMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, SimpleUnion> valUnionMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<SimpleUnion, SimpleUnion> unionMap; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        INT_VALUE((short) 1, "intValue"),
        SMALL_STRUCT((short) 2, "smallStruct"),
        SIMPLE_UNION((short) 3, "simpleUnion"),
        UNION_LIST((short) 4, "unionList"),
        UNION_SET((short) 5, "unionSet"),
        KEY_UNION_MAP((short) 6, "keyUnionMap"),
        VAL_UNION_MAP((short) 7, "valUnionMap"),
        UNION_MAP((short) 8, "unionMap");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // INT_VALUE
                    return INT_VALUE;
                case 2: // SMALL_STRUCT
                    return SMALL_STRUCT;
                case 3: // SIMPLE_UNION
                    return SIMPLE_UNION;
                case 4: // UNION_LIST
                    return UNION_LIST;
                case 5: // UNION_SET
                    return UNION_SET;
                case 6: // KEY_UNION_MAP
                    return KEY_UNION_MAP;
                case 7: // VAL_UNION_MAP
                    return VAL_UNION_MAP;
                case 8: // UNION_MAP
                    return UNION_MAP;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __INTVALUE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.INT_VALUE, _Fields.SMALL_STRUCT, _Fields.SIMPLE_UNION, _Fields.UNION_LIST, _Fields.UNION_SET, _Fields.KEY_UNION_MAP, _Fields.VAL_UNION_MAP, _Fields.UNION_MAP};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SMALL_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("smallStruct", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallStruct.class)));
        tmpMap.put(_Fields.SIMPLE_UNION, new org.apache.thrift.meta_data.FieldMetaData("simpleUnion", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class)));
        tmpMap.put(_Fields.UNION_LIST, new org.apache.thrift.meta_data.FieldMetaData("unionList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class))));
        tmpMap.put(_Fields.UNION_SET, new org.apache.thrift.meta_data.FieldMetaData("unionSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class))));
        tmpMap.put(_Fields.KEY_UNION_MAP, new org.apache.thrift.meta_data.FieldMetaData("keyUnionMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.VAL_UNION_MAP, new org.apache.thrift.meta_data.FieldMetaData("valUnionMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class))));
        tmpMap.put(_Fields.UNION_MAP, new org.apache.thrift.meta_data.FieldMetaData("unionMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleUnion.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StructWithUnions.class, metaDataMap);
    }

    public StructWithUnions() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StructWithUnions(StructWithUnions other) {
        __isset_bitfield = other.__isset_bitfield;
        this.intValue = other.intValue;
        if (other.isSetSmallStruct()) {
            this.smallStruct = new SmallStruct(other.smallStruct);
        }
        if (other.isSetSimpleUnion()) {
            this.simpleUnion = new SimpleUnion(other.simpleUnion);
        }
        if (other.isSetUnionList()) {
            java.util.List<SimpleUnion> __this__unionList = new java.util.ArrayList<SimpleUnion>(other.unionList.size());
            for (SimpleUnion other_element : other.unionList) {
                __this__unionList.add(new SimpleUnion(other_element));
            }
            this.unionList = __this__unionList;
        }
        if (other.isSetUnionSet()) {
            java.util.Set<SimpleUnion> __this__unionSet = new java.util.HashSet<SimpleUnion>(other.unionSet.size());
            for (SimpleUnion other_element : other.unionSet) {
                __this__unionSet.add(new SimpleUnion(other_element));
            }
            this.unionSet = __this__unionSet;
        }
        if (other.isSetKeyUnionMap()) {
            java.util.Map<SimpleUnion, java.lang.String> __this__keyUnionMap = new java.util.HashMap<SimpleUnion, java.lang.String>(other.keyUnionMap.size());
            for (java.util.Map.Entry<SimpleUnion, java.lang.String> other_element : other.keyUnionMap.entrySet()) {

                SimpleUnion other_element_key = other_element.getKey();
                java.lang.String other_element_value = other_element.getValue();

                SimpleUnion __this__keyUnionMap_copy_key = new SimpleUnion(other_element_key);

                java.lang.String __this__keyUnionMap_copy_value = other_element_value;

                __this__keyUnionMap.put(__this__keyUnionMap_copy_key, __this__keyUnionMap_copy_value);
            }
            this.keyUnionMap = __this__keyUnionMap;
        }
        if (other.isSetValUnionMap()) {
            java.util.Map<java.lang.String, SimpleUnion> __this__valUnionMap = new java.util.HashMap<java.lang.String, SimpleUnion>(other.valUnionMap.size());
            for (java.util.Map.Entry<java.lang.String, SimpleUnion> other_element : other.valUnionMap.entrySet()) {

                java.lang.String other_element_key = other_element.getKey();
                SimpleUnion other_element_value = other_element.getValue();

                java.lang.String __this__valUnionMap_copy_key = other_element_key;

                SimpleUnion __this__valUnionMap_copy_value = new SimpleUnion(other_element_value);

                __this__valUnionMap.put(__this__valUnionMap_copy_key, __this__valUnionMap_copy_value);
            }
            this.valUnionMap = __this__valUnionMap;
        }
        if (other.isSetUnionMap()) {
            java.util.Map<SimpleUnion, SimpleUnion> __this__unionMap = new java.util.HashMap<SimpleUnion, SimpleUnion>(other.unionMap.size());
            for (java.util.Map.Entry<SimpleUnion, SimpleUnion> other_element : other.unionMap.entrySet()) {

                SimpleUnion other_element_key = other_element.getKey();
                SimpleUnion other_element_value = other_element.getValue();

                SimpleUnion __this__unionMap_copy_key = new SimpleUnion(other_element_key);

                SimpleUnion __this__unionMap_copy_value = new SimpleUnion(other_element_value);

                __this__unionMap.put(__this__unionMap_copy_key, __this__unionMap_copy_value);
            }
            this.unionMap = __this__unionMap;
        }
    }

    @Override
    public StructWithUnions deepCopy() {
        return new StructWithUnions(this);
    }

    @Override
    public void clear() {
        setIntValueIsSet(false);
        this.intValue = 0;
        this.smallStruct = null;
        this.simpleUnion = null;
        this.unionList = null;
        this.unionSet = null;
        this.keyUnionMap = null;
        this.valUnionMap = null;
        this.unionMap = null;
    }

    public int getIntValue() {
        return this.intValue;
    }

    public StructWithUnions setIntValue(int intValue) {
        this.intValue = intValue;
        setIntValueIsSet(true);
        return this;
    }

    public void unsetIntValue() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTVALUE_ISSET_ID);
    }

    /** Returns true if field intValue is set (has been assigned a value) and false otherwise */
    public boolean isSetIntValue() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTVALUE_ISSET_ID);
    }

    public void setIntValueIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTVALUE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public SmallStruct getSmallStruct() {
        return this.smallStruct;
    }

    public StructWithUnions setSmallStruct(@org.apache.thrift.annotation.Nullable SmallStruct smallStruct) {
        this.smallStruct = smallStruct;
        return this;
    }

    public void unsetSmallStruct() {
        this.smallStruct = null;
    }

    /** Returns true if field smallStruct is set (has been assigned a value) and false otherwise */
    public boolean isSetSmallStruct() {
        return this.smallStruct != null;
    }

    public void setSmallStructIsSet(boolean value) {
        if (!value) {
            this.smallStruct = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public SimpleUnion getSimpleUnion() {
        return this.simpleUnion;
    }

    public StructWithUnions setSimpleUnion(@org.apache.thrift.annotation.Nullable SimpleUnion simpleUnion) {
        this.simpleUnion = simpleUnion;
        return this;
    }

    public void unsetSimpleUnion() {
        this.simpleUnion = null;
    }

    /** Returns true if field simpleUnion is set (has been assigned a value) and false otherwise */
    public boolean isSetSimpleUnion() {
        return this.simpleUnion != null;
    }

    public void setSimpleUnionIsSet(boolean value) {
        if (!value) {
            this.simpleUnion = null;
        }
    }

    public int getUnionListSize() {
        return (this.unionList == null) ? 0 : this.unionList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SimpleUnion> getUnionListIterator() {
        return (this.unionList == null) ? null : this.unionList.iterator();
    }

    public void addToUnionList(SimpleUnion elem) {
        if (this.unionList == null) {
            this.unionList = new java.util.ArrayList<SimpleUnion>();
        }
        this.unionList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<SimpleUnion> getUnionList() {
        return this.unionList;
    }

    public StructWithUnions setUnionList(@org.apache.thrift.annotation.Nullable java.util.List<SimpleUnion> unionList) {
        this.unionList = unionList;
        return this;
    }

    public void unsetUnionList() {
        this.unionList = null;
    }

    /** Returns true if field unionList is set (has been assigned a value) and false otherwise */
    public boolean isSetUnionList() {
        return this.unionList != null;
    }

    public void setUnionListIsSet(boolean value) {
        if (!value) {
            this.unionList = null;
        }
    }

    public int getUnionSetSize() {
        return (this.unionSet == null) ? 0 : this.unionSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SimpleUnion> getUnionSetIterator() {
        return (this.unionSet == null) ? null : this.unionSet.iterator();
    }

    public void addToUnionSet(SimpleUnion elem) {
        if (this.unionSet == null) {
            this.unionSet = new java.util.HashSet<SimpleUnion>();
        }
        this.unionSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<SimpleUnion> getUnionSet() {
        return this.unionSet;
    }

    public StructWithUnions setUnionSet(@org.apache.thrift.annotation.Nullable java.util.Set<SimpleUnion> unionSet) {
        this.unionSet = unionSet;
        return this;
    }

    public void unsetUnionSet() {
        this.unionSet = null;
    }

    /** Returns true if field unionSet is set (has been assigned a value) and false otherwise */
    public boolean isSetUnionSet() {
        return this.unionSet != null;
    }

    public void setUnionSetIsSet(boolean value) {
        if (!value) {
            this.unionSet = null;
        }
    }

    public int getKeyUnionMapSize() {
        return (this.keyUnionMap == null) ? 0 : this.keyUnionMap.size();
    }

    public void putToKeyUnionMap(SimpleUnion key, java.lang.String val) {
        if (this.keyUnionMap == null) {
            this.keyUnionMap = new java.util.HashMap<SimpleUnion, java.lang.String>();
        }
        this.keyUnionMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<SimpleUnion, java.lang.String> getKeyUnionMap() {
        return this.keyUnionMap;
    }

    public StructWithUnions setKeyUnionMap(@org.apache.thrift.annotation.Nullable java.util.Map<SimpleUnion, java.lang.String> keyUnionMap) {
        this.keyUnionMap = keyUnionMap;
        return this;
    }

    public void unsetKeyUnionMap() {
        this.keyUnionMap = null;
    }

    /** Returns true if field keyUnionMap is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyUnionMap() {
        return this.keyUnionMap != null;
    }

    public void setKeyUnionMapIsSet(boolean value) {
        if (!value) {
            this.keyUnionMap = null;
        }
    }

    public int getValUnionMapSize() {
        return (this.valUnionMap == null) ? 0 : this.valUnionMap.size();
    }

    public void putToValUnionMap(java.lang.String key, SimpleUnion val) {
        if (this.valUnionMap == null) {
            this.valUnionMap = new java.util.HashMap<java.lang.String, SimpleUnion>();
        }
        this.valUnionMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, SimpleUnion> getValUnionMap() {
        return this.valUnionMap;
    }

    public StructWithUnions setValUnionMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, SimpleUnion> valUnionMap) {
        this.valUnionMap = valUnionMap;
        return this;
    }

    public void unsetValUnionMap() {
        this.valUnionMap = null;
    }

    /** Returns true if field valUnionMap is set (has been assigned a value) and false otherwise */
    public boolean isSetValUnionMap() {
        return this.valUnionMap != null;
    }

    public void setValUnionMapIsSet(boolean value) {
        if (!value) {
            this.valUnionMap = null;
        }
    }

    public int getUnionMapSize() {
        return (this.unionMap == null) ? 0 : this.unionMap.size();
    }

    public void putToUnionMap(SimpleUnion key, SimpleUnion val) {
        if (this.unionMap == null) {
            this.unionMap = new java.util.HashMap<SimpleUnion, SimpleUnion>();
        }
        this.unionMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<SimpleUnion, SimpleUnion> getUnionMap() {
        return this.unionMap;
    }

    public StructWithUnions setUnionMap(@org.apache.thrift.annotation.Nullable java.util.Map<SimpleUnion, SimpleUnion> unionMap) {
        this.unionMap = unionMap;
        return this;
    }

    public void unsetUnionMap() {
        this.unionMap = null;
    }

    /** Returns true if field unionMap is set (has been assigned a value) and false otherwise */
    public boolean isSetUnionMap() {
        return this.unionMap != null;
    }

    public void setUnionMapIsSet(boolean value) {
        if (!value) {
            this.unionMap = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case INT_VALUE:
                if (value == null) {
                    unsetIntValue();
                } else {
                    setIntValue((java.lang.Integer) value);
                }
                break;

            case SMALL_STRUCT:
                if (value == null) {
                    unsetSmallStruct();
                } else {
                    setSmallStruct((SmallStruct) value);
                }
                break;

            case SIMPLE_UNION:
                if (value == null) {
                    unsetSimpleUnion();
                } else {
                    setSimpleUnion((SimpleUnion) value);
                }
                break;

            case UNION_LIST:
                if (value == null) {
                    unsetUnionList();
                } else {
                    setUnionList((java.util.List<SimpleUnion>) value);
                }
                break;

            case UNION_SET:
                if (value == null) {
                    unsetUnionSet();
                } else {
                    setUnionSet((java.util.Set<SimpleUnion>) value);
                }
                break;

            case KEY_UNION_MAP:
                if (value == null) {
                    unsetKeyUnionMap();
                } else {
                    setKeyUnionMap((java.util.Map<SimpleUnion, java.lang.String>) value);
                }
                break;

            case VAL_UNION_MAP:
                if (value == null) {
                    unsetValUnionMap();
                } else {
                    setValUnionMap((java.util.Map<java.lang.String, SimpleUnion>) value);
                }
                break;

            case UNION_MAP:
                if (value == null) {
                    unsetUnionMap();
                } else {
                    setUnionMap((java.util.Map<SimpleUnion, SimpleUnion>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case INT_VALUE:
                return getIntValue();

            case SMALL_STRUCT:
                return getSmallStruct();

            case SIMPLE_UNION:
                return getSimpleUnion();

            case UNION_LIST:
                return getUnionList();

            case UNION_SET:
                return getUnionSet();

            case KEY_UNION_MAP:
                return getKeyUnionMap();

            case VAL_UNION_MAP:
                return getValUnionMap();

            case UNION_MAP:
                return getUnionMap();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case INT_VALUE:
                return isSetIntValue();
            case SMALL_STRUCT:
                return isSetSmallStruct();
            case SIMPLE_UNION:
                return isSetSimpleUnion();
            case UNION_LIST:
                return isSetUnionList();
            case UNION_SET:
                return isSetUnionSet();
            case KEY_UNION_MAP:
                return isSetKeyUnionMap();
            case VAL_UNION_MAP:
                return isSetValUnionMap();
            case UNION_MAP:
                return isSetUnionMap();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof StructWithUnions)
            return this.equals((StructWithUnions) that);
        return false;
    }

    public boolean equals(StructWithUnions that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_intValue = true && this.isSetIntValue();
        boolean that_present_intValue = true && that.isSetIntValue();
        if (this_present_intValue || that_present_intValue) {
            if (!(this_present_intValue && that_present_intValue))
                return false;
            if (this.intValue != that.intValue)
                return false;
        }

        boolean this_present_smallStruct = true && this.isSetSmallStruct();
        boolean that_present_smallStruct = true && that.isSetSmallStruct();
        if (this_present_smallStruct || that_present_smallStruct) {
            if (!(this_present_smallStruct && that_present_smallStruct))
                return false;
            if (!this.smallStruct.equals(that.smallStruct))
                return false;
        }

        boolean this_present_simpleUnion = true && this.isSetSimpleUnion();
        boolean that_present_simpleUnion = true && that.isSetSimpleUnion();
        if (this_present_simpleUnion || that_present_simpleUnion) {
            if (!(this_present_simpleUnion && that_present_simpleUnion))
                return false;
            if (!this.simpleUnion.equals(that.simpleUnion))
                return false;
        }

        boolean this_present_unionList = true && this.isSetUnionList();
        boolean that_present_unionList = true && that.isSetUnionList();
        if (this_present_unionList || that_present_unionList) {
            if (!(this_present_unionList && that_present_unionList))
                return false;
            if (!this.unionList.equals(that.unionList))
                return false;
        }

        boolean this_present_unionSet = true && this.isSetUnionSet();
        boolean that_present_unionSet = true && that.isSetUnionSet();
        if (this_present_unionSet || that_present_unionSet) {
            if (!(this_present_unionSet && that_present_unionSet))
                return false;
            if (!this.unionSet.equals(that.unionSet))
                return false;
        }

        boolean this_present_keyUnionMap = true && this.isSetKeyUnionMap();
        boolean that_present_keyUnionMap = true && that.isSetKeyUnionMap();
        if (this_present_keyUnionMap || that_present_keyUnionMap) {
            if (!(this_present_keyUnionMap && that_present_keyUnionMap))
                return false;
            if (!this.keyUnionMap.equals(that.keyUnionMap))
                return false;
        }

        boolean this_present_valUnionMap = true && this.isSetValUnionMap();
        boolean that_present_valUnionMap = true && that.isSetValUnionMap();
        if (this_present_valUnionMap || that_present_valUnionMap) {
            if (!(this_present_valUnionMap && that_present_valUnionMap))
                return false;
            if (!this.valUnionMap.equals(that.valUnionMap))
                return false;
        }

        boolean this_present_unionMap = true && this.isSetUnionMap();
        boolean that_present_unionMap = true && that.isSetUnionMap();
        if (this_present_unionMap || that_present_unionMap) {
            if (!(this_present_unionMap && that_present_unionMap))
                return false;
            if (!this.unionMap.equals(that.unionMap))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetIntValue()) ? 131071 : 524287);
        if (isSetIntValue())
            hashCode = hashCode * 8191 + intValue;

        hashCode = hashCode * 8191 + ((isSetSmallStruct()) ? 131071 : 524287);
        if (isSetSmallStruct())
            hashCode = hashCode * 8191 + smallStruct.hashCode();

        hashCode = hashCode * 8191 + ((isSetSimpleUnion()) ? 131071 : 524287);
        if (isSetSimpleUnion())
            hashCode = hashCode * 8191 + simpleUnion.hashCode();

        hashCode = hashCode * 8191 + ((isSetUnionList()) ? 131071 : 524287);
        if (isSetUnionList())
            hashCode = hashCode * 8191 + unionList.hashCode();

        hashCode = hashCode * 8191 + ((isSetUnionSet()) ? 131071 : 524287);
        if (isSetUnionSet())
            hashCode = hashCode * 8191 + unionSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetKeyUnionMap()) ? 131071 : 524287);
        if (isSetKeyUnionMap())
            hashCode = hashCode * 8191 + keyUnionMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetValUnionMap()) ? 131071 : 524287);
        if (isSetValUnionMap())
            hashCode = hashCode * 8191 + valUnionMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetUnionMap()) ? 131071 : 524287);
        if (isSetUnionMap())
            hashCode = hashCode * 8191 + unionMap.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(StructWithUnions other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetIntValue(), other.isSetIntValue());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIntValue()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValue, other.intValue);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSmallStruct(), other.isSetSmallStruct());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSmallStruct()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallStruct, other.smallStruct);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSimpleUnion(), other.isSetSimpleUnion());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSimpleUnion()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleUnion, other.simpleUnion);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetUnionList(), other.isSetUnionList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUnionList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionList, other.unionList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetUnionSet(), other.isSetUnionSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUnionSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionSet, other.unionSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetKeyUnionMap(), other.isSetKeyUnionMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetKeyUnionMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyUnionMap, other.keyUnionMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetValUnionMap(), other.isSetValUnionMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValUnionMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valUnionMap, other.valUnionMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetUnionMap(), other.isSetUnionMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUnionMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionMap, other.unionMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("StructWithUnions(");
        boolean first = true;

        if (isSetIntValue()) {
            sb.append("intValue:");
            sb.append(this.intValue);
            first = false;
        }
        if (isSetSmallStruct()) {
            if (!first) sb.append(", ");
            sb.append("smallStruct:");
            if (this.smallStruct == null) {
                sb.append("null");
            } else {
                sb.append(this.smallStruct);
            }
            first = false;
        }
        if (isSetSimpleUnion()) {
            if (!first) sb.append(", ");
            sb.append("simpleUnion:");
            if (this.simpleUnion == null) {
                sb.append("null");
            } else {
                sb.append(this.simpleUnion);
            }
            first = false;
        }
        if (isSetUnionList()) {
            if (!first) sb.append(", ");
            sb.append("unionList:");
            if (this.unionList == null) {
                sb.append("null");
            } else {
                sb.append(this.unionList);
            }
            first = false;
        }
        if (isSetUnionSet()) {
            if (!first) sb.append(", ");
            sb.append("unionSet:");
            if (this.unionSet == null) {
                sb.append("null");
            } else {
                sb.append(this.unionSet);
            }
            first = false;
        }
        if (isSetKeyUnionMap()) {
            if (!first) sb.append(", ");
            sb.append("keyUnionMap:");
            if (this.keyUnionMap == null) {
                sb.append("null");
            } else {
                sb.append(this.keyUnionMap);
            }
            first = false;
        }
        if (isSetValUnionMap()) {
            if (!first) sb.append(", ");
            sb.append("valUnionMap:");
            if (this.valUnionMap == null) {
                sb.append("null");
            } else {
                sb.append(this.valUnionMap);
            }
            first = false;
        }
        if (isSetUnionMap()) {
            if (!first) sb.append(", ");
            sb.append("unionMap:");
            if (this.unionMap == null) {
                sb.append("null");
            } else {
                sb.append(this.unionMap);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (smallStruct != null) {
            smallStruct.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class StructWithUnionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public StructWithUnionsStandardScheme getScheme() {
            return new StructWithUnionsStandardScheme();
        }
    }

    private static class StructWithUnionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<StructWithUnions> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, StructWithUnions struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // INT_VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.intValue = iprot.readI32();
                            struct.setIntValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SMALL_STRUCT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.smallStruct = new SmallStruct();
                            struct.smallStruct.read(iprot);
                            struct.setSmallStructIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SIMPLE_UNION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.simpleUnion = new SimpleUnion();
                            struct.simpleUnion.read(iprot);
                            struct.setSimpleUnionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // UNION_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                                struct.unionList = new java.util.ArrayList<SimpleUnion>(_list400.size);
                                @org.apache.thrift.annotation.Nullable SimpleUnion _elem401;
                                for (int _i402 = 0; _i402 < _list400.size; ++_i402) {
                                    _elem401 = new SimpleUnion();
                                    _elem401.read(iprot);
                                    struct.unionList.add(_elem401);
                                }
                                iprot.readListEnd();
                            }
                            struct.setUnionListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // UNION_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set403 = iprot.readSetBegin();
                                struct.unionSet = new java.util.HashSet<SimpleUnion>(2 * _set403.size);
                                @org.apache.thrift.annotation.Nullable SimpleUnion _elem404;
                                for (int _i405 = 0; _i405 < _set403.size; ++_i405) {
                                    _elem404 = new SimpleUnion();
                                    _elem404.read(iprot);
                                    struct.unionSet.add(_elem404);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setUnionSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // KEY_UNION_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map406 = iprot.readMapBegin();
                                struct.keyUnionMap = new java.util.HashMap<SimpleUnion, java.lang.String>(2 * _map406.size);
                                @org.apache.thrift.annotation.Nullable SimpleUnion _key407;
                                @org.apache.thrift.annotation.Nullable java.lang.String _val408;
                                for (int _i409 = 0; _i409 < _map406.size; ++_i409) {
                                    _key407 = new SimpleUnion();
                                    _key407.read(iprot);
                                    _val408 = iprot.readString();
                                    struct.keyUnionMap.put(_key407, _val408);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setKeyUnionMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // VAL_UNION_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map410 = iprot.readMapBegin();
                                struct.valUnionMap = new java.util.HashMap<java.lang.String, SimpleUnion>(2 * _map410.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key411;
                                @org.apache.thrift.annotation.Nullable SimpleUnion _val412;
                                for (int _i413 = 0; _i413 < _map410.size; ++_i413) {
                                    _key411 = iprot.readString();
                                    _val412 = new SimpleUnion();
                                    _val412.read(iprot);
                                    struct.valUnionMap.put(_key411, _val412);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setValUnionMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // UNION_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map414 = iprot.readMapBegin();
                                struct.unionMap = new java.util.HashMap<SimpleUnion, SimpleUnion>(2 * _map414.size);
                                @org.apache.thrift.annotation.Nullable SimpleUnion _key415;
                                @org.apache.thrift.annotation.Nullable SimpleUnion _val416;
                                for (int _i417 = 0; _i417 < _map414.size; ++_i417) {
                                    _key415 = new SimpleUnion();
                                    _key415.read(iprot);
                                    _val416 = new SimpleUnion();
                                    _val416.read(iprot);
                                    struct.unionMap.put(_key415, _val416);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setUnionMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, StructWithUnions struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetIntValue()) {
                oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
                oprot.writeI32(struct.intValue);
                oprot.writeFieldEnd();
            }
            if (struct.smallStruct != null) {
                if (struct.isSetSmallStruct()) {
                    oprot.writeFieldBegin(SMALL_STRUCT_FIELD_DESC);
                    struct.smallStruct.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.simpleUnion != null) {
                if (struct.isSetSimpleUnion()) {
                    oprot.writeFieldBegin(SIMPLE_UNION_FIELD_DESC);
                    struct.simpleUnion.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.unionList != null) {
                if (struct.isSetUnionList()) {
                    oprot.writeFieldBegin(UNION_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.unionList.size()));
                        for (SimpleUnion _iter418 : struct.unionList) {
                            _iter418.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.unionSet != null) {
                if (struct.isSetUnionSet()) {
                    oprot.writeFieldBegin(UNION_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.unionSet.size()));
                        for (SimpleUnion _iter419 : struct.unionSet) {
                            _iter419.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.keyUnionMap != null) {
                if (struct.isSetKeyUnionMap()) {
                    oprot.writeFieldBegin(KEY_UNION_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING, struct.keyUnionMap.size()));
                        for (java.util.Map.Entry<SimpleUnion, java.lang.String> _iter420 : struct.keyUnionMap.entrySet()) {
                            _iter420.getKey().write(oprot);
                            oprot.writeString(_iter420.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.valUnionMap != null) {
                if (struct.isSetValUnionMap()) {
                    oprot.writeFieldBegin(VAL_UNION_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.valUnionMap.size()));
                        for (java.util.Map.Entry<java.lang.String, SimpleUnion> _iter421 : struct.valUnionMap.entrySet()) {
                            oprot.writeString(_iter421.getKey());
                            _iter421.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.unionMap != null) {
                if (struct.isSetUnionMap()) {
                    oprot.writeFieldBegin(UNION_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.unionMap.size()));
                        for (java.util.Map.Entry<SimpleUnion, SimpleUnion> _iter422 : struct.unionMap.entrySet()) {
                            _iter422.getKey().write(oprot);
                            _iter422.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class StructWithUnionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public StructWithUnionsTupleScheme getScheme() {
            return new StructWithUnionsTupleScheme();
        }
    }

    private static class StructWithUnionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<StructWithUnions> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, StructWithUnions struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetIntValue()) {
                optionals.set(0);
            }
            if (struct.isSetSmallStruct()) {
                optionals.set(1);
            }
            if (struct.isSetSimpleUnion()) {
                optionals.set(2);
            }
            if (struct.isSetUnionList()) {
                optionals.set(3);
            }
            if (struct.isSetUnionSet()) {
                optionals.set(4);
            }
            if (struct.isSetKeyUnionMap()) {
                optionals.set(5);
            }
            if (struct.isSetValUnionMap()) {
                optionals.set(6);
            }
            if (struct.isSetUnionMap()) {
                optionals.set(7);
            }
            oprot.writeBitSet(optionals, 8);
            if (struct.isSetIntValue()) {
                oprot.writeI32(struct.intValue);
            }
            if (struct.isSetSmallStruct()) {
                struct.smallStruct.write(oprot);
            }
            if (struct.isSetSimpleUnion()) {
                struct.simpleUnion.write(oprot);
            }
            if (struct.isSetUnionList()) {
                {
                    oprot.writeI32(struct.unionList.size());
                    for (SimpleUnion _iter423 : struct.unionList) {
                        _iter423.write(oprot);
                    }
                }
            }
            if (struct.isSetUnionSet()) {
                {
                    oprot.writeI32(struct.unionSet.size());
                    for (SimpleUnion _iter424 : struct.unionSet) {
                        _iter424.write(oprot);
                    }
                }
            }
            if (struct.isSetKeyUnionMap()) {
                {
                    oprot.writeI32(struct.keyUnionMap.size());
                    for (java.util.Map.Entry<SimpleUnion, java.lang.String> _iter425 : struct.keyUnionMap.entrySet()) {
                        _iter425.getKey().write(oprot);
                        oprot.writeString(_iter425.getValue());
                    }
                }
            }
            if (struct.isSetValUnionMap()) {
                {
                    oprot.writeI32(struct.valUnionMap.size());
                    for (java.util.Map.Entry<java.lang.String, SimpleUnion> _iter426 : struct.valUnionMap.entrySet()) {
                        oprot.writeString(_iter426.getKey());
                        _iter426.getValue().write(oprot);
                    }
                }
            }
            if (struct.isSetUnionMap()) {
                {
                    oprot.writeI32(struct.unionMap.size());
                    for (java.util.Map.Entry<SimpleUnion, SimpleUnion> _iter427 : struct.unionMap.entrySet()) {
                        _iter427.getKey().write(oprot);
                        _iter427.getValue().write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, StructWithUnions struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(8);
            if (incoming.get(0)) {
                struct.intValue = iprot.readI32();
                struct.setIntValueIsSet(true);
            }
            if (incoming.get(1)) {
                struct.smallStruct = new SmallStruct();
                struct.smallStruct.read(iprot);
                struct.setSmallStructIsSet(true);
            }
            if (incoming.get(2)) {
                struct.simpleUnion = new SimpleUnion();
                struct.simpleUnion.read(iprot);
                struct.setSimpleUnionIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list428 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.unionList = new java.util.ArrayList<SimpleUnion>(_list428.size);
                    @org.apache.thrift.annotation.Nullable SimpleUnion _elem429;
                    for (int _i430 = 0; _i430 < _list428.size; ++_i430) {
                        _elem429 = new SimpleUnion();
                        _elem429.read(iprot);
                        struct.unionList.add(_elem429);
                    }
                }
                struct.setUnionListIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TSet _set431 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.unionSet = new java.util.HashSet<SimpleUnion>(2 * _set431.size);
                    @org.apache.thrift.annotation.Nullable SimpleUnion _elem432;
                    for (int _i433 = 0; _i433 < _set431.size; ++_i433) {
                        _elem432 = new SimpleUnion();
                        _elem432.read(iprot);
                        struct.unionSet.add(_elem432);
                    }
                }
                struct.setUnionSetIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TMap _map434 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING);
                    struct.keyUnionMap = new java.util.HashMap<SimpleUnion, java.lang.String>(2 * _map434.size);
                    @org.apache.thrift.annotation.Nullable SimpleUnion _key435;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val436;
                    for (int _i437 = 0; _i437 < _map434.size; ++_i437) {
                        _key435 = new SimpleUnion();
                        _key435.read(iprot);
                        _val436 = iprot.readString();
                        struct.keyUnionMap.put(_key435, _val436);
                    }
                }
                struct.setKeyUnionMapIsSet(true);
            }
            if (incoming.get(6)) {
                {
                    org.apache.thrift.protocol.TMap _map438 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT);
                    struct.valUnionMap = new java.util.HashMap<java.lang.String, SimpleUnion>(2 * _map438.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key439;
                    @org.apache.thrift.annotation.Nullable SimpleUnion _val440;
                    for (int _i441 = 0; _i441 < _map438.size; ++_i441) {
                        _key439 = iprot.readString();
                        _val440 = new SimpleUnion();
                        _val440.read(iprot);
                        struct.valUnionMap.put(_key439, _val440);
                    }
                }
                struct.setValUnionMapIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TMap _map442 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT);
                    struct.unionMap = new java.util.HashMap<SimpleUnion, SimpleUnion>(2 * _map442.size);
                    @org.apache.thrift.annotation.Nullable SimpleUnion _key443;
                    @org.apache.thrift.annotation.Nullable SimpleUnion _val444;
                    for (int _i445 = 0; _i445 < _map442.size; ++_i445) {
                        _key443 = new SimpleUnion();
                        _key443.read(iprot);
                        _val444 = new SimpleUnion();
                        _val444.read(iprot);
                        struct.unionMap.put(_key443, _val444);
                    }
                }
                struct.setUnionMapIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

