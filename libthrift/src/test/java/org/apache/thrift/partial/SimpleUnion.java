/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.thrift.partial;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SimpleUnion extends org.apache.thrift.TUnion<SimpleUnion, SimpleUnion._Fields> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleUnion");
    private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short) 2);

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        INT_VALUE((short) 1, "intValue"),
        STRING_VALUE((short) 2, "stringValue");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // INT_VALUE
                    return INT_VALUE;
                case 2: // STRING_VALUE
                    return STRING_VALUE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleUnion.class, metaDataMap);
    }

    public SimpleUnion() {
        super();
    }

    public SimpleUnion(_Fields setField, java.lang.Object value) {
        super(setField, value);
    }

    public SimpleUnion(SimpleUnion other) {
        super(other);
    }

    @Override
    public SimpleUnion deepCopy() {
        return new SimpleUnion(this);
    }

    public static SimpleUnion intValue(int value) {
        SimpleUnion x = new SimpleUnion();
        x.setIntValue(value);
        return x;
    }

    public static SimpleUnion stringValue(java.lang.String value) {
        SimpleUnion x = new SimpleUnion();
        x.setStringValue(value);
        return x;
    }


    @Override
    protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
        switch (setField) {
            case INT_VALUE:
                if (value instanceof java.lang.Integer) {
                    break;
                }
                throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'intValue', but got " + value.getClass().getSimpleName());
            case STRING_VALUE:
                if (value instanceof java.lang.String) {
                    break;
                }
                throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'stringValue', but got " + value.getClass().getSimpleName());
            default:
                throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
        }
    }

    @Override
    protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
        _Fields setField = _Fields.findByThriftId(field.id);
        if (setField != null) {
            switch (setField) {
                case INT_VALUE:
                    if (field.type == INT_VALUE_FIELD_DESC.type) {
                        java.lang.Integer intValue;
                        intValue = iprot.readI32();
                        return intValue;
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                        return null;
                    }
                case STRING_VALUE:
                    if (field.type == STRING_VALUE_FIELD_DESC.type) {
                        java.lang.String stringValue;
                        stringValue = iprot.readString();
                        return stringValue;
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                        return null;
                    }
                default:
                    throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
            }
        } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
        }
    }

    @Override
    protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        switch (setField_) {
            case INT_VALUE:
                java.lang.Integer intValue = (java.lang.Integer) value_;
                oprot.writeI32(intValue);
                return;
            case STRING_VALUE:
                java.lang.String stringValue = (java.lang.String) value_;
                oprot.writeString(stringValue);
                return;
            default:
                throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
        }
    }

    @Override
    protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
        _Fields setField = _Fields.findByThriftId(fieldID);
        if (setField != null) {
            switch (setField) {
                case INT_VALUE:
                    java.lang.Integer intValue;
                    intValue = iprot.readI32();
                    return intValue;
                case STRING_VALUE:
                    java.lang.String stringValue;
                    stringValue = iprot.readString();
                    return stringValue;
                default:
                    throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
            }
        } else {
            throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
        }
    }

    @Override
    protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        switch (setField_) {
            case INT_VALUE:
                java.lang.Integer intValue = (java.lang.Integer) value_;
                oprot.writeI32(intValue);
                return;
            case STRING_VALUE:
                java.lang.String stringValue = (java.lang.String) value_;
                oprot.writeString(stringValue);
                return;
            default:
                throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
        }
    }

    @Override
    protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
        switch (setField) {
            case INT_VALUE:
                return INT_VALUE_FIELD_DESC;
            case STRING_VALUE:
                return STRING_VALUE_FIELD_DESC;
            default:
                throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
        }
    }

    @Override
    protected org.apache.thrift.protocol.TStruct getStructDesc() {
        return STRUCT_DESC;
    }

    @Override
    protected _Fields enumForId(short id) {
        return _Fields.findByThriftIdOrThrow(id);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }


    public int getIntValue() {
        if (getSetField() == _Fields.INT_VALUE) {
            return (java.lang.Integer) getFieldValue();
        } else {
            throw new java.lang.RuntimeException("Cannot get field 'intValue' because union is currently set to " + getFieldDesc(getSetField()).name);
        }
    }

    public void setIntValue(int value) {
        setField_ = _Fields.INT_VALUE;
        value_ = value;
    }

    public java.lang.String getStringValue() {
        if (getSetField() == _Fields.STRING_VALUE) {
            return (java.lang.String) getFieldValue();
        } else {
            throw new java.lang.RuntimeException("Cannot get field 'stringValue' because union is currently set to " + getFieldDesc(getSetField()).name);
        }
    }

    public void setStringValue(java.lang.String value) {
        setField_ = _Fields.STRING_VALUE;
        value_ = java.util.Objects.requireNonNull(value, "_Fields.STRING_VALUE");
    }

    public boolean isSetIntValue() {
        return setField_ == _Fields.INT_VALUE;
    }


    public boolean isSetStringValue() {
        return setField_ == _Fields.STRING_VALUE;
    }


    public boolean equals(java.lang.Object other) {
        if (other instanceof SimpleUnion) {
            return equals((SimpleUnion) other);
        } else {
            return false;
        }
    }

    public boolean equals(SimpleUnion other) {
        return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
    }

    @Override
    public int compareTo(SimpleUnion other) {
        int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
        if (lastComparison == 0) {
            return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
        }
        return lastComparison;
    }


    @Override
    public int hashCode() {
        java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
        list.add(this.getClass().getName());
        org.apache.thrift.TFieldIdEnum setField = getSetField();
        if (setField != null) {
            list.add(setField.getThriftFieldId());
            java.lang.Object value = getFieldValue();
            if (value instanceof org.apache.thrift.TEnum) {
                list.add(((org.apache.thrift.TEnum) getFieldValue()).getValue());
            } else {
                list.add(value);
            }
        }
        return list.hashCode();
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }


    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }


}
