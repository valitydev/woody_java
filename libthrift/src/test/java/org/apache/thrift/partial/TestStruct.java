/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.thrift.partial;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TestStruct implements org.apache.thrift.TBase<TestStruct, TestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TestStruct> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestStruct");

    private static final org.apache.thrift.protocol.TField BYTE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("byteField", org.apache.thrift.protocol.TType.BYTE, (short) 1);
    private static final org.apache.thrift.protocol.TField I16_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Field", org.apache.thrift.protocol.TType.I16, (short) 2);
    private static final org.apache.thrift.protocol.TField I32_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Field", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField I64_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Field", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField DOUBLE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleField", org.apache.thrift.protocol.TType.DOUBLE, (short) 5);
    private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("stringField", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField ENUM_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("enumField", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField BINARY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryField", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField BYTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteList", org.apache.thrift.protocol.TType.LIST, (short) 10);
    private static final org.apache.thrift.protocol.TField I16_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i16List", org.apache.thrift.protocol.TType.LIST, (short) 11);
    private static final org.apache.thrift.protocol.TField I32_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i32List", org.apache.thrift.protocol.TType.LIST, (short) 12);
    private static final org.apache.thrift.protocol.TField I64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i64List", org.apache.thrift.protocol.TType.LIST, (short) 13);
    private static final org.apache.thrift.protocol.TField DOUBLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleList", org.apache.thrift.protocol.TType.LIST, (short) 14);
    private static final org.apache.thrift.protocol.TField STRING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stringList", org.apache.thrift.protocol.TType.LIST, (short) 15);
    private static final org.apache.thrift.protocol.TField ENUM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("enumList", org.apache.thrift.protocol.TType.LIST, (short) 16);
    private static final org.apache.thrift.protocol.TField LIST_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("listList", org.apache.thrift.protocol.TType.LIST, (short) 17);
    private static final org.apache.thrift.protocol.TField SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("setList", org.apache.thrift.protocol.TType.LIST, (short) 18);
    private static final org.apache.thrift.protocol.TField MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mapList", org.apache.thrift.protocol.TType.LIST, (short) 19);
    private static final org.apache.thrift.protocol.TField STRUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("structList", org.apache.thrift.protocol.TType.LIST, (short) 20);
    private static final org.apache.thrift.protocol.TField BINARY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryList", org.apache.thrift.protocol.TType.LIST, (short) 21);
    private static final org.apache.thrift.protocol.TField BYTE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("byteSet", org.apache.thrift.protocol.TType.SET, (short) 30);
    private static final org.apache.thrift.protocol.TField I16_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Set", org.apache.thrift.protocol.TType.SET, (short) 31);
    private static final org.apache.thrift.protocol.TField I32_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Set", org.apache.thrift.protocol.TType.SET, (short) 32);
    private static final org.apache.thrift.protocol.TField I64_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Set", org.apache.thrift.protocol.TType.SET, (short) 33);
    private static final org.apache.thrift.protocol.TField DOUBLE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleSet", org.apache.thrift.protocol.TType.SET, (short) 34);
    private static final org.apache.thrift.protocol.TField STRING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("stringSet", org.apache.thrift.protocol.TType.SET, (short) 35);
    private static final org.apache.thrift.protocol.TField ENUM_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("enumSet", org.apache.thrift.protocol.TType.SET, (short) 36);
    private static final org.apache.thrift.protocol.TField LIST_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("listSet", org.apache.thrift.protocol.TType.SET, (short) 37);
    private static final org.apache.thrift.protocol.TField SET_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("setSet", org.apache.thrift.protocol.TType.SET, (short) 38);
    private static final org.apache.thrift.protocol.TField MAP_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("mapSet", org.apache.thrift.protocol.TType.SET, (short) 39);
    private static final org.apache.thrift.protocol.TField STRUCT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("structSet", org.apache.thrift.protocol.TType.SET, (short) 40);
    private static final org.apache.thrift.protocol.TField BINARY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("binarySet", org.apache.thrift.protocol.TType.SET, (short) 41);
    private static final org.apache.thrift.protocol.TField BYTE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("byteMap", org.apache.thrift.protocol.TType.MAP, (short) 50);
    private static final org.apache.thrift.protocol.TField I16_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Map", org.apache.thrift.protocol.TType.MAP, (short) 51);
    private static final org.apache.thrift.protocol.TField I32_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Map", org.apache.thrift.protocol.TType.MAP, (short) 52);
    private static final org.apache.thrift.protocol.TField I64_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Map", org.apache.thrift.protocol.TType.MAP, (short) 53);
    private static final org.apache.thrift.protocol.TField DOUBLE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleMap", org.apache.thrift.protocol.TType.MAP, (short) 54);
    private static final org.apache.thrift.protocol.TField STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringMap", org.apache.thrift.protocol.TType.MAP, (short) 55);
    private static final org.apache.thrift.protocol.TField ENUM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("enumMap", org.apache.thrift.protocol.TType.MAP, (short) 56);
    private static final org.apache.thrift.protocol.TField LIST_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("listMap", org.apache.thrift.protocol.TType.MAP, (short) 57);
    private static final org.apache.thrift.protocol.TField SET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("setMap", org.apache.thrift.protocol.TType.MAP, (short) 58);
    private static final org.apache.thrift.protocol.TField MAP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mapMap", org.apache.thrift.protocol.TType.MAP, (short) 59);
    private static final org.apache.thrift.protocol.TField STRUCT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("structMap", org.apache.thrift.protocol.TType.MAP, (short) 60);
    private static final org.apache.thrift.protocol.TField BINARY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryMap", org.apache.thrift.protocol.TType.MAP, (short) 61);
    private static final org.apache.thrift.protocol.TField STRUCT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("structField", org.apache.thrift.protocol.TType.STRUCT, (short) 70);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TestStructStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TestStructTupleSchemeFactory();

    public byte byteField; // optional
    public short i16Field; // optional
    public int i32Field; // optional
    public long i64Field; // optional
    public double doubleField; // optional
    public @org.apache.thrift.annotation.Nullable java.lang.String stringField; // optional
    /**
     *
     * @see TstEnum
     */
    public @org.apache.thrift.annotation.Nullable TstEnum enumField; // optional
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binaryField; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> byteList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> i16List; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> i32List; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> i64List; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> doubleList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stringList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<TstEnum> enumList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> listList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Set<java.lang.Integer>> setList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String, java.lang.Integer>> mapList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<SmallStruct> structList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> binaryList; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Byte> byteSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Short> i16Set; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> i32Set; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> i64Set; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Double> doubleSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> stringSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<TstEnum> enumSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.Integer>> listSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.util.Set<java.lang.Integer>> setSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.util.Map<java.lang.String, java.lang.Integer>> mapSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<SmallStruct> structSet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.nio.ByteBuffer> binarySet; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Byte, java.lang.Byte> byteMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Short, java.lang.Short> i16Map; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.Integer> i32Map; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long, java.lang.Long> i64Map; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Double, java.lang.Double> doubleMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> stringMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<TstEnum, TstEnum> enumMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.util.List<java.lang.Integer>> listMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>> setMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> mapMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<SmallStruct, SmallStruct> structMap; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.nio.ByteBuffer> binaryMap; // optional
    public @org.apache.thrift.annotation.Nullable SmallStruct structField; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BYTE_FIELD((short) 1, "byteField"),
        I16_FIELD((short) 2, "i16Field"),
        I32_FIELD((short) 3, "i32Field"),
        I64_FIELD((short) 4, "i64Field"),
        DOUBLE_FIELD((short) 5, "doubleField"),
        STRING_FIELD((short) 6, "stringField"),
        /**
         *
         * @see TstEnum
         */
        ENUM_FIELD((short) 7, "enumField"),
        BINARY_FIELD((short) 8, "binaryField"),
        BYTE_LIST((short) 10, "byteList"),
        I16_LIST((short) 11, "i16List"),
        I32_LIST((short) 12, "i32List"),
        I64_LIST((short) 13, "i64List"),
        DOUBLE_LIST((short) 14, "doubleList"),
        STRING_LIST((short) 15, "stringList"),
        ENUM_LIST((short) 16, "enumList"),
        LIST_LIST((short) 17, "listList"),
        SET_LIST((short) 18, "setList"),
        MAP_LIST((short) 19, "mapList"),
        STRUCT_LIST((short) 20, "structList"),
        BINARY_LIST((short) 21, "binaryList"),
        BYTE_SET((short) 30, "byteSet"),
        I16_SET((short) 31, "i16Set"),
        I32_SET((short) 32, "i32Set"),
        I64_SET((short) 33, "i64Set"),
        DOUBLE_SET((short) 34, "doubleSet"),
        STRING_SET((short) 35, "stringSet"),
        ENUM_SET((short) 36, "enumSet"),
        LIST_SET((short) 37, "listSet"),
        SET_SET((short) 38, "setSet"),
        MAP_SET((short) 39, "mapSet"),
        STRUCT_SET((short) 40, "structSet"),
        BINARY_SET((short) 41, "binarySet"),
        BYTE_MAP((short) 50, "byteMap"),
        I16_MAP((short) 51, "i16Map"),
        I32_MAP((short) 52, "i32Map"),
        I64_MAP((short) 53, "i64Map"),
        DOUBLE_MAP((short) 54, "doubleMap"),
        STRING_MAP((short) 55, "stringMap"),
        ENUM_MAP((short) 56, "enumMap"),
        LIST_MAP((short) 57, "listMap"),
        SET_MAP((short) 58, "setMap"),
        MAP_MAP((short) 59, "mapMap"),
        STRUCT_MAP((short) 60, "structMap"),
        BINARY_MAP((short) 61, "binaryMap"),
        STRUCT_FIELD((short) 70, "structField");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // BYTE_FIELD
                    return BYTE_FIELD;
                case 2: // I16_FIELD
                    return I16_FIELD;
                case 3: // I32_FIELD
                    return I32_FIELD;
                case 4: // I64_FIELD
                    return I64_FIELD;
                case 5: // DOUBLE_FIELD
                    return DOUBLE_FIELD;
                case 6: // STRING_FIELD
                    return STRING_FIELD;
                case 7: // ENUM_FIELD
                    return ENUM_FIELD;
                case 8: // BINARY_FIELD
                    return BINARY_FIELD;
                case 10: // BYTE_LIST
                    return BYTE_LIST;
                case 11: // I16_LIST
                    return I16_LIST;
                case 12: // I32_LIST
                    return I32_LIST;
                case 13: // I64_LIST
                    return I64_LIST;
                case 14: // DOUBLE_LIST
                    return DOUBLE_LIST;
                case 15: // STRING_LIST
                    return STRING_LIST;
                case 16: // ENUM_LIST
                    return ENUM_LIST;
                case 17: // LIST_LIST
                    return LIST_LIST;
                case 18: // SET_LIST
                    return SET_LIST;
                case 19: // MAP_LIST
                    return MAP_LIST;
                case 20: // STRUCT_LIST
                    return STRUCT_LIST;
                case 21: // BINARY_LIST
                    return BINARY_LIST;
                case 30: // BYTE_SET
                    return BYTE_SET;
                case 31: // I16_SET
                    return I16_SET;
                case 32: // I32_SET
                    return I32_SET;
                case 33: // I64_SET
                    return I64_SET;
                case 34: // DOUBLE_SET
                    return DOUBLE_SET;
                case 35: // STRING_SET
                    return STRING_SET;
                case 36: // ENUM_SET
                    return ENUM_SET;
                case 37: // LIST_SET
                    return LIST_SET;
                case 38: // SET_SET
                    return SET_SET;
                case 39: // MAP_SET
                    return MAP_SET;
                case 40: // STRUCT_SET
                    return STRUCT_SET;
                case 41: // BINARY_SET
                    return BINARY_SET;
                case 50: // BYTE_MAP
                    return BYTE_MAP;
                case 51: // I16_MAP
                    return I16_MAP;
                case 52: // I32_MAP
                    return I32_MAP;
                case 53: // I64_MAP
                    return I64_MAP;
                case 54: // DOUBLE_MAP
                    return DOUBLE_MAP;
                case 55: // STRING_MAP
                    return STRING_MAP;
                case 56: // ENUM_MAP
                    return ENUM_MAP;
                case 57: // LIST_MAP
                    return LIST_MAP;
                case 58: // SET_MAP
                    return SET_MAP;
                case 59: // MAP_MAP
                    return MAP_MAP;
                case 60: // STRUCT_MAP
                    return STRUCT_MAP;
                case 61: // BINARY_MAP
                    return BINARY_MAP;
                case 70: // STRUCT_FIELD
                    return STRUCT_FIELD;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __BYTEFIELD_ISSET_ID = 0;
    private static final int __I16FIELD_ISSET_ID = 1;
    private static final int __I32FIELD_ISSET_ID = 2;
    private static final int __I64FIELD_ISSET_ID = 3;
    private static final int __DOUBLEFIELD_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.BYTE_FIELD, _Fields.I16_FIELD, _Fields.I32_FIELD, _Fields.I64_FIELD, _Fields.DOUBLE_FIELD, _Fields.STRING_FIELD, _Fields.ENUM_FIELD, _Fields.BINARY_FIELD, _Fields.BYTE_LIST, _Fields.I16_LIST, _Fields.I32_LIST, _Fields.I64_LIST, _Fields.DOUBLE_LIST, _Fields.STRING_LIST, _Fields.ENUM_LIST, _Fields.LIST_LIST, _Fields.SET_LIST, _Fields.MAP_LIST, _Fields.STRUCT_LIST, _Fields.BINARY_LIST, _Fields.BYTE_SET, _Fields.I16_SET, _Fields.I32_SET, _Fields.I64_SET, _Fields.DOUBLE_SET, _Fields.STRING_SET, _Fields.ENUM_SET, _Fields.LIST_SET, _Fields.SET_SET, _Fields.MAP_SET, _Fields.STRUCT_SET, _Fields.BINARY_SET, _Fields.BYTE_MAP, _Fields.I16_MAP, _Fields.I32_MAP, _Fields.I64_MAP, _Fields.DOUBLE_MAP, _Fields.STRING_MAP, _Fields.ENUM_MAP, _Fields.LIST_MAP, _Fields.SET_MAP, _Fields.MAP_MAP, _Fields.STRUCT_MAP, _Fields.BINARY_MAP, _Fields.STRUCT_FIELD};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BYTE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("byteField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
        tmpMap.put(_Fields.I16_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i16Field", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
        tmpMap.put(_Fields.I32_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i32Field", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.I64_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i64Field", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DOUBLE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("doubleField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("stringField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ENUM_FIELD, new org.apache.thrift.meta_data.FieldMetaData("enumField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TstEnum.class)));
        tmpMap.put(_Fields.BINARY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("binaryField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        tmpMap.put(_Fields.BYTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
        tmpMap.put(_Fields.I16_LIST, new org.apache.thrift.meta_data.FieldMetaData("i16List", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
        tmpMap.put(_Fields.I32_LIST, new org.apache.thrift.meta_data.FieldMetaData("i32List", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        tmpMap.put(_Fields.I64_LIST, new org.apache.thrift.meta_data.FieldMetaData("i64List", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        tmpMap.put(_Fields.DOUBLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("doubleList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
        tmpMap.put(_Fields.STRING_LIST, new org.apache.thrift.meta_data.FieldMetaData("stringList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.ENUM_LIST, new org.apache.thrift.meta_data.FieldMetaData("enumList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TstEnum.class))));
        tmpMap.put(_Fields.LIST_LIST, new org.apache.thrift.meta_data.FieldMetaData("listList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("setList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("mapList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.STRUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("structList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallStruct.class))));
        tmpMap.put(_Fields.BINARY_LIST, new org.apache.thrift.meta_data.FieldMetaData("binaryList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true))));
        tmpMap.put(_Fields.BYTE_SET, new org.apache.thrift.meta_data.FieldMetaData("byteSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
        tmpMap.put(_Fields.I16_SET, new org.apache.thrift.meta_data.FieldMetaData("i16Set", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
        tmpMap.put(_Fields.I32_SET, new org.apache.thrift.meta_data.FieldMetaData("i32Set", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        tmpMap.put(_Fields.I64_SET, new org.apache.thrift.meta_data.FieldMetaData("i64Set", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        tmpMap.put(_Fields.DOUBLE_SET, new org.apache.thrift.meta_data.FieldMetaData("doubleSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
        tmpMap.put(_Fields.STRING_SET, new org.apache.thrift.meta_data.FieldMetaData("stringSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.ENUM_SET, new org.apache.thrift.meta_data.FieldMetaData("enumSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TstEnum.class))));
        tmpMap.put(_Fields.LIST_SET, new org.apache.thrift.meta_data.FieldMetaData("listSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.SET_SET, new org.apache.thrift.meta_data.FieldMetaData("setSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.MAP_SET, new org.apache.thrift.meta_data.FieldMetaData("mapSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.STRUCT_SET, new org.apache.thrift.meta_data.FieldMetaData("structSet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallStruct.class))));
        tmpMap.put(_Fields.BINARY_SET, new org.apache.thrift.meta_data.FieldMetaData("binarySet", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true))));
        tmpMap.put(_Fields.BYTE_MAP, new org.apache.thrift.meta_data.FieldMetaData("byteMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
        tmpMap.put(_Fields.I16_MAP, new org.apache.thrift.meta_data.FieldMetaData("i16Map", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
        tmpMap.put(_Fields.I32_MAP, new org.apache.thrift.meta_data.FieldMetaData("i32Map", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        tmpMap.put(_Fields.I64_MAP, new org.apache.thrift.meta_data.FieldMetaData("i64Map", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        tmpMap.put(_Fields.DOUBLE_MAP, new org.apache.thrift.meta_data.FieldMetaData("doubleMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
        tmpMap.put(_Fields.STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.ENUM_MAP, new org.apache.thrift.meta_data.FieldMetaData("enumMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TstEnum.class),
                        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TstEnum.class))));
        tmpMap.put(_Fields.LIST_MAP, new org.apache.thrift.meta_data.FieldMetaData("listMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.SET_MAP, new org.apache.thrift.meta_data.FieldMetaData("setMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.MAP_MAP, new org.apache.thrift.meta_data.FieldMetaData("mapMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
        tmpMap.put(_Fields.STRUCT_MAP, new org.apache.thrift.meta_data.FieldMetaData("structMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallStruct.class),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallStruct.class))));
        tmpMap.put(_Fields.BINARY_MAP, new org.apache.thrift.meta_data.FieldMetaData("binaryMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true))));
        tmpMap.put(_Fields.STRUCT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("structField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallStruct.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestStruct.class, metaDataMap);
    }

    public TestStruct() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestStruct(TestStruct other) {
        __isset_bitfield = other.__isset_bitfield;
        this.byteField = other.byteField;
        this.i16Field = other.i16Field;
        this.i32Field = other.i32Field;
        this.i64Field = other.i64Field;
        this.doubleField = other.doubleField;
        if (other.isSetStringField()) {
            this.stringField = other.stringField;
        }
        if (other.isSetEnumField()) {
            this.enumField = other.enumField;
        }
        if (other.isSetBinaryField()) {
            this.binaryField = org.apache.thrift.TBaseHelper.copyBinary(other.binaryField);
        }
        if (other.isSetByteList()) {
            java.util.List<java.lang.Byte> __this__byteList = new java.util.ArrayList<java.lang.Byte>(other.byteList);
            this.byteList = __this__byteList;
        }
        if (other.isSetI16List()) {
            java.util.List<java.lang.Short> __this__i16List = new java.util.ArrayList<java.lang.Short>(other.i16List);
            this.i16List = __this__i16List;
        }
        if (other.isSetI32List()) {
            java.util.List<java.lang.Integer> __this__i32List = new java.util.ArrayList<java.lang.Integer>(other.i32List);
            this.i32List = __this__i32List;
        }
        if (other.isSetI64List()) {
            java.util.List<java.lang.Long> __this__i64List = new java.util.ArrayList<java.lang.Long>(other.i64List);
            this.i64List = __this__i64List;
        }
        if (other.isSetDoubleList()) {
            java.util.List<java.lang.Double> __this__doubleList = new java.util.ArrayList<java.lang.Double>(other.doubleList);
            this.doubleList = __this__doubleList;
        }
        if (other.isSetStringList()) {
            java.util.List<java.lang.String> __this__stringList = new java.util.ArrayList<java.lang.String>(other.stringList);
            this.stringList = __this__stringList;
        }
        if (other.isSetEnumList()) {
            java.util.List<TstEnum> __this__enumList = new java.util.ArrayList<TstEnum>(other.enumList.size());
            for (TstEnum other_element : other.enumList) {
                __this__enumList.add(other_element);
            }
            this.enumList = __this__enumList;
        }
        if (other.isSetListList()) {
            java.util.List<java.util.List<java.lang.Integer>> __this__listList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.listList.size());
            for (java.util.List<java.lang.Integer> other_element : other.listList) {
                java.util.List<java.lang.Integer> __this__listList_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
                __this__listList.add(__this__listList_copy);
            }
            this.listList = __this__listList;
        }
        if (other.isSetSetList()) {
            java.util.List<java.util.Set<java.lang.Integer>> __this__setList = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(other.setList.size());
            for (java.util.Set<java.lang.Integer> other_element : other.setList) {
                java.util.Set<java.lang.Integer> __this__setList_copy = new java.util.HashSet<java.lang.Integer>(other_element);
                __this__setList.add(__this__setList_copy);
            }
            this.setList = __this__setList;
        }
        if (other.isSetMapList()) {
            java.util.List<java.util.Map<java.lang.String, java.lang.Integer>> __this__mapList = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Integer>>(other.mapList.size());
            for (java.util.Map<java.lang.String, java.lang.Integer> other_element : other.mapList) {
                java.util.Map<java.lang.String, java.lang.Integer> __this__mapList_copy = new java.util.HashMap<java.lang.String, java.lang.Integer>(other_element);
                __this__mapList.add(__this__mapList_copy);
            }
            this.mapList = __this__mapList;
        }
        if (other.isSetStructList()) {
            java.util.List<SmallStruct> __this__structList = new java.util.ArrayList<SmallStruct>(other.structList.size());
            for (SmallStruct other_element : other.structList) {
                __this__structList.add(new SmallStruct(other_element));
            }
            this.structList = __this__structList;
        }
        if (other.isSetBinaryList()) {
            java.util.List<java.nio.ByteBuffer> __this__binaryList = new java.util.ArrayList<java.nio.ByteBuffer>(other.binaryList);
            this.binaryList = __this__binaryList;
        }
        if (other.isSetByteSet()) {
            java.util.Set<java.lang.Byte> __this__byteSet = new java.util.HashSet<java.lang.Byte>(other.byteSet);
            this.byteSet = __this__byteSet;
        }
        if (other.isSetI16Set()) {
            java.util.Set<java.lang.Short> __this__i16Set = new java.util.HashSet<java.lang.Short>(other.i16Set);
            this.i16Set = __this__i16Set;
        }
        if (other.isSetI32Set()) {
            java.util.Set<java.lang.Integer> __this__i32Set = new java.util.HashSet<java.lang.Integer>(other.i32Set);
            this.i32Set = __this__i32Set;
        }
        if (other.isSetI64Set()) {
            java.util.Set<java.lang.Long> __this__i64Set = new java.util.HashSet<java.lang.Long>(other.i64Set);
            this.i64Set = __this__i64Set;
        }
        if (other.isSetDoubleSet()) {
            java.util.Set<java.lang.Double> __this__doubleSet = new java.util.HashSet<java.lang.Double>(other.doubleSet);
            this.doubleSet = __this__doubleSet;
        }
        if (other.isSetStringSet()) {
            java.util.Set<java.lang.String> __this__stringSet = new java.util.HashSet<java.lang.String>(other.stringSet);
            this.stringSet = __this__stringSet;
        }
        if (other.isSetEnumSet()) {
            java.util.Set<TstEnum> __this__enumSet = java.util.EnumSet.noneOf(TstEnum.class);
            for (TstEnum other_element : other.enumSet) {
                __this__enumSet.add(other_element);
            }
            this.enumSet = __this__enumSet;
        }
        if (other.isSetListSet()) {
            java.util.Set<java.util.List<java.lang.Integer>> __this__listSet = new java.util.HashSet<java.util.List<java.lang.Integer>>(other.listSet.size());
            for (java.util.List<java.lang.Integer> other_element : other.listSet) {
                java.util.List<java.lang.Integer> __this__listSet_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
                __this__listSet.add(__this__listSet_copy);
            }
            this.listSet = __this__listSet;
        }
        if (other.isSetSetSet()) {
            java.util.Set<java.util.Set<java.lang.Integer>> __this__setSet = new java.util.HashSet<java.util.Set<java.lang.Integer>>(other.setSet.size());
            for (java.util.Set<java.lang.Integer> other_element : other.setSet) {
                java.util.Set<java.lang.Integer> __this__setSet_copy = new java.util.HashSet<java.lang.Integer>(other_element);
                __this__setSet.add(__this__setSet_copy);
            }
            this.setSet = __this__setSet;
        }
        if (other.isSetMapSet()) {
            java.util.Set<java.util.Map<java.lang.String, java.lang.Integer>> __this__mapSet = new java.util.HashSet<java.util.Map<java.lang.String, java.lang.Integer>>(other.mapSet.size());
            for (java.util.Map<java.lang.String, java.lang.Integer> other_element : other.mapSet) {
                java.util.Map<java.lang.String, java.lang.Integer> __this__mapSet_copy = new java.util.HashMap<java.lang.String, java.lang.Integer>(other_element);
                __this__mapSet.add(__this__mapSet_copy);
            }
            this.mapSet = __this__mapSet;
        }
        if (other.isSetStructSet()) {
            java.util.Set<SmallStruct> __this__structSet = new java.util.HashSet<SmallStruct>(other.structSet.size());
            for (SmallStruct other_element : other.structSet) {
                __this__structSet.add(new SmallStruct(other_element));
            }
            this.structSet = __this__structSet;
        }
        if (other.isSetBinarySet()) {
            java.util.Set<java.nio.ByteBuffer> __this__binarySet = new java.util.HashSet<java.nio.ByteBuffer>(other.binarySet);
            this.binarySet = __this__binarySet;
        }
        if (other.isSetByteMap()) {
            java.util.Map<java.lang.Byte, java.lang.Byte> __this__byteMap = new java.util.HashMap<java.lang.Byte, java.lang.Byte>(other.byteMap);
            this.byteMap = __this__byteMap;
        }
        if (other.isSetI16Map()) {
            java.util.Map<java.lang.Short, java.lang.Short> __this__i16Map = new java.util.HashMap<java.lang.Short, java.lang.Short>(other.i16Map);
            this.i16Map = __this__i16Map;
        }
        if (other.isSetI32Map()) {
            java.util.Map<java.lang.Integer, java.lang.Integer> __this__i32Map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(other.i32Map);
            this.i32Map = __this__i32Map;
        }
        if (other.isSetI64Map()) {
            java.util.Map<java.lang.Long, java.lang.Long> __this__i64Map = new java.util.HashMap<java.lang.Long, java.lang.Long>(other.i64Map);
            this.i64Map = __this__i64Map;
        }
        if (other.isSetDoubleMap()) {
            java.util.Map<java.lang.Double, java.lang.Double> __this__doubleMap = new java.util.HashMap<java.lang.Double, java.lang.Double>(other.doubleMap);
            this.doubleMap = __this__doubleMap;
        }
        if (other.isSetStringMap()) {
            java.util.Map<java.lang.String, java.lang.String> __this__stringMap = new java.util.HashMap<java.lang.String, java.lang.String>(other.stringMap);
            this.stringMap = __this__stringMap;
        }
        if (other.isSetEnumMap()) {
            java.util.Map<TstEnum, TstEnum> __this__enumMap = new java.util.EnumMap<TstEnum, TstEnum>(TstEnum.class);
            for (java.util.Map.Entry<TstEnum, TstEnum> other_element : other.enumMap.entrySet()) {

                TstEnum other_element_key = other_element.getKey();
                TstEnum other_element_value = other_element.getValue();

                TstEnum __this__enumMap_copy_key = other_element_key;

                TstEnum __this__enumMap_copy_value = other_element_value;

                __this__enumMap.put(__this__enumMap_copy_key, __this__enumMap_copy_value);
            }
            this.enumMap = __this__enumMap;
        }
        if (other.isSetListMap()) {
            java.util.Map<java.lang.Integer, java.util.List<java.lang.Integer>> __this__listMap = new java.util.HashMap<java.lang.Integer, java.util.List<java.lang.Integer>>(other.listMap.size());
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> other_element : other.listMap.entrySet()) {

                java.lang.Integer other_element_key = other_element.getKey();
                java.util.List<java.lang.Integer> other_element_value = other_element.getValue();

                java.lang.Integer __this__listMap_copy_key = other_element_key;

                java.util.List<java.lang.Integer> __this__listMap_copy_value = new java.util.ArrayList<java.lang.Integer>(other_element_value);

                __this__listMap.put(__this__listMap_copy_key, __this__listMap_copy_value);
            }
            this.listMap = __this__listMap;
        }
        if (other.isSetSetMap()) {
            java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>> __this__setMap = new java.util.HashMap<java.lang.Integer, java.util.Set<java.lang.Integer>>(other.setMap.size());
            for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.lang.Integer>> other_element : other.setMap.entrySet()) {

                java.lang.Integer other_element_key = other_element.getKey();
                java.util.Set<java.lang.Integer> other_element_value = other_element.getValue();

                java.lang.Integer __this__setMap_copy_key = other_element_key;

                java.util.Set<java.lang.Integer> __this__setMap_copy_value = new java.util.HashSet<java.lang.Integer>(other_element_value);

                __this__setMap.put(__this__setMap_copy_key, __this__setMap_copy_value);
            }
            this.setMap = __this__setMap;
        }
        if (other.isSetMapMap()) {
            java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> __this__mapMap = new java.util.HashMap<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>>(other.mapMap.size());
            for (java.util.Map.Entry<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> other_element : other.mapMap.entrySet()) {

                java.lang.Integer other_element_key = other_element.getKey();
                java.util.Map<java.lang.Integer, java.lang.Integer> other_element_value = other_element.getValue();

                java.lang.Integer __this__mapMap_copy_key = other_element_key;

                java.util.Map<java.lang.Integer, java.lang.Integer> __this__mapMap_copy_value = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(other_element_value);

                __this__mapMap.put(__this__mapMap_copy_key, __this__mapMap_copy_value);
            }
            this.mapMap = __this__mapMap;
        }
        if (other.isSetStructMap()) {
            java.util.Map<SmallStruct, SmallStruct> __this__structMap = new java.util.HashMap<SmallStruct, SmallStruct>(other.structMap.size());
            for (java.util.Map.Entry<SmallStruct, SmallStruct> other_element : other.structMap.entrySet()) {

                SmallStruct other_element_key = other_element.getKey();
                SmallStruct other_element_value = other_element.getValue();

                SmallStruct __this__structMap_copy_key = new SmallStruct(other_element_key);

                SmallStruct __this__structMap_copy_value = new SmallStruct(other_element_value);

                __this__structMap.put(__this__structMap_copy_key, __this__structMap_copy_value);
            }
            this.structMap = __this__structMap;
        }
        if (other.isSetBinaryMap()) {
            java.util.Map<java.lang.Integer, java.nio.ByteBuffer> __this__binaryMap = new java.util.HashMap<java.lang.Integer, java.nio.ByteBuffer>(other.binaryMap);
            this.binaryMap = __this__binaryMap;
        }
        if (other.isSetStructField()) {
            this.structField = new SmallStruct(other.structField);
        }
    }

    @Override
    public TestStruct deepCopy() {
        return new TestStruct(this);
    }

    @Override
    public void clear() {
        setByteFieldIsSet(false);
        this.byteField = 0;
        setI16FieldIsSet(false);
        this.i16Field = 0;
        setI32FieldIsSet(false);
        this.i32Field = 0;
        setI64FieldIsSet(false);
        this.i64Field = 0;
        setDoubleFieldIsSet(false);
        this.doubleField = 0.0;
        this.stringField = null;
        this.enumField = null;
        this.binaryField = null;
        this.byteList = null;
        this.i16List = null;
        this.i32List = null;
        this.i64List = null;
        this.doubleList = null;
        this.stringList = null;
        this.enumList = null;
        this.listList = null;
        this.setList = null;
        this.mapList = null;
        this.structList = null;
        this.binaryList = null;
        this.byteSet = null;
        this.i16Set = null;
        this.i32Set = null;
        this.i64Set = null;
        this.doubleSet = null;
        this.stringSet = null;
        this.enumSet = null;
        this.listSet = null;
        this.setSet = null;
        this.mapSet = null;
        this.structSet = null;
        this.binarySet = null;
        this.byteMap = null;
        this.i16Map = null;
        this.i32Map = null;
        this.i64Map = null;
        this.doubleMap = null;
        this.stringMap = null;
        this.enumMap = null;
        this.listMap = null;
        this.setMap = null;
        this.mapMap = null;
        this.structMap = null;
        this.binaryMap = null;
        this.structField = null;
    }

    public byte getByteField() {
        return this.byteField;
    }

    public TestStruct setByteField(byte byteField) {
        this.byteField = byteField;
        setByteFieldIsSet(true);
        return this;
    }

    public void unsetByteField() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTEFIELD_ISSET_ID);
    }

    /** Returns true if field byteField is set (has been assigned a value) and false otherwise */
    public boolean isSetByteField() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTEFIELD_ISSET_ID);
    }

    public void setByteFieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTEFIELD_ISSET_ID, value);
    }

    public short getI16Field() {
        return this.i16Field;
    }

    public TestStruct setI16Field(short i16Field) {
        this.i16Field = i16Field;
        setI16FieldIsSet(true);
        return this;
    }

    public void unsetI16Field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I16FIELD_ISSET_ID);
    }

    /** Returns true if field i16Field is set (has been assigned a value) and false otherwise */
    public boolean isSetI16Field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I16FIELD_ISSET_ID);
    }

    public void setI16FieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I16FIELD_ISSET_ID, value);
    }

    public int getI32Field() {
        return this.i32Field;
    }

    public TestStruct setI32Field(int i32Field) {
        this.i32Field = i32Field;
        setI32FieldIsSet(true);
        return this;
    }

    public void unsetI32Field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I32FIELD_ISSET_ID);
    }

    /** Returns true if field i32Field is set (has been assigned a value) and false otherwise */
    public boolean isSetI32Field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I32FIELD_ISSET_ID);
    }

    public void setI32FieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I32FIELD_ISSET_ID, value);
    }

    public long getI64Field() {
        return this.i64Field;
    }

    public TestStruct setI64Field(long i64Field) {
        this.i64Field = i64Field;
        setI64FieldIsSet(true);
        return this;
    }

    public void unsetI64Field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I64FIELD_ISSET_ID);
    }

    /** Returns true if field i64Field is set (has been assigned a value) and false otherwise */
    public boolean isSetI64Field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I64FIELD_ISSET_ID);
    }

    public void setI64FieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I64FIELD_ISSET_ID, value);
    }

    public double getDoubleField() {
        return this.doubleField;
    }

    public TestStruct setDoubleField(double doubleField) {
        this.doubleField = doubleField;
        setDoubleFieldIsSet(true);
        return this;
    }

    public void unsetDoubleField() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID);
    }

    /** Returns true if field doubleField is set (has been assigned a value) and false otherwise */
    public boolean isSetDoubleField() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID);
    }

    public void setDoubleFieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStringField() {
        return this.stringField;
    }

    public TestStruct setStringField(@org.apache.thrift.annotation.Nullable java.lang.String stringField) {
        this.stringField = stringField;
        return this;
    }

    public void unsetStringField() {
        this.stringField = null;
    }

    /** Returns true if field stringField is set (has been assigned a value) and false otherwise */
    public boolean isSetStringField() {
        return this.stringField != null;
    }

    public void setStringFieldIsSet(boolean value) {
        if (!value) {
            this.stringField = null;
        }
    }

    /**
     *
     * @see TstEnum
     */
    @org.apache.thrift.annotation.Nullable
    public TstEnum getEnumField() {
        return this.enumField;
    }

    /**
     *
     * @see TstEnum
     */
    public TestStruct setEnumField(@org.apache.thrift.annotation.Nullable TstEnum enumField) {
        this.enumField = enumField;
        return this;
    }

    public void unsetEnumField() {
        this.enumField = null;
    }

    /** Returns true if field enumField is set (has been assigned a value) and false otherwise */
    public boolean isSetEnumField() {
        return this.enumField != null;
    }

    public void setEnumFieldIsSet(boolean value) {
        if (!value) {
            this.enumField = null;
        }
    }

    public byte[] getBinaryField() {
        setBinaryField(org.apache.thrift.TBaseHelper.rightSize(binaryField));
        return binaryField == null ? null : binaryField.array();
    }

    public java.nio.ByteBuffer bufferForBinaryField() {
        return org.apache.thrift.TBaseHelper.copyBinary(binaryField);
    }

    public TestStruct setBinaryField(byte[] binaryField) {
        this.binaryField = binaryField == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(binaryField.clone());
        return this;
    }

    public TestStruct setBinaryField(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binaryField) {
        this.binaryField = org.apache.thrift.TBaseHelper.copyBinary(binaryField);
        return this;
    }

    public void unsetBinaryField() {
        this.binaryField = null;
    }

    /** Returns true if field binaryField is set (has been assigned a value) and false otherwise */
    public boolean isSetBinaryField() {
        return this.binaryField != null;
    }

    public void setBinaryFieldIsSet(boolean value) {
        if (!value) {
            this.binaryField = null;
        }
    }

    public int getByteListSize() {
        return (this.byteList == null) ? 0 : this.byteList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Byte> getByteListIterator() {
        return (this.byteList == null) ? null : this.byteList.iterator();
    }

    public void addToByteList(byte elem) {
        if (this.byteList == null) {
            this.byteList = new java.util.ArrayList<java.lang.Byte>();
        }
        this.byteList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Byte> getByteList() {
        return this.byteList;
    }

    public TestStruct setByteList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> byteList) {
        this.byteList = byteList;
        return this;
    }

    public void unsetByteList() {
        this.byteList = null;
    }

    /** Returns true if field byteList is set (has been assigned a value) and false otherwise */
    public boolean isSetByteList() {
        return this.byteList != null;
    }

    public void setByteListIsSet(boolean value) {
        if (!value) {
            this.byteList = null;
        }
    }

    public int getI16ListSize() {
        return (this.i16List == null) ? 0 : this.i16List.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Short> getI16ListIterator() {
        return (this.i16List == null) ? null : this.i16List.iterator();
    }

    public void addToI16List(short elem) {
        if (this.i16List == null) {
            this.i16List = new java.util.ArrayList<java.lang.Short>();
        }
        this.i16List.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Short> getI16List() {
        return this.i16List;
    }

    public TestStruct setI16List(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> i16List) {
        this.i16List = i16List;
        return this;
    }

    public void unsetI16List() {
        this.i16List = null;
    }

    /** Returns true if field i16List is set (has been assigned a value) and false otherwise */
    public boolean isSetI16List() {
        return this.i16List != null;
    }

    public void setI16ListIsSet(boolean value) {
        if (!value) {
            this.i16List = null;
        }
    }

    public int getI32ListSize() {
        return (this.i32List == null) ? 0 : this.i32List.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Integer> getI32ListIterator() {
        return (this.i32List == null) ? null : this.i32List.iterator();
    }

    public void addToI32List(int elem) {
        if (this.i32List == null) {
            this.i32List = new java.util.ArrayList<java.lang.Integer>();
        }
        this.i32List.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Integer> getI32List() {
        return this.i32List;
    }

    public TestStruct setI32List(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> i32List) {
        this.i32List = i32List;
        return this;
    }

    public void unsetI32List() {
        this.i32List = null;
    }

    /** Returns true if field i32List is set (has been assigned a value) and false otherwise */
    public boolean isSetI32List() {
        return this.i32List != null;
    }

    public void setI32ListIsSet(boolean value) {
        if (!value) {
            this.i32List = null;
        }
    }

    public int getI64ListSize() {
        return (this.i64List == null) ? 0 : this.i64List.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getI64ListIterator() {
        return (this.i64List == null) ? null : this.i64List.iterator();
    }

    public void addToI64List(long elem) {
        if (this.i64List == null) {
            this.i64List = new java.util.ArrayList<java.lang.Long>();
        }
        this.i64List.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Long> getI64List() {
        return this.i64List;
    }

    public TestStruct setI64List(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> i64List) {
        this.i64List = i64List;
        return this;
    }

    public void unsetI64List() {
        this.i64List = null;
    }

    /** Returns true if field i64List is set (has been assigned a value) and false otherwise */
    public boolean isSetI64List() {
        return this.i64List != null;
    }

    public void setI64ListIsSet(boolean value) {
        if (!value) {
            this.i64List = null;
        }
    }

    public int getDoubleListSize() {
        return (this.doubleList == null) ? 0 : this.doubleList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getDoubleListIterator() {
        return (this.doubleList == null) ? null : this.doubleList.iterator();
    }

    public void addToDoubleList(double elem) {
        if (this.doubleList == null) {
            this.doubleList = new java.util.ArrayList<java.lang.Double>();
        }
        this.doubleList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Double> getDoubleList() {
        return this.doubleList;
    }

    public TestStruct setDoubleList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> doubleList) {
        this.doubleList = doubleList;
        return this;
    }

    public void unsetDoubleList() {
        this.doubleList = null;
    }

    /** Returns true if field doubleList is set (has been assigned a value) and false otherwise */
    public boolean isSetDoubleList() {
        return this.doubleList != null;
    }

    public void setDoubleListIsSet(boolean value) {
        if (!value) {
            this.doubleList = null;
        }
    }

    public int getStringListSize() {
        return (this.stringList == null) ? 0 : this.stringList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getStringListIterator() {
        return (this.stringList == null) ? null : this.stringList.iterator();
    }

    public void addToStringList(java.lang.String elem) {
        if (this.stringList == null) {
            this.stringList = new java.util.ArrayList<java.lang.String>();
        }
        this.stringList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getStringList() {
        return this.stringList;
    }

    public TestStruct setStringList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stringList) {
        this.stringList = stringList;
        return this;
    }

    public void unsetStringList() {
        this.stringList = null;
    }

    /** Returns true if field stringList is set (has been assigned a value) and false otherwise */
    public boolean isSetStringList() {
        return this.stringList != null;
    }

    public void setStringListIsSet(boolean value) {
        if (!value) {
            this.stringList = null;
        }
    }

    public int getEnumListSize() {
        return (this.enumList == null) ? 0 : this.enumList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TstEnum> getEnumListIterator() {
        return (this.enumList == null) ? null : this.enumList.iterator();
    }

    public void addToEnumList(TstEnum elem) {
        if (this.enumList == null) {
            this.enumList = new java.util.ArrayList<TstEnum>();
        }
        this.enumList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<TstEnum> getEnumList() {
        return this.enumList;
    }

    public TestStruct setEnumList(@org.apache.thrift.annotation.Nullable java.util.List<TstEnum> enumList) {
        this.enumList = enumList;
        return this;
    }

    public void unsetEnumList() {
        this.enumList = null;
    }

    /** Returns true if field enumList is set (has been assigned a value) and false otherwise */
    public boolean isSetEnumList() {
        return this.enumList != null;
    }

    public void setEnumListIsSet(boolean value) {
        if (!value) {
            this.enumList = null;
        }
    }

    public int getListListSize() {
        return (this.listList == null) ? 0 : this.listList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Integer>> getListListIterator() {
        return (this.listList == null) ? null : this.listList.iterator();
    }

    public void addToListList(java.util.List<java.lang.Integer> elem) {
        if (this.listList == null) {
            this.listList = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
        }
        this.listList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Integer>> getListList() {
        return this.listList;
    }

    public TestStruct setListList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> listList) {
        this.listList = listList;
        return this;
    }

    public void unsetListList() {
        this.listList = null;
    }

    /** Returns true if field listList is set (has been assigned a value) and false otherwise */
    public boolean isSetListList() {
        return this.listList != null;
    }

    public void setListListIsSet(boolean value) {
        if (!value) {
            this.listList = null;
        }
    }

    public int getSetListSize() {
        return (this.setList == null) ? 0 : this.setList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.Set<java.lang.Integer>> getSetListIterator() {
        return (this.setList == null) ? null : this.setList.iterator();
    }

    public void addToSetList(java.util.Set<java.lang.Integer> elem) {
        if (this.setList == null) {
            this.setList = new java.util.ArrayList<java.util.Set<java.lang.Integer>>();
        }
        this.setList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.Set<java.lang.Integer>> getSetList() {
        return this.setList;
    }

    public TestStruct setSetList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Set<java.lang.Integer>> setList) {
        this.setList = setList;
        return this;
    }

    public void unsetSetList() {
        this.setList = null;
    }

    /** Returns true if field setList is set (has been assigned a value) and false otherwise */
    public boolean isSetSetList() {
        return this.setList != null;
    }

    public void setSetListIsSet(boolean value) {
        if (!value) {
            this.setList = null;
        }
    }

    public int getMapListSize() {
        return (this.mapList == null) ? 0 : this.mapList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.Map<java.lang.String, java.lang.Integer>> getMapListIterator() {
        return (this.mapList == null) ? null : this.mapList.iterator();
    }

    public void addToMapList(java.util.Map<java.lang.String, java.lang.Integer> elem) {
        if (this.mapList == null) {
            this.mapList = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Integer>>();
        }
        this.mapList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.Map<java.lang.String, java.lang.Integer>> getMapList() {
        return this.mapList;
    }

    public TestStruct setMapList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String, java.lang.Integer>> mapList) {
        this.mapList = mapList;
        return this;
    }

    public void unsetMapList() {
        this.mapList = null;
    }

    /** Returns true if field mapList is set (has been assigned a value) and false otherwise */
    public boolean isSetMapList() {
        return this.mapList != null;
    }

    public void setMapListIsSet(boolean value) {
        if (!value) {
            this.mapList = null;
        }
    }

    public int getStructListSize() {
        return (this.structList == null) ? 0 : this.structList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SmallStruct> getStructListIterator() {
        return (this.structList == null) ? null : this.structList.iterator();
    }

    public void addToStructList(SmallStruct elem) {
        if (this.structList == null) {
            this.structList = new java.util.ArrayList<SmallStruct>();
        }
        this.structList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<SmallStruct> getStructList() {
        return this.structList;
    }

    public TestStruct setStructList(@org.apache.thrift.annotation.Nullable java.util.List<SmallStruct> structList) {
        this.structList = structList;
        return this;
    }

    public void unsetStructList() {
        this.structList = null;
    }

    /** Returns true if field structList is set (has been assigned a value) and false otherwise */
    public boolean isSetStructList() {
        return this.structList != null;
    }

    public void setStructListIsSet(boolean value) {
        if (!value) {
            this.structList = null;
        }
    }

    public int getBinaryListSize() {
        return (this.binaryList == null) ? 0 : this.binaryList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getBinaryListIterator() {
        return (this.binaryList == null) ? null : this.binaryList.iterator();
    }

    public void addToBinaryList(java.nio.ByteBuffer elem) {
        if (this.binaryList == null) {
            this.binaryList = new java.util.ArrayList<java.nio.ByteBuffer>();
        }
        this.binaryList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.nio.ByteBuffer> getBinaryList() {
        return this.binaryList;
    }

    public TestStruct setBinaryList(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> binaryList) {
        this.binaryList = binaryList;
        return this;
    }

    public void unsetBinaryList() {
        this.binaryList = null;
    }

    /** Returns true if field binaryList is set (has been assigned a value) and false otherwise */
    public boolean isSetBinaryList() {
        return this.binaryList != null;
    }

    public void setBinaryListIsSet(boolean value) {
        if (!value) {
            this.binaryList = null;
        }
    }

    public int getByteSetSize() {
        return (this.byteSet == null) ? 0 : this.byteSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Byte> getByteSetIterator() {
        return (this.byteSet == null) ? null : this.byteSet.iterator();
    }

    public void addToByteSet(byte elem) {
        if (this.byteSet == null) {
            this.byteSet = new java.util.HashSet<java.lang.Byte>();
        }
        this.byteSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.Byte> getByteSet() {
        return this.byteSet;
    }

    public TestStruct setByteSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Byte> byteSet) {
        this.byteSet = byteSet;
        return this;
    }

    public void unsetByteSet() {
        this.byteSet = null;
    }

    /** Returns true if field byteSet is set (has been assigned a value) and false otherwise */
    public boolean isSetByteSet() {
        return this.byteSet != null;
    }

    public void setByteSetIsSet(boolean value) {
        if (!value) {
            this.byteSet = null;
        }
    }

    public int getI16SetSize() {
        return (this.i16Set == null) ? 0 : this.i16Set.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Short> getI16SetIterator() {
        return (this.i16Set == null) ? null : this.i16Set.iterator();
    }

    public void addToI16Set(short elem) {
        if (this.i16Set == null) {
            this.i16Set = new java.util.HashSet<java.lang.Short>();
        }
        this.i16Set.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.Short> getI16Set() {
        return this.i16Set;
    }

    public TestStruct setI16Set(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Short> i16Set) {
        this.i16Set = i16Set;
        return this;
    }

    public void unsetI16Set() {
        this.i16Set = null;
    }

    /** Returns true if field i16Set is set (has been assigned a value) and false otherwise */
    public boolean isSetI16Set() {
        return this.i16Set != null;
    }

    public void setI16SetIsSet(boolean value) {
        if (!value) {
            this.i16Set = null;
        }
    }

    public int getI32SetSize() {
        return (this.i32Set == null) ? 0 : this.i32Set.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Integer> getI32SetIterator() {
        return (this.i32Set == null) ? null : this.i32Set.iterator();
    }

    public void addToI32Set(int elem) {
        if (this.i32Set == null) {
            this.i32Set = new java.util.HashSet<java.lang.Integer>();
        }
        this.i32Set.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.Integer> getI32Set() {
        return this.i32Set;
    }

    public TestStruct setI32Set(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> i32Set) {
        this.i32Set = i32Set;
        return this;
    }

    public void unsetI32Set() {
        this.i32Set = null;
    }

    /** Returns true if field i32Set is set (has been assigned a value) and false otherwise */
    public boolean isSetI32Set() {
        return this.i32Set != null;
    }

    public void setI32SetIsSet(boolean value) {
        if (!value) {
            this.i32Set = null;
        }
    }

    public int getI64SetSize() {
        return (this.i64Set == null) ? 0 : this.i64Set.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Long> getI64SetIterator() {
        return (this.i64Set == null) ? null : this.i64Set.iterator();
    }

    public void addToI64Set(long elem) {
        if (this.i64Set == null) {
            this.i64Set = new java.util.HashSet<java.lang.Long>();
        }
        this.i64Set.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.Long> getI64Set() {
        return this.i64Set;
    }

    public TestStruct setI64Set(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> i64Set) {
        this.i64Set = i64Set;
        return this;
    }

    public void unsetI64Set() {
        this.i64Set = null;
    }

    /** Returns true if field i64Set is set (has been assigned a value) and false otherwise */
    public boolean isSetI64Set() {
        return this.i64Set != null;
    }

    public void setI64SetIsSet(boolean value) {
        if (!value) {
            this.i64Set = null;
        }
    }

    public int getDoubleSetSize() {
        return (this.doubleSet == null) ? 0 : this.doubleSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getDoubleSetIterator() {
        return (this.doubleSet == null) ? null : this.doubleSet.iterator();
    }

    public void addToDoubleSet(double elem) {
        if (this.doubleSet == null) {
            this.doubleSet = new java.util.HashSet<java.lang.Double>();
        }
        this.doubleSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.Double> getDoubleSet() {
        return this.doubleSet;
    }

    public TestStruct setDoubleSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Double> doubleSet) {
        this.doubleSet = doubleSet;
        return this;
    }

    public void unsetDoubleSet() {
        this.doubleSet = null;
    }

    /** Returns true if field doubleSet is set (has been assigned a value) and false otherwise */
    public boolean isSetDoubleSet() {
        return this.doubleSet != null;
    }

    public void setDoubleSetIsSet(boolean value) {
        if (!value) {
            this.doubleSet = null;
        }
    }

    public int getStringSetSize() {
        return (this.stringSet == null) ? 0 : this.stringSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getStringSetIterator() {
        return (this.stringSet == null) ? null : this.stringSet.iterator();
    }

    public void addToStringSet(java.lang.String elem) {
        if (this.stringSet == null) {
            this.stringSet = new java.util.HashSet<java.lang.String>();
        }
        this.stringSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.String> getStringSet() {
        return this.stringSet;
    }

    public TestStruct setStringSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> stringSet) {
        this.stringSet = stringSet;
        return this;
    }

    public void unsetStringSet() {
        this.stringSet = null;
    }

    /** Returns true if field stringSet is set (has been assigned a value) and false otherwise */
    public boolean isSetStringSet() {
        return this.stringSet != null;
    }

    public void setStringSetIsSet(boolean value) {
        if (!value) {
            this.stringSet = null;
        }
    }

    public int getEnumSetSize() {
        return (this.enumSet == null) ? 0 : this.enumSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TstEnum> getEnumSetIterator() {
        return (this.enumSet == null) ? null : this.enumSet.iterator();
    }

    public void addToEnumSet(TstEnum elem) {
        if (this.enumSet == null) {
            this.enumSet = java.util.EnumSet.noneOf(TstEnum.class);
        }
        this.enumSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<TstEnum> getEnumSet() {
        return this.enumSet;
    }

    public TestStruct setEnumSet(@org.apache.thrift.annotation.Nullable java.util.Set<TstEnum> enumSet) {
        this.enumSet = enumSet;
        return this;
    }

    public void unsetEnumSet() {
        this.enumSet = null;
    }

    /** Returns true if field enumSet is set (has been assigned a value) and false otherwise */
    public boolean isSetEnumSet() {
        return this.enumSet != null;
    }

    public void setEnumSetIsSet(boolean value) {
        if (!value) {
            this.enumSet = null;
        }
    }

    public int getListSetSize() {
        return (this.listSet == null) ? 0 : this.listSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Integer>> getListSetIterator() {
        return (this.listSet == null) ? null : this.listSet.iterator();
    }

    public void addToListSet(java.util.List<java.lang.Integer> elem) {
        if (this.listSet == null) {
            this.listSet = new java.util.HashSet<java.util.List<java.lang.Integer>>();
        }
        this.listSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.util.List<java.lang.Integer>> getListSet() {
        return this.listSet;
    }

    public TestStruct setListSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.Integer>> listSet) {
        this.listSet = listSet;
        return this;
    }

    public void unsetListSet() {
        this.listSet = null;
    }

    /** Returns true if field listSet is set (has been assigned a value) and false otherwise */
    public boolean isSetListSet() {
        return this.listSet != null;
    }

    public void setListSetIsSet(boolean value) {
        if (!value) {
            this.listSet = null;
        }
    }

    public int getSetSetSize() {
        return (this.setSet == null) ? 0 : this.setSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.Set<java.lang.Integer>> getSetSetIterator() {
        return (this.setSet == null) ? null : this.setSet.iterator();
    }

    public void addToSetSet(java.util.Set<java.lang.Integer> elem) {
        if (this.setSet == null) {
            this.setSet = new java.util.HashSet<java.util.Set<java.lang.Integer>>();
        }
        this.setSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.util.Set<java.lang.Integer>> getSetSet() {
        return this.setSet;
    }

    public TestStruct setSetSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.util.Set<java.lang.Integer>> setSet) {
        this.setSet = setSet;
        return this;
    }

    public void unsetSetSet() {
        this.setSet = null;
    }

    /** Returns true if field setSet is set (has been assigned a value) and false otherwise */
    public boolean isSetSetSet() {
        return this.setSet != null;
    }

    public void setSetSetIsSet(boolean value) {
        if (!value) {
            this.setSet = null;
        }
    }

    public int getMapSetSize() {
        return (this.mapSet == null) ? 0 : this.mapSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.Map<java.lang.String, java.lang.Integer>> getMapSetIterator() {
        return (this.mapSet == null) ? null : this.mapSet.iterator();
    }

    public void addToMapSet(java.util.Map<java.lang.String, java.lang.Integer> elem) {
        if (this.mapSet == null) {
            this.mapSet = new java.util.HashSet<java.util.Map<java.lang.String, java.lang.Integer>>();
        }
        this.mapSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.util.Map<java.lang.String, java.lang.Integer>> getMapSet() {
        return this.mapSet;
    }

    public TestStruct setMapSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.util.Map<java.lang.String, java.lang.Integer>> mapSet) {
        this.mapSet = mapSet;
        return this;
    }

    public void unsetMapSet() {
        this.mapSet = null;
    }

    /** Returns true if field mapSet is set (has been assigned a value) and false otherwise */
    public boolean isSetMapSet() {
        return this.mapSet != null;
    }

    public void setMapSetIsSet(boolean value) {
        if (!value) {
            this.mapSet = null;
        }
    }

    public int getStructSetSize() {
        return (this.structSet == null) ? 0 : this.structSet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SmallStruct> getStructSetIterator() {
        return (this.structSet == null) ? null : this.structSet.iterator();
    }

    public void addToStructSet(SmallStruct elem) {
        if (this.structSet == null) {
            this.structSet = new java.util.HashSet<SmallStruct>();
        }
        this.structSet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<SmallStruct> getStructSet() {
        return this.structSet;
    }

    public TestStruct setStructSet(@org.apache.thrift.annotation.Nullable java.util.Set<SmallStruct> structSet) {
        this.structSet = structSet;
        return this;
    }

    public void unsetStructSet() {
        this.structSet = null;
    }

    /** Returns true if field structSet is set (has been assigned a value) and false otherwise */
    public boolean isSetStructSet() {
        return this.structSet != null;
    }

    public void setStructSetIsSet(boolean value) {
        if (!value) {
            this.structSet = null;
        }
    }

    public int getBinarySetSize() {
        return (this.binarySet == null) ? 0 : this.binarySet.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getBinarySetIterator() {
        return (this.binarySet == null) ? null : this.binarySet.iterator();
    }

    public void addToBinarySet(java.nio.ByteBuffer elem) {
        if (this.binarySet == null) {
            this.binarySet = new java.util.HashSet<java.nio.ByteBuffer>();
        }
        this.binarySet.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.nio.ByteBuffer> getBinarySet() {
        return this.binarySet;
    }

    public TestStruct setBinarySet(@org.apache.thrift.annotation.Nullable java.util.Set<java.nio.ByteBuffer> binarySet) {
        this.binarySet = binarySet;
        return this;
    }

    public void unsetBinarySet() {
        this.binarySet = null;
    }

    /** Returns true if field binarySet is set (has been assigned a value) and false otherwise */
    public boolean isSetBinarySet() {
        return this.binarySet != null;
    }

    public void setBinarySetIsSet(boolean value) {
        if (!value) {
            this.binarySet = null;
        }
    }

    public int getByteMapSize() {
        return (this.byteMap == null) ? 0 : this.byteMap.size();
    }

    public void putToByteMap(byte key, byte val) {
        if (this.byteMap == null) {
            this.byteMap = new java.util.HashMap<java.lang.Byte, java.lang.Byte>();
        }
        this.byteMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Byte, java.lang.Byte> getByteMap() {
        return this.byteMap;
    }

    public TestStruct setByteMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Byte, java.lang.Byte> byteMap) {
        this.byteMap = byteMap;
        return this;
    }

    public void unsetByteMap() {
        this.byteMap = null;
    }

    /** Returns true if field byteMap is set (has been assigned a value) and false otherwise */
    public boolean isSetByteMap() {
        return this.byteMap != null;
    }

    public void setByteMapIsSet(boolean value) {
        if (!value) {
            this.byteMap = null;
        }
    }

    public int getI16MapSize() {
        return (this.i16Map == null) ? 0 : this.i16Map.size();
    }

    public void putToI16Map(short key, short val) {
        if (this.i16Map == null) {
            this.i16Map = new java.util.HashMap<java.lang.Short, java.lang.Short>();
        }
        this.i16Map.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Short, java.lang.Short> getI16Map() {
        return this.i16Map;
    }

    public TestStruct setI16Map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Short, java.lang.Short> i16Map) {
        this.i16Map = i16Map;
        return this;
    }

    public void unsetI16Map() {
        this.i16Map = null;
    }

    /** Returns true if field i16Map is set (has been assigned a value) and false otherwise */
    public boolean isSetI16Map() {
        return this.i16Map != null;
    }

    public void setI16MapIsSet(boolean value) {
        if (!value) {
            this.i16Map = null;
        }
    }

    public int getI32MapSize() {
        return (this.i32Map == null) ? 0 : this.i32Map.size();
    }

    public void putToI32Map(int key, int val) {
        if (this.i32Map == null) {
            this.i32Map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>();
        }
        this.i32Map.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, java.lang.Integer> getI32Map() {
        return this.i32Map;
    }

    public TestStruct setI32Map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.Integer> i32Map) {
        this.i32Map = i32Map;
        return this;
    }

    public void unsetI32Map() {
        this.i32Map = null;
    }

    /** Returns true if field i32Map is set (has been assigned a value) and false otherwise */
    public boolean isSetI32Map() {
        return this.i32Map != null;
    }

    public void setI32MapIsSet(boolean value) {
        if (!value) {
            this.i32Map = null;
        }
    }

    public int getI64MapSize() {
        return (this.i64Map == null) ? 0 : this.i64Map.size();
    }

    public void putToI64Map(long key, long val) {
        if (this.i64Map == null) {
            this.i64Map = new java.util.HashMap<java.lang.Long, java.lang.Long>();
        }
        this.i64Map.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Long, java.lang.Long> getI64Map() {
        return this.i64Map;
    }

    public TestStruct setI64Map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long, java.lang.Long> i64Map) {
        this.i64Map = i64Map;
        return this;
    }

    public void unsetI64Map() {
        this.i64Map = null;
    }

    /** Returns true if field i64Map is set (has been assigned a value) and false otherwise */
    public boolean isSetI64Map() {
        return this.i64Map != null;
    }

    public void setI64MapIsSet(boolean value) {
        if (!value) {
            this.i64Map = null;
        }
    }

    public int getDoubleMapSize() {
        return (this.doubleMap == null) ? 0 : this.doubleMap.size();
    }

    public void putToDoubleMap(double key, double val) {
        if (this.doubleMap == null) {
            this.doubleMap = new java.util.HashMap<java.lang.Double, java.lang.Double>();
        }
        this.doubleMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Double, java.lang.Double> getDoubleMap() {
        return this.doubleMap;
    }

    public TestStruct setDoubleMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Double, java.lang.Double> doubleMap) {
        this.doubleMap = doubleMap;
        return this;
    }

    public void unsetDoubleMap() {
        this.doubleMap = null;
    }

    /** Returns true if field doubleMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDoubleMap() {
        return this.doubleMap != null;
    }

    public void setDoubleMapIsSet(boolean value) {
        if (!value) {
            this.doubleMap = null;
        }
    }

    public int getStringMapSize() {
        return (this.stringMap == null) ? 0 : this.stringMap.size();
    }

    public void putToStringMap(java.lang.String key, java.lang.String val) {
        if (this.stringMap == null) {
            this.stringMap = new java.util.HashMap<java.lang.String, java.lang.String>();
        }
        this.stringMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, java.lang.String> getStringMap() {
        return this.stringMap;
    }

    public TestStruct setStringMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> stringMap) {
        this.stringMap = stringMap;
        return this;
    }

    public void unsetStringMap() {
        this.stringMap = null;
    }

    /** Returns true if field stringMap is set (has been assigned a value) and false otherwise */
    public boolean isSetStringMap() {
        return this.stringMap != null;
    }

    public void setStringMapIsSet(boolean value) {
        if (!value) {
            this.stringMap = null;
        }
    }

    public int getEnumMapSize() {
        return (this.enumMap == null) ? 0 : this.enumMap.size();
    }

    public void putToEnumMap(TstEnum key, TstEnum val) {
        if (this.enumMap == null) {
            this.enumMap = new java.util.EnumMap<TstEnum, TstEnum>(TstEnum.class);
        }
        this.enumMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<TstEnum, TstEnum> getEnumMap() {
        return this.enumMap;
    }

    public TestStruct setEnumMap(@org.apache.thrift.annotation.Nullable java.util.Map<TstEnum, TstEnum> enumMap) {
        this.enumMap = enumMap;
        return this;
    }

    public void unsetEnumMap() {
        this.enumMap = null;
    }

    /** Returns true if field enumMap is set (has been assigned a value) and false otherwise */
    public boolean isSetEnumMap() {
        return this.enumMap != null;
    }

    public void setEnumMapIsSet(boolean value) {
        if (!value) {
            this.enumMap = null;
        }
    }

    public int getListMapSize() {
        return (this.listMap == null) ? 0 : this.listMap.size();
    }

    public void putToListMap(int key, java.util.List<java.lang.Integer> val) {
        if (this.listMap == null) {
            this.listMap = new java.util.HashMap<java.lang.Integer, java.util.List<java.lang.Integer>>();
        }
        this.listMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, java.util.List<java.lang.Integer>> getListMap() {
        return this.listMap;
    }

    public TestStruct setListMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.util.List<java.lang.Integer>> listMap) {
        this.listMap = listMap;
        return this;
    }

    public void unsetListMap() {
        this.listMap = null;
    }

    /** Returns true if field listMap is set (has been assigned a value) and false otherwise */
    public boolean isSetListMap() {
        return this.listMap != null;
    }

    public void setListMapIsSet(boolean value) {
        if (!value) {
            this.listMap = null;
        }
    }

    public int getSetMapSize() {
        return (this.setMap == null) ? 0 : this.setMap.size();
    }

    public void putToSetMap(int key, java.util.Set<java.lang.Integer> val) {
        if (this.setMap == null) {
            this.setMap = new java.util.HashMap<java.lang.Integer, java.util.Set<java.lang.Integer>>();
        }
        this.setMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>> getSetMap() {
        return this.setMap;
    }

    public TestStruct setSetMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>> setMap) {
        this.setMap = setMap;
        return this;
    }

    public void unsetSetMap() {
        this.setMap = null;
    }

    /** Returns true if field setMap is set (has been assigned a value) and false otherwise */
    public boolean isSetSetMap() {
        return this.setMap != null;
    }

    public void setSetMapIsSet(boolean value) {
        if (!value) {
            this.setMap = null;
        }
    }

    public int getMapMapSize() {
        return (this.mapMap == null) ? 0 : this.mapMap.size();
    }

    public void putToMapMap(int key, java.util.Map<java.lang.Integer, java.lang.Integer> val) {
        if (this.mapMap == null) {
            this.mapMap = new java.util.HashMap<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>>();
        }
        this.mapMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> getMapMap() {
        return this.mapMap;
    }

    public TestStruct setMapMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> mapMap) {
        this.mapMap = mapMap;
        return this;
    }

    public void unsetMapMap() {
        this.mapMap = null;
    }

    /** Returns true if field mapMap is set (has been assigned a value) and false otherwise */
    public boolean isSetMapMap() {
        return this.mapMap != null;
    }

    public void setMapMapIsSet(boolean value) {
        if (!value) {
            this.mapMap = null;
        }
    }

    public int getStructMapSize() {
        return (this.structMap == null) ? 0 : this.structMap.size();
    }

    public void putToStructMap(SmallStruct key, SmallStruct val) {
        if (this.structMap == null) {
            this.structMap = new java.util.HashMap<SmallStruct, SmallStruct>();
        }
        this.structMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<SmallStruct, SmallStruct> getStructMap() {
        return this.structMap;
    }

    public TestStruct setStructMap(@org.apache.thrift.annotation.Nullable java.util.Map<SmallStruct, SmallStruct> structMap) {
        this.structMap = structMap;
        return this;
    }

    public void unsetStructMap() {
        this.structMap = null;
    }

    /** Returns true if field structMap is set (has been assigned a value) and false otherwise */
    public boolean isSetStructMap() {
        return this.structMap != null;
    }

    public void setStructMapIsSet(boolean value) {
        if (!value) {
            this.structMap = null;
        }
    }

    public int getBinaryMapSize() {
        return (this.binaryMap == null) ? 0 : this.binaryMap.size();
    }

    public void putToBinaryMap(int key, java.nio.ByteBuffer val) {
        if (this.binaryMap == null) {
            this.binaryMap = new java.util.HashMap<java.lang.Integer, java.nio.ByteBuffer>();
        }
        this.binaryMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer, java.nio.ByteBuffer> getBinaryMap() {
        return this.binaryMap;
    }

    public TestStruct setBinaryMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.nio.ByteBuffer> binaryMap) {
        this.binaryMap = binaryMap;
        return this;
    }

    public void unsetBinaryMap() {
        this.binaryMap = null;
    }

    /** Returns true if field binaryMap is set (has been assigned a value) and false otherwise */
    public boolean isSetBinaryMap() {
        return this.binaryMap != null;
    }

    public void setBinaryMapIsSet(boolean value) {
        if (!value) {
            this.binaryMap = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public SmallStruct getStructField() {
        return this.structField;
    }

    public TestStruct setStructField(@org.apache.thrift.annotation.Nullable SmallStruct structField) {
        this.structField = structField;
        return this;
    }

    public void unsetStructField() {
        this.structField = null;
    }

    /** Returns true if field structField is set (has been assigned a value) and false otherwise */
    public boolean isSetStructField() {
        return this.structField != null;
    }

    public void setStructFieldIsSet(boolean value) {
        if (!value) {
            this.structField = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case BYTE_FIELD:
                if (value == null) {
                    unsetByteField();
                } else {
                    setByteField((java.lang.Byte) value);
                }
                break;

            case I16_FIELD:
                if (value == null) {
                    unsetI16Field();
                } else {
                    setI16Field((java.lang.Short) value);
                }
                break;

            case I32_FIELD:
                if (value == null) {
                    unsetI32Field();
                } else {
                    setI32Field((java.lang.Integer) value);
                }
                break;

            case I64_FIELD:
                if (value == null) {
                    unsetI64Field();
                } else {
                    setI64Field((java.lang.Long) value);
                }
                break;

            case DOUBLE_FIELD:
                if (value == null) {
                    unsetDoubleField();
                } else {
                    setDoubleField((java.lang.Double) value);
                }
                break;

            case STRING_FIELD:
                if (value == null) {
                    unsetStringField();
                } else {
                    setStringField((java.lang.String) value);
                }
                break;

            case ENUM_FIELD:
                if (value == null) {
                    unsetEnumField();
                } else {
                    setEnumField((TstEnum) value);
                }
                break;

            case BINARY_FIELD:
                if (value == null) {
                    unsetBinaryField();
                } else {
                    if (value instanceof byte[]) {
                        setBinaryField((byte[]) value);
                    } else {
                        setBinaryField((java.nio.ByteBuffer) value);
                    }
                }
                break;

            case BYTE_LIST:
                if (value == null) {
                    unsetByteList();
                } else {
                    setByteList((java.util.List<java.lang.Byte>) value);
                }
                break;

            case I16_LIST:
                if (value == null) {
                    unsetI16List();
                } else {
                    setI16List((java.util.List<java.lang.Short>) value);
                }
                break;

            case I32_LIST:
                if (value == null) {
                    unsetI32List();
                } else {
                    setI32List((java.util.List<java.lang.Integer>) value);
                }
                break;

            case I64_LIST:
                if (value == null) {
                    unsetI64List();
                } else {
                    setI64List((java.util.List<java.lang.Long>) value);
                }
                break;

            case DOUBLE_LIST:
                if (value == null) {
                    unsetDoubleList();
                } else {
                    setDoubleList((java.util.List<java.lang.Double>) value);
                }
                break;

            case STRING_LIST:
                if (value == null) {
                    unsetStringList();
                } else {
                    setStringList((java.util.List<java.lang.String>) value);
                }
                break;

            case ENUM_LIST:
                if (value == null) {
                    unsetEnumList();
                } else {
                    setEnumList((java.util.List<TstEnum>) value);
                }
                break;

            case LIST_LIST:
                if (value == null) {
                    unsetListList();
                } else {
                    setListList((java.util.List<java.util.List<java.lang.Integer>>) value);
                }
                break;

            case SET_LIST:
                if (value == null) {
                    unsetSetList();
                } else {
                    setSetList((java.util.List<java.util.Set<java.lang.Integer>>) value);
                }
                break;

            case MAP_LIST:
                if (value == null) {
                    unsetMapList();
                } else {
                    setMapList((java.util.List<java.util.Map<java.lang.String, java.lang.Integer>>) value);
                }
                break;

            case STRUCT_LIST:
                if (value == null) {
                    unsetStructList();
                } else {
                    setStructList((java.util.List<SmallStruct>) value);
                }
                break;

            case BINARY_LIST:
                if (value == null) {
                    unsetBinaryList();
                } else {
                    setBinaryList((java.util.List<java.nio.ByteBuffer>) value);
                }
                break;

            case BYTE_SET:
                if (value == null) {
                    unsetByteSet();
                } else {
                    setByteSet((java.util.Set<java.lang.Byte>) value);
                }
                break;

            case I16_SET:
                if (value == null) {
                    unsetI16Set();
                } else {
                    setI16Set((java.util.Set<java.lang.Short>) value);
                }
                break;

            case I32_SET:
                if (value == null) {
                    unsetI32Set();
                } else {
                    setI32Set((java.util.Set<java.lang.Integer>) value);
                }
                break;

            case I64_SET:
                if (value == null) {
                    unsetI64Set();
                } else {
                    setI64Set((java.util.Set<java.lang.Long>) value);
                }
                break;

            case DOUBLE_SET:
                if (value == null) {
                    unsetDoubleSet();
                } else {
                    setDoubleSet((java.util.Set<java.lang.Double>) value);
                }
                break;

            case STRING_SET:
                if (value == null) {
                    unsetStringSet();
                } else {
                    setStringSet((java.util.Set<java.lang.String>) value);
                }
                break;

            case ENUM_SET:
                if (value == null) {
                    unsetEnumSet();
                } else {
                    setEnumSet((java.util.Set<TstEnum>) value);
                }
                break;

            case LIST_SET:
                if (value == null) {
                    unsetListSet();
                } else {
                    setListSet((java.util.Set<java.util.List<java.lang.Integer>>) value);
                }
                break;

            case SET_SET:
                if (value == null) {
                    unsetSetSet();
                } else {
                    setSetSet((java.util.Set<java.util.Set<java.lang.Integer>>) value);
                }
                break;

            case MAP_SET:
                if (value == null) {
                    unsetMapSet();
                } else {
                    setMapSet((java.util.Set<java.util.Map<java.lang.String, java.lang.Integer>>) value);
                }
                break;

            case STRUCT_SET:
                if (value == null) {
                    unsetStructSet();
                } else {
                    setStructSet((java.util.Set<SmallStruct>) value);
                }
                break;

            case BINARY_SET:
                if (value == null) {
                    unsetBinarySet();
                } else {
                    setBinarySet((java.util.Set<java.nio.ByteBuffer>) value);
                }
                break;

            case BYTE_MAP:
                if (value == null) {
                    unsetByteMap();
                } else {
                    setByteMap((java.util.Map<java.lang.Byte, java.lang.Byte>) value);
                }
                break;

            case I16_MAP:
                if (value == null) {
                    unsetI16Map();
                } else {
                    setI16Map((java.util.Map<java.lang.Short, java.lang.Short>) value);
                }
                break;

            case I32_MAP:
                if (value == null) {
                    unsetI32Map();
                } else {
                    setI32Map((java.util.Map<java.lang.Integer, java.lang.Integer>) value);
                }
                break;

            case I64_MAP:
                if (value == null) {
                    unsetI64Map();
                } else {
                    setI64Map((java.util.Map<java.lang.Long, java.lang.Long>) value);
                }
                break;

            case DOUBLE_MAP:
                if (value == null) {
                    unsetDoubleMap();
                } else {
                    setDoubleMap((java.util.Map<java.lang.Double, java.lang.Double>) value);
                }
                break;

            case STRING_MAP:
                if (value == null) {
                    unsetStringMap();
                } else {
                    setStringMap((java.util.Map<java.lang.String, java.lang.String>) value);
                }
                break;

            case ENUM_MAP:
                if (value == null) {
                    unsetEnumMap();
                } else {
                    setEnumMap((java.util.Map<TstEnum, TstEnum>) value);
                }
                break;

            case LIST_MAP:
                if (value == null) {
                    unsetListMap();
                } else {
                    setListMap((java.util.Map<java.lang.Integer, java.util.List<java.lang.Integer>>) value);
                }
                break;

            case SET_MAP:
                if (value == null) {
                    unsetSetMap();
                } else {
                    setSetMap((java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>>) value);
                }
                break;

            case MAP_MAP:
                if (value == null) {
                    unsetMapMap();
                } else {
                    setMapMap((java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>>) value);
                }
                break;

            case STRUCT_MAP:
                if (value == null) {
                    unsetStructMap();
                } else {
                    setStructMap((java.util.Map<SmallStruct, SmallStruct>) value);
                }
                break;

            case BINARY_MAP:
                if (value == null) {
                    unsetBinaryMap();
                } else {
                    setBinaryMap((java.util.Map<java.lang.Integer, java.nio.ByteBuffer>) value);
                }
                break;

            case STRUCT_FIELD:
                if (value == null) {
                    unsetStructField();
                } else {
                    setStructField((SmallStruct) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case BYTE_FIELD:
                return getByteField();

            case I16_FIELD:
                return getI16Field();

            case I32_FIELD:
                return getI32Field();

            case I64_FIELD:
                return getI64Field();

            case DOUBLE_FIELD:
                return getDoubleField();

            case STRING_FIELD:
                return getStringField();

            case ENUM_FIELD:
                return getEnumField();

            case BINARY_FIELD:
                return getBinaryField();

            case BYTE_LIST:
                return getByteList();

            case I16_LIST:
                return getI16List();

            case I32_LIST:
                return getI32List();

            case I64_LIST:
                return getI64List();

            case DOUBLE_LIST:
                return getDoubleList();

            case STRING_LIST:
                return getStringList();

            case ENUM_LIST:
                return getEnumList();

            case LIST_LIST:
                return getListList();

            case SET_LIST:
                return getSetList();

            case MAP_LIST:
                return getMapList();

            case STRUCT_LIST:
                return getStructList();

            case BINARY_LIST:
                return getBinaryList();

            case BYTE_SET:
                return getByteSet();

            case I16_SET:
                return getI16Set();

            case I32_SET:
                return getI32Set();

            case I64_SET:
                return getI64Set();

            case DOUBLE_SET:
                return getDoubleSet();

            case STRING_SET:
                return getStringSet();

            case ENUM_SET:
                return getEnumSet();

            case LIST_SET:
                return getListSet();

            case SET_SET:
                return getSetSet();

            case MAP_SET:
                return getMapSet();

            case STRUCT_SET:
                return getStructSet();

            case BINARY_SET:
                return getBinarySet();

            case BYTE_MAP:
                return getByteMap();

            case I16_MAP:
                return getI16Map();

            case I32_MAP:
                return getI32Map();

            case I64_MAP:
                return getI64Map();

            case DOUBLE_MAP:
                return getDoubleMap();

            case STRING_MAP:
                return getStringMap();

            case ENUM_MAP:
                return getEnumMap();

            case LIST_MAP:
                return getListMap();

            case SET_MAP:
                return getSetMap();

            case MAP_MAP:
                return getMapMap();

            case STRUCT_MAP:
                return getStructMap();

            case BINARY_MAP:
                return getBinaryMap();

            case STRUCT_FIELD:
                return getStructField();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case BYTE_FIELD:
                return isSetByteField();
            case I16_FIELD:
                return isSetI16Field();
            case I32_FIELD:
                return isSetI32Field();
            case I64_FIELD:
                return isSetI64Field();
            case DOUBLE_FIELD:
                return isSetDoubleField();
            case STRING_FIELD:
                return isSetStringField();
            case ENUM_FIELD:
                return isSetEnumField();
            case BINARY_FIELD:
                return isSetBinaryField();
            case BYTE_LIST:
                return isSetByteList();
            case I16_LIST:
                return isSetI16List();
            case I32_LIST:
                return isSetI32List();
            case I64_LIST:
                return isSetI64List();
            case DOUBLE_LIST:
                return isSetDoubleList();
            case STRING_LIST:
                return isSetStringList();
            case ENUM_LIST:
                return isSetEnumList();
            case LIST_LIST:
                return isSetListList();
            case SET_LIST:
                return isSetSetList();
            case MAP_LIST:
                return isSetMapList();
            case STRUCT_LIST:
                return isSetStructList();
            case BINARY_LIST:
                return isSetBinaryList();
            case BYTE_SET:
                return isSetByteSet();
            case I16_SET:
                return isSetI16Set();
            case I32_SET:
                return isSetI32Set();
            case I64_SET:
                return isSetI64Set();
            case DOUBLE_SET:
                return isSetDoubleSet();
            case STRING_SET:
                return isSetStringSet();
            case ENUM_SET:
                return isSetEnumSet();
            case LIST_SET:
                return isSetListSet();
            case SET_SET:
                return isSetSetSet();
            case MAP_SET:
                return isSetMapSet();
            case STRUCT_SET:
                return isSetStructSet();
            case BINARY_SET:
                return isSetBinarySet();
            case BYTE_MAP:
                return isSetByteMap();
            case I16_MAP:
                return isSetI16Map();
            case I32_MAP:
                return isSetI32Map();
            case I64_MAP:
                return isSetI64Map();
            case DOUBLE_MAP:
                return isSetDoubleMap();
            case STRING_MAP:
                return isSetStringMap();
            case ENUM_MAP:
                return isSetEnumMap();
            case LIST_MAP:
                return isSetListMap();
            case SET_MAP:
                return isSetSetMap();
            case MAP_MAP:
                return isSetMapMap();
            case STRUCT_MAP:
                return isSetStructMap();
            case BINARY_MAP:
                return isSetBinaryMap();
            case STRUCT_FIELD:
                return isSetStructField();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof TestStruct)
            return this.equals((TestStruct) that);
        return false;
    }

    public boolean equals(TestStruct that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_byteField = true && this.isSetByteField();
        boolean that_present_byteField = true && that.isSetByteField();
        if (this_present_byteField || that_present_byteField) {
            if (!(this_present_byteField && that_present_byteField))
                return false;
            if (this.byteField != that.byteField)
                return false;
        }

        boolean this_present_i16Field = true && this.isSetI16Field();
        boolean that_present_i16Field = true && that.isSetI16Field();
        if (this_present_i16Field || that_present_i16Field) {
            if (!(this_present_i16Field && that_present_i16Field))
                return false;
            if (this.i16Field != that.i16Field)
                return false;
        }

        boolean this_present_i32Field = true && this.isSetI32Field();
        boolean that_present_i32Field = true && that.isSetI32Field();
        if (this_present_i32Field || that_present_i32Field) {
            if (!(this_present_i32Field && that_present_i32Field))
                return false;
            if (this.i32Field != that.i32Field)
                return false;
        }

        boolean this_present_i64Field = true && this.isSetI64Field();
        boolean that_present_i64Field = true && that.isSetI64Field();
        if (this_present_i64Field || that_present_i64Field) {
            if (!(this_present_i64Field && that_present_i64Field))
                return false;
            if (this.i64Field != that.i64Field)
                return false;
        }

        boolean this_present_doubleField = true && this.isSetDoubleField();
        boolean that_present_doubleField = true && that.isSetDoubleField();
        if (this_present_doubleField || that_present_doubleField) {
            if (!(this_present_doubleField && that_present_doubleField))
                return false;
            if (this.doubleField != that.doubleField)
                return false;
        }

        boolean this_present_stringField = true && this.isSetStringField();
        boolean that_present_stringField = true && that.isSetStringField();
        if (this_present_stringField || that_present_stringField) {
            if (!(this_present_stringField && that_present_stringField))
                return false;
            if (!this.stringField.equals(that.stringField))
                return false;
        }

        boolean this_present_enumField = true && this.isSetEnumField();
        boolean that_present_enumField = true && that.isSetEnumField();
        if (this_present_enumField || that_present_enumField) {
            if (!(this_present_enumField && that_present_enumField))
                return false;
            if (!this.enumField.equals(that.enumField))
                return false;
        }

        boolean this_present_binaryField = true && this.isSetBinaryField();
        boolean that_present_binaryField = true && that.isSetBinaryField();
        if (this_present_binaryField || that_present_binaryField) {
            if (!(this_present_binaryField && that_present_binaryField))
                return false;
            if (!this.binaryField.equals(that.binaryField))
                return false;
        }

        boolean this_present_byteList = true && this.isSetByteList();
        boolean that_present_byteList = true && that.isSetByteList();
        if (this_present_byteList || that_present_byteList) {
            if (!(this_present_byteList && that_present_byteList))
                return false;
            if (!this.byteList.equals(that.byteList))
                return false;
        }

        boolean this_present_i16List = true && this.isSetI16List();
        boolean that_present_i16List = true && that.isSetI16List();
        if (this_present_i16List || that_present_i16List) {
            if (!(this_present_i16List && that_present_i16List))
                return false;
            if (!this.i16List.equals(that.i16List))
                return false;
        }

        boolean this_present_i32List = true && this.isSetI32List();
        boolean that_present_i32List = true && that.isSetI32List();
        if (this_present_i32List || that_present_i32List) {
            if (!(this_present_i32List && that_present_i32List))
                return false;
            if (!this.i32List.equals(that.i32List))
                return false;
        }

        boolean this_present_i64List = true && this.isSetI64List();
        boolean that_present_i64List = true && that.isSetI64List();
        if (this_present_i64List || that_present_i64List) {
            if (!(this_present_i64List && that_present_i64List))
                return false;
            if (!this.i64List.equals(that.i64List))
                return false;
        }

        boolean this_present_doubleList = true && this.isSetDoubleList();
        boolean that_present_doubleList = true && that.isSetDoubleList();
        if (this_present_doubleList || that_present_doubleList) {
            if (!(this_present_doubleList && that_present_doubleList))
                return false;
            if (!this.doubleList.equals(that.doubleList))
                return false;
        }

        boolean this_present_stringList = true && this.isSetStringList();
        boolean that_present_stringList = true && that.isSetStringList();
        if (this_present_stringList || that_present_stringList) {
            if (!(this_present_stringList && that_present_stringList))
                return false;
            if (!this.stringList.equals(that.stringList))
                return false;
        }

        boolean this_present_enumList = true && this.isSetEnumList();
        boolean that_present_enumList = true && that.isSetEnumList();
        if (this_present_enumList || that_present_enumList) {
            if (!(this_present_enumList && that_present_enumList))
                return false;
            if (!this.enumList.equals(that.enumList))
                return false;
        }

        boolean this_present_listList = true && this.isSetListList();
        boolean that_present_listList = true && that.isSetListList();
        if (this_present_listList || that_present_listList) {
            if (!(this_present_listList && that_present_listList))
                return false;
            if (!this.listList.equals(that.listList))
                return false;
        }

        boolean this_present_setList = true && this.isSetSetList();
        boolean that_present_setList = true && that.isSetSetList();
        if (this_present_setList || that_present_setList) {
            if (!(this_present_setList && that_present_setList))
                return false;
            if (!this.setList.equals(that.setList))
                return false;
        }

        boolean this_present_mapList = true && this.isSetMapList();
        boolean that_present_mapList = true && that.isSetMapList();
        if (this_present_mapList || that_present_mapList) {
            if (!(this_present_mapList && that_present_mapList))
                return false;
            if (!this.mapList.equals(that.mapList))
                return false;
        }

        boolean this_present_structList = true && this.isSetStructList();
        boolean that_present_structList = true && that.isSetStructList();
        if (this_present_structList || that_present_structList) {
            if (!(this_present_structList && that_present_structList))
                return false;
            if (!this.structList.equals(that.structList))
                return false;
        }

        boolean this_present_binaryList = true && this.isSetBinaryList();
        boolean that_present_binaryList = true && that.isSetBinaryList();
        if (this_present_binaryList || that_present_binaryList) {
            if (!(this_present_binaryList && that_present_binaryList))
                return false;
            if (!this.binaryList.equals(that.binaryList))
                return false;
        }

        boolean this_present_byteSet = true && this.isSetByteSet();
        boolean that_present_byteSet = true && that.isSetByteSet();
        if (this_present_byteSet || that_present_byteSet) {
            if (!(this_present_byteSet && that_present_byteSet))
                return false;
            if (!this.byteSet.equals(that.byteSet))
                return false;
        }

        boolean this_present_i16Set = true && this.isSetI16Set();
        boolean that_present_i16Set = true && that.isSetI16Set();
        if (this_present_i16Set || that_present_i16Set) {
            if (!(this_present_i16Set && that_present_i16Set))
                return false;
            if (!this.i16Set.equals(that.i16Set))
                return false;
        }

        boolean this_present_i32Set = true && this.isSetI32Set();
        boolean that_present_i32Set = true && that.isSetI32Set();
        if (this_present_i32Set || that_present_i32Set) {
            if (!(this_present_i32Set && that_present_i32Set))
                return false;
            if (!this.i32Set.equals(that.i32Set))
                return false;
        }

        boolean this_present_i64Set = true && this.isSetI64Set();
        boolean that_present_i64Set = true && that.isSetI64Set();
        if (this_present_i64Set || that_present_i64Set) {
            if (!(this_present_i64Set && that_present_i64Set))
                return false;
            if (!this.i64Set.equals(that.i64Set))
                return false;
        }

        boolean this_present_doubleSet = true && this.isSetDoubleSet();
        boolean that_present_doubleSet = true && that.isSetDoubleSet();
        if (this_present_doubleSet || that_present_doubleSet) {
            if (!(this_present_doubleSet && that_present_doubleSet))
                return false;
            if (!this.doubleSet.equals(that.doubleSet))
                return false;
        }

        boolean this_present_stringSet = true && this.isSetStringSet();
        boolean that_present_stringSet = true && that.isSetStringSet();
        if (this_present_stringSet || that_present_stringSet) {
            if (!(this_present_stringSet && that_present_stringSet))
                return false;
            if (!this.stringSet.equals(that.stringSet))
                return false;
        }

        boolean this_present_enumSet = true && this.isSetEnumSet();
        boolean that_present_enumSet = true && that.isSetEnumSet();
        if (this_present_enumSet || that_present_enumSet) {
            if (!(this_present_enumSet && that_present_enumSet))
                return false;
            if (!this.enumSet.equals(that.enumSet))
                return false;
        }

        boolean this_present_listSet = true && this.isSetListSet();
        boolean that_present_listSet = true && that.isSetListSet();
        if (this_present_listSet || that_present_listSet) {
            if (!(this_present_listSet && that_present_listSet))
                return false;
            if (!this.listSet.equals(that.listSet))
                return false;
        }

        boolean this_present_setSet = true && this.isSetSetSet();
        boolean that_present_setSet = true && that.isSetSetSet();
        if (this_present_setSet || that_present_setSet) {
            if (!(this_present_setSet && that_present_setSet))
                return false;
            if (!this.setSet.equals(that.setSet))
                return false;
        }

        boolean this_present_mapSet = true && this.isSetMapSet();
        boolean that_present_mapSet = true && that.isSetMapSet();
        if (this_present_mapSet || that_present_mapSet) {
            if (!(this_present_mapSet && that_present_mapSet))
                return false;
            if (!this.mapSet.equals(that.mapSet))
                return false;
        }

        boolean this_present_structSet = true && this.isSetStructSet();
        boolean that_present_structSet = true && that.isSetStructSet();
        if (this_present_structSet || that_present_structSet) {
            if (!(this_present_structSet && that_present_structSet))
                return false;
            if (!this.structSet.equals(that.structSet))
                return false;
        }

        boolean this_present_binarySet = true && this.isSetBinarySet();
        boolean that_present_binarySet = true && that.isSetBinarySet();
        if (this_present_binarySet || that_present_binarySet) {
            if (!(this_present_binarySet && that_present_binarySet))
                return false;
            if (!this.binarySet.equals(that.binarySet))
                return false;
        }

        boolean this_present_byteMap = true && this.isSetByteMap();
        boolean that_present_byteMap = true && that.isSetByteMap();
        if (this_present_byteMap || that_present_byteMap) {
            if (!(this_present_byteMap && that_present_byteMap))
                return false;
            if (!this.byteMap.equals(that.byteMap))
                return false;
        }

        boolean this_present_i16Map = true && this.isSetI16Map();
        boolean that_present_i16Map = true && that.isSetI16Map();
        if (this_present_i16Map || that_present_i16Map) {
            if (!(this_present_i16Map && that_present_i16Map))
                return false;
            if (!this.i16Map.equals(that.i16Map))
                return false;
        }

        boolean this_present_i32Map = true && this.isSetI32Map();
        boolean that_present_i32Map = true && that.isSetI32Map();
        if (this_present_i32Map || that_present_i32Map) {
            if (!(this_present_i32Map && that_present_i32Map))
                return false;
            if (!this.i32Map.equals(that.i32Map))
                return false;
        }

        boolean this_present_i64Map = true && this.isSetI64Map();
        boolean that_present_i64Map = true && that.isSetI64Map();
        if (this_present_i64Map || that_present_i64Map) {
            if (!(this_present_i64Map && that_present_i64Map))
                return false;
            if (!this.i64Map.equals(that.i64Map))
                return false;
        }

        boolean this_present_doubleMap = true && this.isSetDoubleMap();
        boolean that_present_doubleMap = true && that.isSetDoubleMap();
        if (this_present_doubleMap || that_present_doubleMap) {
            if (!(this_present_doubleMap && that_present_doubleMap))
                return false;
            if (!this.doubleMap.equals(that.doubleMap))
                return false;
        }

        boolean this_present_stringMap = true && this.isSetStringMap();
        boolean that_present_stringMap = true && that.isSetStringMap();
        if (this_present_stringMap || that_present_stringMap) {
            if (!(this_present_stringMap && that_present_stringMap))
                return false;
            if (!this.stringMap.equals(that.stringMap))
                return false;
        }

        boolean this_present_enumMap = true && this.isSetEnumMap();
        boolean that_present_enumMap = true && that.isSetEnumMap();
        if (this_present_enumMap || that_present_enumMap) {
            if (!(this_present_enumMap && that_present_enumMap))
                return false;
            if (!this.enumMap.equals(that.enumMap))
                return false;
        }

        boolean this_present_listMap = true && this.isSetListMap();
        boolean that_present_listMap = true && that.isSetListMap();
        if (this_present_listMap || that_present_listMap) {
            if (!(this_present_listMap && that_present_listMap))
                return false;
            if (!this.listMap.equals(that.listMap))
                return false;
        }

        boolean this_present_setMap = true && this.isSetSetMap();
        boolean that_present_setMap = true && that.isSetSetMap();
        if (this_present_setMap || that_present_setMap) {
            if (!(this_present_setMap && that_present_setMap))
                return false;
            if (!this.setMap.equals(that.setMap))
                return false;
        }

        boolean this_present_mapMap = true && this.isSetMapMap();
        boolean that_present_mapMap = true && that.isSetMapMap();
        if (this_present_mapMap || that_present_mapMap) {
            if (!(this_present_mapMap && that_present_mapMap))
                return false;
            if (!this.mapMap.equals(that.mapMap))
                return false;
        }

        boolean this_present_structMap = true && this.isSetStructMap();
        boolean that_present_structMap = true && that.isSetStructMap();
        if (this_present_structMap || that_present_structMap) {
            if (!(this_present_structMap && that_present_structMap))
                return false;
            if (!this.structMap.equals(that.structMap))
                return false;
        }

        boolean this_present_binaryMap = true && this.isSetBinaryMap();
        boolean that_present_binaryMap = true && that.isSetBinaryMap();
        if (this_present_binaryMap || that_present_binaryMap) {
            if (!(this_present_binaryMap && that_present_binaryMap))
                return false;
            if (!this.binaryMap.equals(that.binaryMap))
                return false;
        }

        boolean this_present_structField = true && this.isSetStructField();
        boolean that_present_structField = true && that.isSetStructField();
        if (this_present_structField || that_present_structField) {
            if (!(this_present_structField && that_present_structField))
                return false;
            if (!this.structField.equals(that.structField))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetByteField()) ? 131071 : 524287);
        if (isSetByteField())
            hashCode = hashCode * 8191 + (int) (byteField);

        hashCode = hashCode * 8191 + ((isSetI16Field()) ? 131071 : 524287);
        if (isSetI16Field())
            hashCode = hashCode * 8191 + i16Field;

        hashCode = hashCode * 8191 + ((isSetI32Field()) ? 131071 : 524287);
        if (isSetI32Field())
            hashCode = hashCode * 8191 + i32Field;

        hashCode = hashCode * 8191 + ((isSetI64Field()) ? 131071 : 524287);
        if (isSetI64Field())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(i64Field);

        hashCode = hashCode * 8191 + ((isSetDoubleField()) ? 131071 : 524287);
        if (isSetDoubleField())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(doubleField);

        hashCode = hashCode * 8191 + ((isSetStringField()) ? 131071 : 524287);
        if (isSetStringField())
            hashCode = hashCode * 8191 + stringField.hashCode();

        hashCode = hashCode * 8191 + ((isSetEnumField()) ? 131071 : 524287);
        if (isSetEnumField())
            hashCode = hashCode * 8191 + enumField.getValue();

        hashCode = hashCode * 8191 + ((isSetBinaryField()) ? 131071 : 524287);
        if (isSetBinaryField())
            hashCode = hashCode * 8191 + binaryField.hashCode();

        hashCode = hashCode * 8191 + ((isSetByteList()) ? 131071 : 524287);
        if (isSetByteList())
            hashCode = hashCode * 8191 + byteList.hashCode();

        hashCode = hashCode * 8191 + ((isSetI16List()) ? 131071 : 524287);
        if (isSetI16List())
            hashCode = hashCode * 8191 + i16List.hashCode();

        hashCode = hashCode * 8191 + ((isSetI32List()) ? 131071 : 524287);
        if (isSetI32List())
            hashCode = hashCode * 8191 + i32List.hashCode();

        hashCode = hashCode * 8191 + ((isSetI64List()) ? 131071 : 524287);
        if (isSetI64List())
            hashCode = hashCode * 8191 + i64List.hashCode();

        hashCode = hashCode * 8191 + ((isSetDoubleList()) ? 131071 : 524287);
        if (isSetDoubleList())
            hashCode = hashCode * 8191 + doubleList.hashCode();

        hashCode = hashCode * 8191 + ((isSetStringList()) ? 131071 : 524287);
        if (isSetStringList())
            hashCode = hashCode * 8191 + stringList.hashCode();

        hashCode = hashCode * 8191 + ((isSetEnumList()) ? 131071 : 524287);
        if (isSetEnumList())
            hashCode = hashCode * 8191 + enumList.hashCode();

        hashCode = hashCode * 8191 + ((isSetListList()) ? 131071 : 524287);
        if (isSetListList())
            hashCode = hashCode * 8191 + listList.hashCode();

        hashCode = hashCode * 8191 + ((isSetSetList()) ? 131071 : 524287);
        if (isSetSetList())
            hashCode = hashCode * 8191 + setList.hashCode();

        hashCode = hashCode * 8191 + ((isSetMapList()) ? 131071 : 524287);
        if (isSetMapList())
            hashCode = hashCode * 8191 + mapList.hashCode();

        hashCode = hashCode * 8191 + ((isSetStructList()) ? 131071 : 524287);
        if (isSetStructList())
            hashCode = hashCode * 8191 + structList.hashCode();

        hashCode = hashCode * 8191 + ((isSetBinaryList()) ? 131071 : 524287);
        if (isSetBinaryList())
            hashCode = hashCode * 8191 + binaryList.hashCode();

        hashCode = hashCode * 8191 + ((isSetByteSet()) ? 131071 : 524287);
        if (isSetByteSet())
            hashCode = hashCode * 8191 + byteSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetI16Set()) ? 131071 : 524287);
        if (isSetI16Set())
            hashCode = hashCode * 8191 + i16Set.hashCode();

        hashCode = hashCode * 8191 + ((isSetI32Set()) ? 131071 : 524287);
        if (isSetI32Set())
            hashCode = hashCode * 8191 + i32Set.hashCode();

        hashCode = hashCode * 8191 + ((isSetI64Set()) ? 131071 : 524287);
        if (isSetI64Set())
            hashCode = hashCode * 8191 + i64Set.hashCode();

        hashCode = hashCode * 8191 + ((isSetDoubleSet()) ? 131071 : 524287);
        if (isSetDoubleSet())
            hashCode = hashCode * 8191 + doubleSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetStringSet()) ? 131071 : 524287);
        if (isSetStringSet())
            hashCode = hashCode * 8191 + stringSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetEnumSet()) ? 131071 : 524287);
        if (isSetEnumSet())
            hashCode = hashCode * 8191 + enumSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetListSet()) ? 131071 : 524287);
        if (isSetListSet())
            hashCode = hashCode * 8191 + listSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetSetSet()) ? 131071 : 524287);
        if (isSetSetSet())
            hashCode = hashCode * 8191 + setSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetMapSet()) ? 131071 : 524287);
        if (isSetMapSet())
            hashCode = hashCode * 8191 + mapSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetStructSet()) ? 131071 : 524287);
        if (isSetStructSet())
            hashCode = hashCode * 8191 + structSet.hashCode();

        hashCode = hashCode * 8191 + ((isSetBinarySet()) ? 131071 : 524287);
        if (isSetBinarySet())
            hashCode = hashCode * 8191 + binarySet.hashCode();

        hashCode = hashCode * 8191 + ((isSetByteMap()) ? 131071 : 524287);
        if (isSetByteMap())
            hashCode = hashCode * 8191 + byteMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetI16Map()) ? 131071 : 524287);
        if (isSetI16Map())
            hashCode = hashCode * 8191 + i16Map.hashCode();

        hashCode = hashCode * 8191 + ((isSetI32Map()) ? 131071 : 524287);
        if (isSetI32Map())
            hashCode = hashCode * 8191 + i32Map.hashCode();

        hashCode = hashCode * 8191 + ((isSetI64Map()) ? 131071 : 524287);
        if (isSetI64Map())
            hashCode = hashCode * 8191 + i64Map.hashCode();

        hashCode = hashCode * 8191 + ((isSetDoubleMap()) ? 131071 : 524287);
        if (isSetDoubleMap())
            hashCode = hashCode * 8191 + doubleMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetStringMap()) ? 131071 : 524287);
        if (isSetStringMap())
            hashCode = hashCode * 8191 + stringMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetEnumMap()) ? 131071 : 524287);
        if (isSetEnumMap())
            hashCode = hashCode * 8191 + enumMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetListMap()) ? 131071 : 524287);
        if (isSetListMap())
            hashCode = hashCode * 8191 + listMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetSetMap()) ? 131071 : 524287);
        if (isSetSetMap())
            hashCode = hashCode * 8191 + setMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetMapMap()) ? 131071 : 524287);
        if (isSetMapMap())
            hashCode = hashCode * 8191 + mapMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetStructMap()) ? 131071 : 524287);
        if (isSetStructMap())
            hashCode = hashCode * 8191 + structMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetBinaryMap()) ? 131071 : 524287);
        if (isSetBinaryMap())
            hashCode = hashCode * 8191 + binaryMap.hashCode();

        hashCode = hashCode * 8191 + ((isSetStructField()) ? 131071 : 524287);
        if (isSetStructField())
            hashCode = hashCode * 8191 + structField.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TestStruct other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetByteField(), other.isSetByteField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetByteField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteField, other.byteField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI16Field(), other.isSetI16Field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI16Field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Field, other.i16Field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI32Field(), other.isSetI32Field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI32Field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Field, other.i32Field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI64Field(), other.isSetI64Field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI64Field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Field, other.i64Field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDoubleField(), other.isSetDoubleField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDoubleField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleField, other.doubleField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStringField(), other.isSetStringField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringField, other.stringField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEnumField(), other.isSetEnumField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnumField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumField, other.enumField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBinaryField(), other.isSetBinaryField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBinaryField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryField, other.binaryField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetByteList(), other.isSetByteList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetByteList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteList, other.byteList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI16List(), other.isSetI16List());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI16List()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16List, other.i16List);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI32List(), other.isSetI32List());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI32List()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32List, other.i32List);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI64List(), other.isSetI64List());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI64List()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64List, other.i64List);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDoubleList(), other.isSetDoubleList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDoubleList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleList, other.doubleList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStringList(), other.isSetStringList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringList, other.stringList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEnumList(), other.isSetEnumList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnumList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumList, other.enumList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetListList(), other.isSetListList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetListList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listList, other.listList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSetList(), other.isSetSetList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSetList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setList, other.setList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetMapList(), other.isSetMapList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMapList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapList, other.mapList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStructList(), other.isSetStructList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStructList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structList, other.structList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBinaryList(), other.isSetBinaryList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBinaryList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryList, other.binaryList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetByteSet(), other.isSetByteSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetByteSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteSet, other.byteSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI16Set(), other.isSetI16Set());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI16Set()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Set, other.i16Set);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI32Set(), other.isSetI32Set());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI32Set()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Set, other.i32Set);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI64Set(), other.isSetI64Set());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI64Set()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Set, other.i64Set);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDoubleSet(), other.isSetDoubleSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDoubleSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleSet, other.doubleSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStringSet(), other.isSetStringSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringSet, other.stringSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEnumSet(), other.isSetEnumSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnumSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumSet, other.enumSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetListSet(), other.isSetListSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetListSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listSet, other.listSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSetSet(), other.isSetSetSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSetSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setSet, other.setSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetMapSet(), other.isSetMapSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMapSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapSet, other.mapSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStructSet(), other.isSetStructSet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStructSet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structSet, other.structSet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBinarySet(), other.isSetBinarySet());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBinarySet()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binarySet, other.binarySet);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetByteMap(), other.isSetByteMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetByteMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteMap, other.byteMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI16Map(), other.isSetI16Map());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI16Map()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Map, other.i16Map);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI32Map(), other.isSetI32Map());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI32Map()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Map, other.i32Map);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI64Map(), other.isSetI64Map());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI64Map()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Map, other.i64Map);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDoubleMap(), other.isSetDoubleMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDoubleMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleMap, other.doubleMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStringMap(), other.isSetStringMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringMap, other.stringMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEnumMap(), other.isSetEnumMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnumMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumMap, other.enumMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetListMap(), other.isSetListMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetListMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listMap, other.listMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetSetMap(), other.isSetSetMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSetMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setMap, other.setMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetMapMap(), other.isSetMapMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMapMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapMap, other.mapMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStructMap(), other.isSetStructMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStructMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structMap, other.structMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetBinaryMap(), other.isSetBinaryMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBinaryMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryMap, other.binaryMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStructField(), other.isSetStructField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStructField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structField, other.structField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TestStruct(");
        boolean first = true;

        if (isSetByteField()) {
            sb.append("byteField:");
            sb.append(this.byteField);
            first = false;
        }
        if (isSetI16Field()) {
            if (!first) sb.append(", ");
            sb.append("i16Field:");
            sb.append(this.i16Field);
            first = false;
        }
        if (isSetI32Field()) {
            if (!first) sb.append(", ");
            sb.append("i32Field:");
            sb.append(this.i32Field);
            first = false;
        }
        if (isSetI64Field()) {
            if (!first) sb.append(", ");
            sb.append("i64Field:");
            sb.append(this.i64Field);
            first = false;
        }
        if (isSetDoubleField()) {
            if (!first) sb.append(", ");
            sb.append("doubleField:");
            sb.append(this.doubleField);
            first = false;
        }
        if (isSetStringField()) {
            if (!first) sb.append(", ");
            sb.append("stringField:");
            if (this.stringField == null) {
                sb.append("null");
            } else {
                sb.append(this.stringField);
            }
            first = false;
        }
        if (isSetEnumField()) {
            if (!first) sb.append(", ");
            sb.append("enumField:");
            if (this.enumField == null) {
                sb.append("null");
            } else {
                sb.append(this.enumField);
            }
            first = false;
        }
        if (isSetBinaryField()) {
            if (!first) sb.append(", ");
            sb.append("binaryField:");
            if (this.binaryField == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.binaryField, sb);
            }
            first = false;
        }
        if (isSetByteList()) {
            if (!first) sb.append(", ");
            sb.append("byteList:");
            if (this.byteList == null) {
                sb.append("null");
            } else {
                sb.append(this.byteList);
            }
            first = false;
        }
        if (isSetI16List()) {
            if (!first) sb.append(", ");
            sb.append("i16List:");
            if (this.i16List == null) {
                sb.append("null");
            } else {
                sb.append(this.i16List);
            }
            first = false;
        }
        if (isSetI32List()) {
            if (!first) sb.append(", ");
            sb.append("i32List:");
            if (this.i32List == null) {
                sb.append("null");
            } else {
                sb.append(this.i32List);
            }
            first = false;
        }
        if (isSetI64List()) {
            if (!first) sb.append(", ");
            sb.append("i64List:");
            if (this.i64List == null) {
                sb.append("null");
            } else {
                sb.append(this.i64List);
            }
            first = false;
        }
        if (isSetDoubleList()) {
            if (!first) sb.append(", ");
            sb.append("doubleList:");
            if (this.doubleList == null) {
                sb.append("null");
            } else {
                sb.append(this.doubleList);
            }
            first = false;
        }
        if (isSetStringList()) {
            if (!first) sb.append(", ");
            sb.append("stringList:");
            if (this.stringList == null) {
                sb.append("null");
            } else {
                sb.append(this.stringList);
            }
            first = false;
        }
        if (isSetEnumList()) {
            if (!first) sb.append(", ");
            sb.append("enumList:");
            if (this.enumList == null) {
                sb.append("null");
            } else {
                sb.append(this.enumList);
            }
            first = false;
        }
        if (isSetListList()) {
            if (!first) sb.append(", ");
            sb.append("listList:");
            if (this.listList == null) {
                sb.append("null");
            } else {
                sb.append(this.listList);
            }
            first = false;
        }
        if (isSetSetList()) {
            if (!first) sb.append(", ");
            sb.append("setList:");
            if (this.setList == null) {
                sb.append("null");
            } else {
                sb.append(this.setList);
            }
            first = false;
        }
        if (isSetMapList()) {
            if (!first) sb.append(", ");
            sb.append("mapList:");
            if (this.mapList == null) {
                sb.append("null");
            } else {
                sb.append(this.mapList);
            }
            first = false;
        }
        if (isSetStructList()) {
            if (!first) sb.append(", ");
            sb.append("structList:");
            if (this.structList == null) {
                sb.append("null");
            } else {
                sb.append(this.structList);
            }
            first = false;
        }
        if (isSetBinaryList()) {
            if (!first) sb.append(", ");
            sb.append("binaryList:");
            if (this.binaryList == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.binaryList, sb);
            }
            first = false;
        }
        if (isSetByteSet()) {
            if (!first) sb.append(", ");
            sb.append("byteSet:");
            if (this.byteSet == null) {
                sb.append("null");
            } else {
                sb.append(this.byteSet);
            }
            first = false;
        }
        if (isSetI16Set()) {
            if (!first) sb.append(", ");
            sb.append("i16Set:");
            if (this.i16Set == null) {
                sb.append("null");
            } else {
                sb.append(this.i16Set);
            }
            first = false;
        }
        if (isSetI32Set()) {
            if (!first) sb.append(", ");
            sb.append("i32Set:");
            if (this.i32Set == null) {
                sb.append("null");
            } else {
                sb.append(this.i32Set);
            }
            first = false;
        }
        if (isSetI64Set()) {
            if (!first) sb.append(", ");
            sb.append("i64Set:");
            if (this.i64Set == null) {
                sb.append("null");
            } else {
                sb.append(this.i64Set);
            }
            first = false;
        }
        if (isSetDoubleSet()) {
            if (!first) sb.append(", ");
            sb.append("doubleSet:");
            if (this.doubleSet == null) {
                sb.append("null");
            } else {
                sb.append(this.doubleSet);
            }
            first = false;
        }
        if (isSetStringSet()) {
            if (!first) sb.append(", ");
            sb.append("stringSet:");
            if (this.stringSet == null) {
                sb.append("null");
            } else {
                sb.append(this.stringSet);
            }
            first = false;
        }
        if (isSetEnumSet()) {
            if (!first) sb.append(", ");
            sb.append("enumSet:");
            if (this.enumSet == null) {
                sb.append("null");
            } else {
                sb.append(this.enumSet);
            }
            first = false;
        }
        if (isSetListSet()) {
            if (!first) sb.append(", ");
            sb.append("listSet:");
            if (this.listSet == null) {
                sb.append("null");
            } else {
                sb.append(this.listSet);
            }
            first = false;
        }
        if (isSetSetSet()) {
            if (!first) sb.append(", ");
            sb.append("setSet:");
            if (this.setSet == null) {
                sb.append("null");
            } else {
                sb.append(this.setSet);
            }
            first = false;
        }
        if (isSetMapSet()) {
            if (!first) sb.append(", ");
            sb.append("mapSet:");
            if (this.mapSet == null) {
                sb.append("null");
            } else {
                sb.append(this.mapSet);
            }
            first = false;
        }
        if (isSetStructSet()) {
            if (!first) sb.append(", ");
            sb.append("structSet:");
            if (this.structSet == null) {
                sb.append("null");
            } else {
                sb.append(this.structSet);
            }
            first = false;
        }
        if (isSetBinarySet()) {
            if (!first) sb.append(", ");
            sb.append("binarySet:");
            if (this.binarySet == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.binarySet, sb);
            }
            first = false;
        }
        if (isSetByteMap()) {
            if (!first) sb.append(", ");
            sb.append("byteMap:");
            if (this.byteMap == null) {
                sb.append("null");
            } else {
                sb.append(this.byteMap);
            }
            first = false;
        }
        if (isSetI16Map()) {
            if (!first) sb.append(", ");
            sb.append("i16Map:");
            if (this.i16Map == null) {
                sb.append("null");
            } else {
                sb.append(this.i16Map);
            }
            first = false;
        }
        if (isSetI32Map()) {
            if (!first) sb.append(", ");
            sb.append("i32Map:");
            if (this.i32Map == null) {
                sb.append("null");
            } else {
                sb.append(this.i32Map);
            }
            first = false;
        }
        if (isSetI64Map()) {
            if (!first) sb.append(", ");
            sb.append("i64Map:");
            if (this.i64Map == null) {
                sb.append("null");
            } else {
                sb.append(this.i64Map);
            }
            first = false;
        }
        if (isSetDoubleMap()) {
            if (!first) sb.append(", ");
            sb.append("doubleMap:");
            if (this.doubleMap == null) {
                sb.append("null");
            } else {
                sb.append(this.doubleMap);
            }
            first = false;
        }
        if (isSetStringMap()) {
            if (!first) sb.append(", ");
            sb.append("stringMap:");
            if (this.stringMap == null) {
                sb.append("null");
            } else {
                sb.append(this.stringMap);
            }
            first = false;
        }
        if (isSetEnumMap()) {
            if (!first) sb.append(", ");
            sb.append("enumMap:");
            if (this.enumMap == null) {
                sb.append("null");
            } else {
                sb.append(this.enumMap);
            }
            first = false;
        }
        if (isSetListMap()) {
            if (!first) sb.append(", ");
            sb.append("listMap:");
            if (this.listMap == null) {
                sb.append("null");
            } else {
                sb.append(this.listMap);
            }
            first = false;
        }
        if (isSetSetMap()) {
            if (!first) sb.append(", ");
            sb.append("setMap:");
            if (this.setMap == null) {
                sb.append("null");
            } else {
                sb.append(this.setMap);
            }
            first = false;
        }
        if (isSetMapMap()) {
            if (!first) sb.append(", ");
            sb.append("mapMap:");
            if (this.mapMap == null) {
                sb.append("null");
            } else {
                sb.append(this.mapMap);
            }
            first = false;
        }
        if (isSetStructMap()) {
            if (!first) sb.append(", ");
            sb.append("structMap:");
            if (this.structMap == null) {
                sb.append("null");
            } else {
                sb.append(this.structMap);
            }
            first = false;
        }
        if (isSetBinaryMap()) {
            if (!first) sb.append(", ");
            sb.append("binaryMap:");
            if (this.binaryMap == null) {
                sb.append("null");
            } else {
                sb.append(this.binaryMap);
            }
            first = false;
        }
        if (isSetStructField()) {
            if (!first) sb.append(", ");
            sb.append("structField:");
            if (this.structField == null) {
                sb.append("null");
            } else {
                sb.append(this.structField);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (structField != null) {
            structField.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TestStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public TestStructStandardScheme getScheme() {
            return new TestStructStandardScheme();
        }
    }

    private static class TestStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<TestStruct> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, TestStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BYTE_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.byteField = iprot.readByte();
                            struct.setByteFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // I16_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.i16Field = iprot.readI16();
                            struct.setI16FieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // I32_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.i32Field = iprot.readI32();
                            struct.setI32FieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // I64_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.i64Field = iprot.readI64();
                            struct.setI64FieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DOUBLE_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.doubleField = iprot.readDouble();
                            struct.setDoubleFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // STRING_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.stringField = iprot.readString();
                            struct.setStringFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // ENUM_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.enumField = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                            struct.setEnumFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // BINARY_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.binaryField = iprot.readBinary();
                            struct.setBinaryFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // BYTE_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.byteList = new java.util.ArrayList<java.lang.Byte>(_list0.size);
                                byte _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readByte();
                                    struct.byteList.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setByteListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // I16_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                                struct.i16List = new java.util.ArrayList<java.lang.Short>(_list3.size);
                                short _elem4;
                                for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                    _elem4 = iprot.readI16();
                                    struct.i16List.add(_elem4);
                                }
                                iprot.readListEnd();
                            }
                            struct.setI16ListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // I32_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                                struct.i32List = new java.util.ArrayList<java.lang.Integer>(_list6.size);
                                int _elem7;
                                for (int _i8 = 0; _i8 < _list6.size; ++_i8) {
                                    _elem7 = iprot.readI32();
                                    struct.i32List.add(_elem7);
                                }
                                iprot.readListEnd();
                            }
                            struct.setI32ListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // I64_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                                struct.i64List = new java.util.ArrayList<java.lang.Long>(_list9.size);
                                long _elem10;
                                for (int _i11 = 0; _i11 < _list9.size; ++_i11) {
                                    _elem10 = iprot.readI64();
                                    struct.i64List.add(_elem10);
                                }
                                iprot.readListEnd();
                            }
                            struct.setI64ListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // DOUBLE_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                                struct.doubleList = new java.util.ArrayList<java.lang.Double>(_list12.size);
                                double _elem13;
                                for (int _i14 = 0; _i14 < _list12.size; ++_i14) {
                                    _elem13 = iprot.readDouble();
                                    struct.doubleList.add(_elem13);
                                }
                                iprot.readListEnd();
                            }
                            struct.setDoubleListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15: // STRING_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                                struct.stringList = new java.util.ArrayList<java.lang.String>(_list15.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
                                for (int _i17 = 0; _i17 < _list15.size; ++_i17) {
                                    _elem16 = iprot.readString();
                                    struct.stringList.add(_elem16);
                                }
                                iprot.readListEnd();
                            }
                            struct.setStringListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 16: // ENUM_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                                struct.enumList = new java.util.ArrayList<TstEnum>(_list18.size);
                                @org.apache.thrift.annotation.Nullable TstEnum _elem19;
                                for (int _i20 = 0; _i20 < _list18.size; ++_i20) {
                                    _elem19 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                                    if (_elem19 != null) {
                                        struct.enumList.add(_elem19);
                                    }
                                }
                                iprot.readListEnd();
                            }
                            struct.setEnumListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 17: // LIST_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                                struct.listList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list21.size);
                                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem22;
                                for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
                                    {
                                        org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                        _elem22 = new java.util.ArrayList<java.lang.Integer>(_list24.size);
                                        int _elem25;
                                        for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
                                            _elem25 = iprot.readI32();
                                            _elem22.add(_elem25);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.listList.add(_elem22);
                                }
                                iprot.readListEnd();
                            }
                            struct.setListListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 18: // SET_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                                struct.setList = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(_list27.size);
                                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem28;
                                for (int _i29 = 0; _i29 < _list27.size; ++_i29) {
                                    {
                                        org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                                        _elem28 = new java.util.HashSet<java.lang.Integer>(2 * _set30.size);
                                        int _elem31;
                                        for (int _i32 = 0; _i32 < _set30.size; ++_i32) {
                                            _elem31 = iprot.readI32();
                                            _elem28.add(_elem31);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.setList.add(_elem28);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSetListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 19: // MAP_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                                struct.mapList = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Integer>>(_list33.size);
                                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Integer> _elem34;
                                for (int _i35 = 0; _i35 < _list33.size; ++_i35) {
                                    {
                                        org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                                        _elem34 = new java.util.HashMap<java.lang.String, java.lang.Integer>(2 * _map36.size);
                                        @org.apache.thrift.annotation.Nullable java.lang.String _key37;
                                        int _val38;
                                        for (int _i39 = 0; _i39 < _map36.size; ++_i39) {
                                            _key37 = iprot.readString();
                                            _val38 = iprot.readI32();
                                            _elem34.put(_key37, _val38);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.mapList.add(_elem34);
                                }
                                iprot.readListEnd();
                            }
                            struct.setMapListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 20: // STRUCT_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                                struct.structList = new java.util.ArrayList<SmallStruct>(_list40.size);
                                @org.apache.thrift.annotation.Nullable SmallStruct _elem41;
                                for (int _i42 = 0; _i42 < _list40.size; ++_i42) {
                                    _elem41 = new SmallStruct();
                                    _elem41.read(iprot);
                                    struct.structList.add(_elem41);
                                }
                                iprot.readListEnd();
                            }
                            struct.setStructListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 21: // BINARY_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                                struct.binaryList = new java.util.ArrayList<java.nio.ByteBuffer>(_list43.size);
                                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem44;
                                for (int _i45 = 0; _i45 < _list43.size; ++_i45) {
                                    _elem44 = iprot.readBinary();
                                    struct.binaryList.add(_elem44);
                                }
                                iprot.readListEnd();
                            }
                            struct.setBinaryListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 30: // BYTE_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set46 = iprot.readSetBegin();
                                struct.byteSet = new java.util.HashSet<java.lang.Byte>(2 * _set46.size);
                                byte _elem47;
                                for (int _i48 = 0; _i48 < _set46.size; ++_i48) {
                                    _elem47 = iprot.readByte();
                                    struct.byteSet.add(_elem47);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setByteSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 31: // I16_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set49 = iprot.readSetBegin();
                                struct.i16Set = new java.util.HashSet<java.lang.Short>(2 * _set49.size);
                                short _elem50;
                                for (int _i51 = 0; _i51 < _set49.size; ++_i51) {
                                    _elem50 = iprot.readI16();
                                    struct.i16Set.add(_elem50);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setI16SetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 32: // I32_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set52 = iprot.readSetBegin();
                                struct.i32Set = new java.util.HashSet<java.lang.Integer>(2 * _set52.size);
                                int _elem53;
                                for (int _i54 = 0; _i54 < _set52.size; ++_i54) {
                                    _elem53 = iprot.readI32();
                                    struct.i32Set.add(_elem53);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setI32SetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 33: // I64_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set55 = iprot.readSetBegin();
                                struct.i64Set = new java.util.HashSet<java.lang.Long>(2 * _set55.size);
                                long _elem56;
                                for (int _i57 = 0; _i57 < _set55.size; ++_i57) {
                                    _elem56 = iprot.readI64();
                                    struct.i64Set.add(_elem56);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setI64SetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 34: // DOUBLE_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set58 = iprot.readSetBegin();
                                struct.doubleSet = new java.util.HashSet<java.lang.Double>(2 * _set58.size);
                                double _elem59;
                                for (int _i60 = 0; _i60 < _set58.size; ++_i60) {
                                    _elem59 = iprot.readDouble();
                                    struct.doubleSet.add(_elem59);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setDoubleSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 35: // STRING_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set61 = iprot.readSetBegin();
                                struct.stringSet = new java.util.HashSet<java.lang.String>(2 * _set61.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _elem62;
                                for (int _i63 = 0; _i63 < _set61.size; ++_i63) {
                                    _elem62 = iprot.readString();
                                    struct.stringSet.add(_elem62);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setStringSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 36: // ENUM_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set64 = iprot.readSetBegin();
                                struct.enumSet = java.util.EnumSet.noneOf(TstEnum.class);
                                @org.apache.thrift.annotation.Nullable TstEnum _elem65;
                                for (int _i66 = 0; _i66 < _set64.size; ++_i66) {
                                    _elem65 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                                    if (_elem65 != null) {
                                        struct.enumSet.add(_elem65);
                                    }
                                }
                                iprot.readSetEnd();
                            }
                            struct.setEnumSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 37: // LIST_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set67 = iprot.readSetBegin();
                                struct.listSet = new java.util.HashSet<java.util.List<java.lang.Integer>>(2 * _set67.size);
                                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem68;
                                for (int _i69 = 0; _i69 < _set67.size; ++_i69) {
                                    {
                                        org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                                        _elem68 = new java.util.ArrayList<java.lang.Integer>(_list70.size);
                                        int _elem71;
                                        for (int _i72 = 0; _i72 < _list70.size; ++_i72) {
                                            _elem71 = iprot.readI32();
                                            _elem68.add(_elem71);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.listSet.add(_elem68);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setListSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 38: // SET_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set73 = iprot.readSetBegin();
                                struct.setSet = new java.util.HashSet<java.util.Set<java.lang.Integer>>(2 * _set73.size);
                                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem74;
                                for (int _i75 = 0; _i75 < _set73.size; ++_i75) {
                                    {
                                        org.apache.thrift.protocol.TSet _set76 = iprot.readSetBegin();
                                        _elem74 = new java.util.HashSet<java.lang.Integer>(2 * _set76.size);
                                        int _elem77;
                                        for (int _i78 = 0; _i78 < _set76.size; ++_i78) {
                                            _elem77 = iprot.readI32();
                                            _elem74.add(_elem77);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.setSet.add(_elem74);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setSetSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 39: // MAP_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set79 = iprot.readSetBegin();
                                struct.mapSet = new java.util.HashSet<java.util.Map<java.lang.String, java.lang.Integer>>(2 * _set79.size);
                                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Integer> _elem80;
                                for (int _i81 = 0; _i81 < _set79.size; ++_i81) {
                                    {
                                        org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                                        _elem80 = new java.util.HashMap<java.lang.String, java.lang.Integer>(2 * _map82.size);
                                        @org.apache.thrift.annotation.Nullable java.lang.String _key83;
                                        int _val84;
                                        for (int _i85 = 0; _i85 < _map82.size; ++_i85) {
                                            _key83 = iprot.readString();
                                            _val84 = iprot.readI32();
                                            _elem80.put(_key83, _val84);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.mapSet.add(_elem80);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setMapSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 40: // STRUCT_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set86 = iprot.readSetBegin();
                                struct.structSet = new java.util.HashSet<SmallStruct>(2 * _set86.size);
                                @org.apache.thrift.annotation.Nullable SmallStruct _elem87;
                                for (int _i88 = 0; _i88 < _set86.size; ++_i88) {
                                    _elem87 = new SmallStruct();
                                    _elem87.read(iprot);
                                    struct.structSet.add(_elem87);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setStructSetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 41: // BINARY_SET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set89 = iprot.readSetBegin();
                                struct.binarySet = new java.util.HashSet<java.nio.ByteBuffer>(2 * _set89.size);
                                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem90;
                                for (int _i91 = 0; _i91 < _set89.size; ++_i91) {
                                    _elem90 = iprot.readBinary();
                                    struct.binarySet.add(_elem90);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setBinarySetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 50: // BYTE_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                                struct.byteMap = new java.util.HashMap<java.lang.Byte, java.lang.Byte>(2 * _map92.size);
                                byte _key93;
                                byte _val94;
                                for (int _i95 = 0; _i95 < _map92.size; ++_i95) {
                                    _key93 = iprot.readByte();
                                    _val94 = iprot.readByte();
                                    struct.byteMap.put(_key93, _val94);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setByteMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 51: // I16_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                                struct.i16Map = new java.util.HashMap<java.lang.Short, java.lang.Short>(2 * _map96.size);
                                short _key97;
                                short _val98;
                                for (int _i99 = 0; _i99 < _map96.size; ++_i99) {
                                    _key97 = iprot.readI16();
                                    _val98 = iprot.readI16();
                                    struct.i16Map.put(_key97, _val98);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setI16MapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 52: // I32_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                                struct.i32Map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(2 * _map100.size);
                                int _key101;
                                int _val102;
                                for (int _i103 = 0; _i103 < _map100.size; ++_i103) {
                                    _key101 = iprot.readI32();
                                    _val102 = iprot.readI32();
                                    struct.i32Map.put(_key101, _val102);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setI32MapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 53: // I64_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                                struct.i64Map = new java.util.HashMap<java.lang.Long, java.lang.Long>(2 * _map104.size);
                                long _key105;
                                long _val106;
                                for (int _i107 = 0; _i107 < _map104.size; ++_i107) {
                                    _key105 = iprot.readI64();
                                    _val106 = iprot.readI64();
                                    struct.i64Map.put(_key105, _val106);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setI64MapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 54: // DOUBLE_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                                struct.doubleMap = new java.util.HashMap<java.lang.Double, java.lang.Double>(2 * _map108.size);
                                double _key109;
                                double _val110;
                                for (int _i111 = 0; _i111 < _map108.size; ++_i111) {
                                    _key109 = iprot.readDouble();
                                    _val110 = iprot.readDouble();
                                    struct.doubleMap.put(_key109, _val110);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setDoubleMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 55: // STRING_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map112 = iprot.readMapBegin();
                                struct.stringMap = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map112.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key113;
                                @org.apache.thrift.annotation.Nullable java.lang.String _val114;
                                for (int _i115 = 0; _i115 < _map112.size; ++_i115) {
                                    _key113 = iprot.readString();
                                    _val114 = iprot.readString();
                                    struct.stringMap.put(_key113, _val114);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setStringMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 56: // ENUM_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                                struct.enumMap = new java.util.EnumMap<TstEnum, TstEnum>(TstEnum.class);
                                @org.apache.thrift.annotation.Nullable TstEnum _key117;
                                @org.apache.thrift.annotation.Nullable TstEnum _val118;
                                for (int _i119 = 0; _i119 < _map116.size; ++_i119) {
                                    _key117 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                                    _val118 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                                    if (_key117 != null) {
                                        struct.enumMap.put(_key117, _val118);
                                    }
                                }
                                iprot.readMapEnd();
                            }
                            struct.setEnumMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 57: // LIST_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                                struct.listMap = new java.util.HashMap<java.lang.Integer, java.util.List<java.lang.Integer>>(2 * _map120.size);
                                int _key121;
                                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val122;
                                for (int _i123 = 0; _i123 < _map120.size; ++_i123) {
                                    _key121 = iprot.readI32();
                                    {
                                        org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                                        _val122 = new java.util.ArrayList<java.lang.Integer>(_list124.size);
                                        int _elem125;
                                        for (int _i126 = 0; _i126 < _list124.size; ++_i126) {
                                            _elem125 = iprot.readI32();
                                            _val122.add(_elem125);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.listMap.put(_key121, _val122);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setListMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 58: // SET_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map127 = iprot.readMapBegin();
                                struct.setMap = new java.util.HashMap<java.lang.Integer, java.util.Set<java.lang.Integer>>(2 * _map127.size);
                                int _key128;
                                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _val129;
                                for (int _i130 = 0; _i130 < _map127.size; ++_i130) {
                                    _key128 = iprot.readI32();
                                    {
                                        org.apache.thrift.protocol.TSet _set131 = iprot.readSetBegin();
                                        _val129 = new java.util.HashSet<java.lang.Integer>(2 * _set131.size);
                                        int _elem132;
                                        for (int _i133 = 0; _i133 < _set131.size; ++_i133) {
                                            _elem132 = iprot.readI32();
                                            _val129.add(_elem132);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.setMap.put(_key128, _val129);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setSetMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 59: // MAP_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map134 = iprot.readMapBegin();
                                struct.mapMap = new java.util.HashMap<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>>(2 * _map134.size);
                                int _key135;
                                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.Integer> _val136;
                                for (int _i137 = 0; _i137 < _map134.size; ++_i137) {
                                    _key135 = iprot.readI32();
                                    {
                                        org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                                        _val136 = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(2 * _map138.size);
                                        int _key139;
                                        int _val140;
                                        for (int _i141 = 0; _i141 < _map138.size; ++_i141) {
                                            _key139 = iprot.readI32();
                                            _val140 = iprot.readI32();
                                            _val136.put(_key139, _val140);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.mapMap.put(_key135, _val136);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setMapMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 60: // STRUCT_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                                struct.structMap = new java.util.HashMap<SmallStruct, SmallStruct>(2 * _map142.size);
                                @org.apache.thrift.annotation.Nullable SmallStruct _key143;
                                @org.apache.thrift.annotation.Nullable SmallStruct _val144;
                                for (int _i145 = 0; _i145 < _map142.size; ++_i145) {
                                    _key143 = new SmallStruct();
                                    _key143.read(iprot);
                                    _val144 = new SmallStruct();
                                    _val144.read(iprot);
                                    struct.structMap.put(_key143, _val144);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setStructMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 61: // BINARY_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
                                struct.binaryMap = new java.util.HashMap<java.lang.Integer, java.nio.ByteBuffer>(2 * _map146.size);
                                int _key147;
                                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val148;
                                for (int _i149 = 0; _i149 < _map146.size; ++_i149) {
                                    _key147 = iprot.readI32();
                                    _val148 = iprot.readBinary();
                                    struct.binaryMap.put(_key147, _val148);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setBinaryMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 70: // STRUCT_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.structField = new SmallStruct();
                            struct.structField.read(iprot);
                            struct.setStructFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, TestStruct struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetByteField()) {
                oprot.writeFieldBegin(BYTE_FIELD_FIELD_DESC);
                oprot.writeByte(struct.byteField);
                oprot.writeFieldEnd();
            }
            if (struct.isSetI16Field()) {
                oprot.writeFieldBegin(I16_FIELD_FIELD_DESC);
                oprot.writeI16(struct.i16Field);
                oprot.writeFieldEnd();
            }
            if (struct.isSetI32Field()) {
                oprot.writeFieldBegin(I32_FIELD_FIELD_DESC);
                oprot.writeI32(struct.i32Field);
                oprot.writeFieldEnd();
            }
            if (struct.isSetI64Field()) {
                oprot.writeFieldBegin(I64_FIELD_FIELD_DESC);
                oprot.writeI64(struct.i64Field);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDoubleField()) {
                oprot.writeFieldBegin(DOUBLE_FIELD_FIELD_DESC);
                oprot.writeDouble(struct.doubleField);
                oprot.writeFieldEnd();
            }
            if (struct.stringField != null) {
                if (struct.isSetStringField()) {
                    oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
                    oprot.writeString(struct.stringField);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.enumField != null) {
                if (struct.isSetEnumField()) {
                    oprot.writeFieldBegin(ENUM_FIELD_FIELD_DESC);
                    oprot.writeI32(struct.enumField.getValue());
                    oprot.writeFieldEnd();
                }
            }
            if (struct.binaryField != null) {
                if (struct.isSetBinaryField()) {
                    oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
                    oprot.writeBinary(struct.binaryField);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.byteList != null) {
                if (struct.isSetByteList()) {
                    oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteList.size()));
                        for (byte _iter150 : struct.byteList) {
                            oprot.writeByte(_iter150);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i16List != null) {
                if (struct.isSetI16List()) {
                    oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.i16List.size()));
                        for (short _iter151 : struct.i16List) {
                            oprot.writeI16(_iter151);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i32List != null) {
                if (struct.isSetI32List()) {
                    oprot.writeFieldBegin(I32_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.i32List.size()));
                        for (int _iter152 : struct.i32List) {
                            oprot.writeI32(_iter152);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i64List != null) {
                if (struct.isSetI64List()) {
                    oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64List.size()));
                        for (long _iter153 : struct.i64List) {
                            oprot.writeI64(_iter153);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.doubleList != null) {
                if (struct.isSetDoubleList()) {
                    oprot.writeFieldBegin(DOUBLE_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleList.size()));
                        for (double _iter154 : struct.doubleList) {
                            oprot.writeDouble(_iter154);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.stringList != null) {
                if (struct.isSetStringList()) {
                    oprot.writeFieldBegin(STRING_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringList.size()));
                        for (java.lang.String _iter155 : struct.stringList) {
                            oprot.writeString(_iter155);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.enumList != null) {
                if (struct.isSetEnumList()) {
                    oprot.writeFieldBegin(ENUM_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.enumList.size()));
                        for (TstEnum _iter156 : struct.enumList) {
                            oprot.writeI32(_iter156.getValue());
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.listList != null) {
                if (struct.isSetListList()) {
                    oprot.writeFieldBegin(LIST_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.listList.size()));
                        for (java.util.List<java.lang.Integer> _iter157 : struct.listList) {
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter157.size()));
                                for (int _iter158 : _iter157) {
                                    oprot.writeI32(_iter158);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.setList != null) {
                if (struct.isSetSetList()) {
                    oprot.writeFieldBegin(SET_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, struct.setList.size()));
                        for (java.util.Set<java.lang.Integer> _iter159 : struct.setList) {
                            {
                                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter159.size()));
                                for (int _iter160 : _iter159) {
                                    oprot.writeI32(_iter160);
                                }
                                oprot.writeSetEnd();
                            }
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.mapList != null) {
                if (struct.isSetMapList()) {
                    oprot.writeFieldBegin(MAP_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.mapList.size()));
                        for (java.util.Map<java.lang.String, java.lang.Integer> _iter161 : struct.mapList) {
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, _iter161.size()));
                                for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter162 : _iter161.entrySet()) {
                                    oprot.writeString(_iter162.getKey());
                                    oprot.writeI32(_iter162.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.structList != null) {
                if (struct.isSetStructList()) {
                    oprot.writeFieldBegin(STRUCT_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.structList.size()));
                        for (SmallStruct _iter163 : struct.structList) {
                            _iter163.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.binaryList != null) {
                if (struct.isSetBinaryList()) {
                    oprot.writeFieldBegin(BINARY_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binaryList.size()));
                        for (java.nio.ByteBuffer _iter164 : struct.binaryList) {
                            oprot.writeBinary(_iter164);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.byteSet != null) {
                if (struct.isSetByteSet()) {
                    oprot.writeFieldBegin(BYTE_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.byteSet.size()));
                        for (byte _iter165 : struct.byteSet) {
                            oprot.writeByte(_iter165);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i16Set != null) {
                if (struct.isSetI16Set()) {
                    oprot.writeFieldBegin(I16_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, struct.i16Set.size()));
                        for (short _iter166 : struct.i16Set) {
                            oprot.writeI16(_iter166);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i32Set != null) {
                if (struct.isSetI32Set()) {
                    oprot.writeFieldBegin(I32_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.i32Set.size()));
                        for (int _iter167 : struct.i32Set) {
                            oprot.writeI32(_iter167);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i64Set != null) {
                if (struct.isSetI64Set()) {
                    oprot.writeFieldBegin(I64_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.i64Set.size()));
                        for (long _iter168 : struct.i64Set) {
                            oprot.writeI64(_iter168);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.doubleSet != null) {
                if (struct.isSetDoubleSet()) {
                    oprot.writeFieldBegin(DOUBLE_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleSet.size()));
                        for (double _iter169 : struct.doubleSet) {
                            oprot.writeDouble(_iter169);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.stringSet != null) {
                if (struct.isSetStringSet()) {
                    oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.stringSet.size()));
                        for (java.lang.String _iter170 : struct.stringSet) {
                            oprot.writeString(_iter170);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.enumSet != null) {
                if (struct.isSetEnumSet()) {
                    oprot.writeFieldBegin(ENUM_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.enumSet.size()));
                        for (TstEnum _iter171 : struct.enumSet) {
                            oprot.writeI32(_iter171.getValue());
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.listSet != null) {
                if (struct.isSetListSet()) {
                    oprot.writeFieldBegin(LIST_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, struct.listSet.size()));
                        for (java.util.List<java.lang.Integer> _iter172 : struct.listSet) {
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter172.size()));
                                for (int _iter173 : _iter172) {
                                    oprot.writeI32(_iter173);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.setSet != null) {
                if (struct.isSetSetSet()) {
                    oprot.writeFieldBegin(SET_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.SET, struct.setSet.size()));
                        for (java.util.Set<java.lang.Integer> _iter174 : struct.setSet) {
                            {
                                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter174.size()));
                                for (int _iter175 : _iter174) {
                                    oprot.writeI32(_iter175);
                                }
                                oprot.writeSetEnd();
                            }
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.mapSet != null) {
                if (struct.isSetMapSet()) {
                    oprot.writeFieldBegin(MAP_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, struct.mapSet.size()));
                        for (java.util.Map<java.lang.String, java.lang.Integer> _iter176 : struct.mapSet) {
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, _iter176.size()));
                                for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter177 : _iter176.entrySet()) {
                                    oprot.writeString(_iter177.getKey());
                                    oprot.writeI32(_iter177.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.structSet != null) {
                if (struct.isSetStructSet()) {
                    oprot.writeFieldBegin(STRUCT_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.structSet.size()));
                        for (SmallStruct _iter178 : struct.structSet) {
                            _iter178.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.binarySet != null) {
                if (struct.isSetBinarySet()) {
                    oprot.writeFieldBegin(BINARY_SET_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.binarySet.size()));
                        for (java.nio.ByteBuffer _iter179 : struct.binarySet) {
                            oprot.writeBinary(_iter179);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.byteMap != null) {
                if (struct.isSetByteMap()) {
                    oprot.writeFieldBegin(BYTE_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, struct.byteMap.size()));
                        for (java.util.Map.Entry<java.lang.Byte, java.lang.Byte> _iter180 : struct.byteMap.entrySet()) {
                            oprot.writeByte(_iter180.getKey());
                            oprot.writeByte(_iter180.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i16Map != null) {
                if (struct.isSetI16Map()) {
                    oprot.writeFieldBegin(I16_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.i16Map.size()));
                        for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter181 : struct.i16Map.entrySet()) {
                            oprot.writeI16(_iter181.getKey());
                            oprot.writeI16(_iter181.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i32Map != null) {
                if (struct.isSetI32Map()) {
                    oprot.writeFieldBegin(I32_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.i32Map.size()));
                        for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter182 : struct.i32Map.entrySet()) {
                            oprot.writeI32(_iter182.getKey());
                            oprot.writeI32(_iter182.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.i64Map != null) {
                if (struct.isSetI64Map()) {
                    oprot.writeFieldBegin(I64_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, struct.i64Map.size()));
                        for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter183 : struct.i64Map.entrySet()) {
                            oprot.writeI64(_iter183.getKey());
                            oprot.writeI64(_iter183.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.doubleMap != null) {
                if (struct.isSetDoubleMap()) {
                    oprot.writeFieldBegin(DOUBLE_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.DOUBLE, struct.doubleMap.size()));
                        for (java.util.Map.Entry<java.lang.Double, java.lang.Double> _iter184 : struct.doubleMap.entrySet()) {
                            oprot.writeDouble(_iter184.getKey());
                            oprot.writeDouble(_iter184.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.stringMap != null) {
                if (struct.isSetStringMap()) {
                    oprot.writeFieldBegin(STRING_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stringMap.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter185 : struct.stringMap.entrySet()) {
                            oprot.writeString(_iter185.getKey());
                            oprot.writeString(_iter185.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.enumMap != null) {
                if (struct.isSetEnumMap()) {
                    oprot.writeFieldBegin(ENUM_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.enumMap.size()));
                        for (java.util.Map.Entry<TstEnum, TstEnum> _iter186 : struct.enumMap.entrySet()) {
                            oprot.writeI32(_iter186.getKey().getValue());
                            oprot.writeI32(_iter186.getValue().getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.listMap != null) {
                if (struct.isSetListMap()) {
                    oprot.writeFieldBegin(LIST_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.listMap.size()));
                        for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter187 : struct.listMap.entrySet()) {
                            oprot.writeI32(_iter187.getKey());
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter187.getValue().size()));
                                for (int _iter188 : _iter187.getValue()) {
                                    oprot.writeI32(_iter188);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.setMap != null) {
                if (struct.isSetSetMap()) {
                    oprot.writeFieldBegin(SET_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.setMap.size()));
                        for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.lang.Integer>> _iter189 : struct.setMap.entrySet()) {
                            oprot.writeI32(_iter189.getKey());
                            {
                                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter189.getValue().size()));
                                for (int _iter190 : _iter189.getValue()) {
                                    oprot.writeI32(_iter190);
                                }
                                oprot.writeSetEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.mapMap != null) {
                if (struct.isSetMapMap()) {
                    oprot.writeFieldBegin(MAP_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.mapMap.size()));
                        for (java.util.Map.Entry<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> _iter191 : struct.mapMap.entrySet()) {
                            oprot.writeI32(_iter191.getKey());
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter191.getValue().size()));
                                for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter192 : _iter191.getValue().entrySet()) {
                                    oprot.writeI32(_iter192.getKey());
                                    oprot.writeI32(_iter192.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.structMap != null) {
                if (struct.isSetStructMap()) {
                    oprot.writeFieldBegin(STRUCT_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.structMap.size()));
                        for (java.util.Map.Entry<SmallStruct, SmallStruct> _iter193 : struct.structMap.entrySet()) {
                            _iter193.getKey().write(oprot);
                            _iter193.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.binaryMap != null) {
                if (struct.isSetBinaryMap()) {
                    oprot.writeFieldBegin(BINARY_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.binaryMap.size()));
                        for (java.util.Map.Entry<java.lang.Integer, java.nio.ByteBuffer> _iter194 : struct.binaryMap.entrySet()) {
                            oprot.writeI32(_iter194.getKey());
                            oprot.writeBinary(_iter194.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.structField != null) {
                if (struct.isSetStructField()) {
                    oprot.writeFieldBegin(STRUCT_FIELD_FIELD_DESC);
                    struct.structField.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TestStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public TestStructTupleScheme getScheme() {
            return new TestStructTupleScheme();
        }
    }

    private static class TestStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<TestStruct> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TestStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetByteField()) {
                optionals.set(0);
            }
            if (struct.isSetI16Field()) {
                optionals.set(1);
            }
            if (struct.isSetI32Field()) {
                optionals.set(2);
            }
            if (struct.isSetI64Field()) {
                optionals.set(3);
            }
            if (struct.isSetDoubleField()) {
                optionals.set(4);
            }
            if (struct.isSetStringField()) {
                optionals.set(5);
            }
            if (struct.isSetEnumField()) {
                optionals.set(6);
            }
            if (struct.isSetBinaryField()) {
                optionals.set(7);
            }
            if (struct.isSetByteList()) {
                optionals.set(8);
            }
            if (struct.isSetI16List()) {
                optionals.set(9);
            }
            if (struct.isSetI32List()) {
                optionals.set(10);
            }
            if (struct.isSetI64List()) {
                optionals.set(11);
            }
            if (struct.isSetDoubleList()) {
                optionals.set(12);
            }
            if (struct.isSetStringList()) {
                optionals.set(13);
            }
            if (struct.isSetEnumList()) {
                optionals.set(14);
            }
            if (struct.isSetListList()) {
                optionals.set(15);
            }
            if (struct.isSetSetList()) {
                optionals.set(16);
            }
            if (struct.isSetMapList()) {
                optionals.set(17);
            }
            if (struct.isSetStructList()) {
                optionals.set(18);
            }
            if (struct.isSetBinaryList()) {
                optionals.set(19);
            }
            if (struct.isSetByteSet()) {
                optionals.set(20);
            }
            if (struct.isSetI16Set()) {
                optionals.set(21);
            }
            if (struct.isSetI32Set()) {
                optionals.set(22);
            }
            if (struct.isSetI64Set()) {
                optionals.set(23);
            }
            if (struct.isSetDoubleSet()) {
                optionals.set(24);
            }
            if (struct.isSetStringSet()) {
                optionals.set(25);
            }
            if (struct.isSetEnumSet()) {
                optionals.set(26);
            }
            if (struct.isSetListSet()) {
                optionals.set(27);
            }
            if (struct.isSetSetSet()) {
                optionals.set(28);
            }
            if (struct.isSetMapSet()) {
                optionals.set(29);
            }
            if (struct.isSetStructSet()) {
                optionals.set(30);
            }
            if (struct.isSetBinarySet()) {
                optionals.set(31);
            }
            if (struct.isSetByteMap()) {
                optionals.set(32);
            }
            if (struct.isSetI16Map()) {
                optionals.set(33);
            }
            if (struct.isSetI32Map()) {
                optionals.set(34);
            }
            if (struct.isSetI64Map()) {
                optionals.set(35);
            }
            if (struct.isSetDoubleMap()) {
                optionals.set(36);
            }
            if (struct.isSetStringMap()) {
                optionals.set(37);
            }
            if (struct.isSetEnumMap()) {
                optionals.set(38);
            }
            if (struct.isSetListMap()) {
                optionals.set(39);
            }
            if (struct.isSetSetMap()) {
                optionals.set(40);
            }
            if (struct.isSetMapMap()) {
                optionals.set(41);
            }
            if (struct.isSetStructMap()) {
                optionals.set(42);
            }
            if (struct.isSetBinaryMap()) {
                optionals.set(43);
            }
            if (struct.isSetStructField()) {
                optionals.set(44);
            }
            oprot.writeBitSet(optionals, 45);
            if (struct.isSetByteField()) {
                oprot.writeByte(struct.byteField);
            }
            if (struct.isSetI16Field()) {
                oprot.writeI16(struct.i16Field);
            }
            if (struct.isSetI32Field()) {
                oprot.writeI32(struct.i32Field);
            }
            if (struct.isSetI64Field()) {
                oprot.writeI64(struct.i64Field);
            }
            if (struct.isSetDoubleField()) {
                oprot.writeDouble(struct.doubleField);
            }
            if (struct.isSetStringField()) {
                oprot.writeString(struct.stringField);
            }
            if (struct.isSetEnumField()) {
                oprot.writeI32(struct.enumField.getValue());
            }
            if (struct.isSetBinaryField()) {
                oprot.writeBinary(struct.binaryField);
            }
            if (struct.isSetByteList()) {
                {
                    oprot.writeI32(struct.byteList.size());
                    for (byte _iter195 : struct.byteList) {
                        oprot.writeByte(_iter195);
                    }
                }
            }
            if (struct.isSetI16List()) {
                {
                    oprot.writeI32(struct.i16List.size());
                    for (short _iter196 : struct.i16List) {
                        oprot.writeI16(_iter196);
                    }
                }
            }
            if (struct.isSetI32List()) {
                {
                    oprot.writeI32(struct.i32List.size());
                    for (int _iter197 : struct.i32List) {
                        oprot.writeI32(_iter197);
                    }
                }
            }
            if (struct.isSetI64List()) {
                {
                    oprot.writeI32(struct.i64List.size());
                    for (long _iter198 : struct.i64List) {
                        oprot.writeI64(_iter198);
                    }
                }
            }
            if (struct.isSetDoubleList()) {
                {
                    oprot.writeI32(struct.doubleList.size());
                    for (double _iter199 : struct.doubleList) {
                        oprot.writeDouble(_iter199);
                    }
                }
            }
            if (struct.isSetStringList()) {
                {
                    oprot.writeI32(struct.stringList.size());
                    for (java.lang.String _iter200 : struct.stringList) {
                        oprot.writeString(_iter200);
                    }
                }
            }
            if (struct.isSetEnumList()) {
                {
                    oprot.writeI32(struct.enumList.size());
                    for (TstEnum _iter201 : struct.enumList) {
                        oprot.writeI32(_iter201.getValue());
                    }
                }
            }
            if (struct.isSetListList()) {
                {
                    oprot.writeI32(struct.listList.size());
                    for (java.util.List<java.lang.Integer> _iter202 : struct.listList) {
                        {
                            oprot.writeI32(_iter202.size());
                            for (int _iter203 : _iter202) {
                                oprot.writeI32(_iter203);
                            }
                        }
                    }
                }
            }
            if (struct.isSetSetList()) {
                {
                    oprot.writeI32(struct.setList.size());
                    for (java.util.Set<java.lang.Integer> _iter204 : struct.setList) {
                        {
                            oprot.writeI32(_iter204.size());
                            for (int _iter205 : _iter204) {
                                oprot.writeI32(_iter205);
                            }
                        }
                    }
                }
            }
            if (struct.isSetMapList()) {
                {
                    oprot.writeI32(struct.mapList.size());
                    for (java.util.Map<java.lang.String, java.lang.Integer> _iter206 : struct.mapList) {
                        {
                            oprot.writeI32(_iter206.size());
                            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter207 : _iter206.entrySet()) {
                                oprot.writeString(_iter207.getKey());
                                oprot.writeI32(_iter207.getValue());
                            }
                        }
                    }
                }
            }
            if (struct.isSetStructList()) {
                {
                    oprot.writeI32(struct.structList.size());
                    for (SmallStruct _iter208 : struct.structList) {
                        _iter208.write(oprot);
                    }
                }
            }
            if (struct.isSetBinaryList()) {
                {
                    oprot.writeI32(struct.binaryList.size());
                    for (java.nio.ByteBuffer _iter209 : struct.binaryList) {
                        oprot.writeBinary(_iter209);
                    }
                }
            }
            if (struct.isSetByteSet()) {
                {
                    oprot.writeI32(struct.byteSet.size());
                    for (byte _iter210 : struct.byteSet) {
                        oprot.writeByte(_iter210);
                    }
                }
            }
            if (struct.isSetI16Set()) {
                {
                    oprot.writeI32(struct.i16Set.size());
                    for (short _iter211 : struct.i16Set) {
                        oprot.writeI16(_iter211);
                    }
                }
            }
            if (struct.isSetI32Set()) {
                {
                    oprot.writeI32(struct.i32Set.size());
                    for (int _iter212 : struct.i32Set) {
                        oprot.writeI32(_iter212);
                    }
                }
            }
            if (struct.isSetI64Set()) {
                {
                    oprot.writeI32(struct.i64Set.size());
                    for (long _iter213 : struct.i64Set) {
                        oprot.writeI64(_iter213);
                    }
                }
            }
            if (struct.isSetDoubleSet()) {
                {
                    oprot.writeI32(struct.doubleSet.size());
                    for (double _iter214 : struct.doubleSet) {
                        oprot.writeDouble(_iter214);
                    }
                }
            }
            if (struct.isSetStringSet()) {
                {
                    oprot.writeI32(struct.stringSet.size());
                    for (java.lang.String _iter215 : struct.stringSet) {
                        oprot.writeString(_iter215);
                    }
                }
            }
            if (struct.isSetEnumSet()) {
                {
                    oprot.writeI32(struct.enumSet.size());
                    for (TstEnum _iter216 : struct.enumSet) {
                        oprot.writeI32(_iter216.getValue());
                    }
                }
            }
            if (struct.isSetListSet()) {
                {
                    oprot.writeI32(struct.listSet.size());
                    for (java.util.List<java.lang.Integer> _iter217 : struct.listSet) {
                        {
                            oprot.writeI32(_iter217.size());
                            for (int _iter218 : _iter217) {
                                oprot.writeI32(_iter218);
                            }
                        }
                    }
                }
            }
            if (struct.isSetSetSet()) {
                {
                    oprot.writeI32(struct.setSet.size());
                    for (java.util.Set<java.lang.Integer> _iter219 : struct.setSet) {
                        {
                            oprot.writeI32(_iter219.size());
                            for (int _iter220 : _iter219) {
                                oprot.writeI32(_iter220);
                            }
                        }
                    }
                }
            }
            if (struct.isSetMapSet()) {
                {
                    oprot.writeI32(struct.mapSet.size());
                    for (java.util.Map<java.lang.String, java.lang.Integer> _iter221 : struct.mapSet) {
                        {
                            oprot.writeI32(_iter221.size());
                            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter222 : _iter221.entrySet()) {
                                oprot.writeString(_iter222.getKey());
                                oprot.writeI32(_iter222.getValue());
                            }
                        }
                    }
                }
            }
            if (struct.isSetStructSet()) {
                {
                    oprot.writeI32(struct.structSet.size());
                    for (SmallStruct _iter223 : struct.structSet) {
                        _iter223.write(oprot);
                    }
                }
            }
            if (struct.isSetBinarySet()) {
                {
                    oprot.writeI32(struct.binarySet.size());
                    for (java.nio.ByteBuffer _iter224 : struct.binarySet) {
                        oprot.writeBinary(_iter224);
                    }
                }
            }
            if (struct.isSetByteMap()) {
                {
                    oprot.writeI32(struct.byteMap.size());
                    for (java.util.Map.Entry<java.lang.Byte, java.lang.Byte> _iter225 : struct.byteMap.entrySet()) {
                        oprot.writeByte(_iter225.getKey());
                        oprot.writeByte(_iter225.getValue());
                    }
                }
            }
            if (struct.isSetI16Map()) {
                {
                    oprot.writeI32(struct.i16Map.size());
                    for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter226 : struct.i16Map.entrySet()) {
                        oprot.writeI16(_iter226.getKey());
                        oprot.writeI16(_iter226.getValue());
                    }
                }
            }
            if (struct.isSetI32Map()) {
                {
                    oprot.writeI32(struct.i32Map.size());
                    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter227 : struct.i32Map.entrySet()) {
                        oprot.writeI32(_iter227.getKey());
                        oprot.writeI32(_iter227.getValue());
                    }
                }
            }
            if (struct.isSetI64Map()) {
                {
                    oprot.writeI32(struct.i64Map.size());
                    for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter228 : struct.i64Map.entrySet()) {
                        oprot.writeI64(_iter228.getKey());
                        oprot.writeI64(_iter228.getValue());
                    }
                }
            }
            if (struct.isSetDoubleMap()) {
                {
                    oprot.writeI32(struct.doubleMap.size());
                    for (java.util.Map.Entry<java.lang.Double, java.lang.Double> _iter229 : struct.doubleMap.entrySet()) {
                        oprot.writeDouble(_iter229.getKey());
                        oprot.writeDouble(_iter229.getValue());
                    }
                }
            }
            if (struct.isSetStringMap()) {
                {
                    oprot.writeI32(struct.stringMap.size());
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter230 : struct.stringMap.entrySet()) {
                        oprot.writeString(_iter230.getKey());
                        oprot.writeString(_iter230.getValue());
                    }
                }
            }
            if (struct.isSetEnumMap()) {
                {
                    oprot.writeI32(struct.enumMap.size());
                    for (java.util.Map.Entry<TstEnum, TstEnum> _iter231 : struct.enumMap.entrySet()) {
                        oprot.writeI32(_iter231.getKey().getValue());
                        oprot.writeI32(_iter231.getValue().getValue());
                    }
                }
            }
            if (struct.isSetListMap()) {
                {
                    oprot.writeI32(struct.listMap.size());
                    for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter232 : struct.listMap.entrySet()) {
                        oprot.writeI32(_iter232.getKey());
                        {
                            oprot.writeI32(_iter232.getValue().size());
                            for (int _iter233 : _iter232.getValue()) {
                                oprot.writeI32(_iter233);
                            }
                        }
                    }
                }
            }
            if (struct.isSetSetMap()) {
                {
                    oprot.writeI32(struct.setMap.size());
                    for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.lang.Integer>> _iter234 : struct.setMap.entrySet()) {
                        oprot.writeI32(_iter234.getKey());
                        {
                            oprot.writeI32(_iter234.getValue().size());
                            for (int _iter235 : _iter234.getValue()) {
                                oprot.writeI32(_iter235);
                            }
                        }
                    }
                }
            }
            if (struct.isSetMapMap()) {
                {
                    oprot.writeI32(struct.mapMap.size());
                    for (java.util.Map.Entry<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>> _iter236 : struct.mapMap.entrySet()) {
                        oprot.writeI32(_iter236.getKey());
                        {
                            oprot.writeI32(_iter236.getValue().size());
                            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter237 : _iter236.getValue().entrySet()) {
                                oprot.writeI32(_iter237.getKey());
                                oprot.writeI32(_iter237.getValue());
                            }
                        }
                    }
                }
            }
            if (struct.isSetStructMap()) {
                {
                    oprot.writeI32(struct.structMap.size());
                    for (java.util.Map.Entry<SmallStruct, SmallStruct> _iter238 : struct.structMap.entrySet()) {
                        _iter238.getKey().write(oprot);
                        _iter238.getValue().write(oprot);
                    }
                }
            }
            if (struct.isSetBinaryMap()) {
                {
                    oprot.writeI32(struct.binaryMap.size());
                    for (java.util.Map.Entry<java.lang.Integer, java.nio.ByteBuffer> _iter239 : struct.binaryMap.entrySet()) {
                        oprot.writeI32(_iter239.getKey());
                        oprot.writeBinary(_iter239.getValue());
                    }
                }
            }
            if (struct.isSetStructField()) {
                struct.structField.write(oprot);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TestStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(45);
            if (incoming.get(0)) {
                struct.byteField = iprot.readByte();
                struct.setByteFieldIsSet(true);
            }
            if (incoming.get(1)) {
                struct.i16Field = iprot.readI16();
                struct.setI16FieldIsSet(true);
            }
            if (incoming.get(2)) {
                struct.i32Field = iprot.readI32();
                struct.setI32FieldIsSet(true);
            }
            if (incoming.get(3)) {
                struct.i64Field = iprot.readI64();
                struct.setI64FieldIsSet(true);
            }
            if (incoming.get(4)) {
                struct.doubleField = iprot.readDouble();
                struct.setDoubleFieldIsSet(true);
            }
            if (incoming.get(5)) {
                struct.stringField = iprot.readString();
                struct.setStringFieldIsSet(true);
            }
            if (incoming.get(6)) {
                struct.enumField = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                struct.setEnumFieldIsSet(true);
            }
            if (incoming.get(7)) {
                struct.binaryField = iprot.readBinary();
                struct.setBinaryFieldIsSet(true);
            }
            if (incoming.get(8)) {
                {
                    org.apache.thrift.protocol.TList _list240 = iprot.readListBegin(org.apache.thrift.protocol.TType.BYTE);
                    struct.byteList = new java.util.ArrayList<java.lang.Byte>(_list240.size);
                    byte _elem241;
                    for (int _i242 = 0; _i242 < _list240.size; ++_i242) {
                        _elem241 = iprot.readByte();
                        struct.byteList.add(_elem241);
                    }
                }
                struct.setByteListIsSet(true);
            }
            if (incoming.get(9)) {
                {
                    org.apache.thrift.protocol.TList _list243 = iprot.readListBegin(org.apache.thrift.protocol.TType.I16);
                    struct.i16List = new java.util.ArrayList<java.lang.Short>(_list243.size);
                    short _elem244;
                    for (int _i245 = 0; _i245 < _list243.size; ++_i245) {
                        _elem244 = iprot.readI16();
                        struct.i16List.add(_elem244);
                    }
                }
                struct.setI16ListIsSet(true);
            }
            if (incoming.get(10)) {
                {
                    org.apache.thrift.protocol.TList _list246 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
                    struct.i32List = new java.util.ArrayList<java.lang.Integer>(_list246.size);
                    int _elem247;
                    for (int _i248 = 0; _i248 < _list246.size; ++_i248) {
                        _elem247 = iprot.readI32();
                        struct.i32List.add(_elem247);
                    }
                }
                struct.setI32ListIsSet(true);
            }
            if (incoming.get(11)) {
                {
                    org.apache.thrift.protocol.TList _list249 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
                    struct.i64List = new java.util.ArrayList<java.lang.Long>(_list249.size);
                    long _elem250;
                    for (int _i251 = 0; _i251 < _list249.size; ++_i251) {
                        _elem250 = iprot.readI64();
                        struct.i64List.add(_elem250);
                    }
                }
                struct.setI64ListIsSet(true);
            }
            if (incoming.get(12)) {
                {
                    org.apache.thrift.protocol.TList _list252 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                    struct.doubleList = new java.util.ArrayList<java.lang.Double>(_list252.size);
                    double _elem253;
                    for (int _i254 = 0; _i254 < _list252.size; ++_i254) {
                        _elem253 = iprot.readDouble();
                        struct.doubleList.add(_elem253);
                    }
                }
                struct.setDoubleListIsSet(true);
            }
            if (incoming.get(13)) {
                {
                    org.apache.thrift.protocol.TList _list255 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                    struct.stringList = new java.util.ArrayList<java.lang.String>(_list255.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem256;
                    for (int _i257 = 0; _i257 < _list255.size; ++_i257) {
                        _elem256 = iprot.readString();
                        struct.stringList.add(_elem256);
                    }
                }
                struct.setStringListIsSet(true);
            }
            if (incoming.get(14)) {
                {
                    org.apache.thrift.protocol.TList _list258 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
                    struct.enumList = new java.util.ArrayList<TstEnum>(_list258.size);
                    @org.apache.thrift.annotation.Nullable TstEnum _elem259;
                    for (int _i260 = 0; _i260 < _list258.size; ++_i260) {
                        _elem259 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                        if (_elem259 != null) {
                            struct.enumList.add(_elem259);
                        }
                    }
                }
                struct.setEnumListIsSet(true);
            }
            if (incoming.get(15)) {
                {
                    org.apache.thrift.protocol.TList _list261 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
                    struct.listList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list261.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem262;
                    for (int _i263 = 0; _i263 < _list261.size; ++_i263) {
                        {
                            org.apache.thrift.protocol.TList _list264 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
                            _elem262 = new java.util.ArrayList<java.lang.Integer>(_list264.size);
                            int _elem265;
                            for (int _i266 = 0; _i266 < _list264.size; ++_i266) {
                                _elem265 = iprot.readI32();
                                _elem262.add(_elem265);
                            }
                        }
                        struct.listList.add(_elem262);
                    }
                }
                struct.setListListIsSet(true);
            }
            if (incoming.get(16)) {
                {
                    org.apache.thrift.protocol.TList _list267 = iprot.readListBegin(org.apache.thrift.protocol.TType.SET);
                    struct.setList = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(_list267.size);
                    @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem268;
                    for (int _i269 = 0; _i269 < _list267.size; ++_i269) {
                        {
                            org.apache.thrift.protocol.TSet _set270 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
                            _elem268 = new java.util.HashSet<java.lang.Integer>(2 * _set270.size);
                            int _elem271;
                            for (int _i272 = 0; _i272 < _set270.size; ++_i272) {
                                _elem271 = iprot.readI32();
                                _elem268.add(_elem271);
                            }
                        }
                        struct.setList.add(_elem268);
                    }
                }
                struct.setSetListIsSet(true);
            }
            if (incoming.get(17)) {
                {
                    org.apache.thrift.protocol.TList _list273 = iprot.readListBegin(org.apache.thrift.protocol.TType.MAP);
                    struct.mapList = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Integer>>(_list273.size);
                    @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Integer> _elem274;
                    for (int _i275 = 0; _i275 < _list273.size; ++_i275) {
                        {
                            org.apache.thrift.protocol.TMap _map276 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32);
                            _elem274 = new java.util.HashMap<java.lang.String, java.lang.Integer>(2 * _map276.size);
                            @org.apache.thrift.annotation.Nullable java.lang.String _key277;
                            int _val278;
                            for (int _i279 = 0; _i279 < _map276.size; ++_i279) {
                                _key277 = iprot.readString();
                                _val278 = iprot.readI32();
                                _elem274.put(_key277, _val278);
                            }
                        }
                        struct.mapList.add(_elem274);
                    }
                }
                struct.setMapListIsSet(true);
            }
            if (incoming.get(18)) {
                {
                    org.apache.thrift.protocol.TList _list280 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.structList = new java.util.ArrayList<SmallStruct>(_list280.size);
                    @org.apache.thrift.annotation.Nullable SmallStruct _elem281;
                    for (int _i282 = 0; _i282 < _list280.size; ++_i282) {
                        _elem281 = new SmallStruct();
                        _elem281.read(iprot);
                        struct.structList.add(_elem281);
                    }
                }
                struct.setStructListIsSet(true);
            }
            if (incoming.get(19)) {
                {
                    org.apache.thrift.protocol.TList _list283 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                    struct.binaryList = new java.util.ArrayList<java.nio.ByteBuffer>(_list283.size);
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem284;
                    for (int _i285 = 0; _i285 < _list283.size; ++_i285) {
                        _elem284 = iprot.readBinary();
                        struct.binaryList.add(_elem284);
                    }
                }
                struct.setBinaryListIsSet(true);
            }
            if (incoming.get(20)) {
                {
                    org.apache.thrift.protocol.TSet _set286 = iprot.readSetBegin(org.apache.thrift.protocol.TType.BYTE);
                    struct.byteSet = new java.util.HashSet<java.lang.Byte>(2 * _set286.size);
                    byte _elem287;
                    for (int _i288 = 0; _i288 < _set286.size; ++_i288) {
                        _elem287 = iprot.readByte();
                        struct.byteSet.add(_elem287);
                    }
                }
                struct.setByteSetIsSet(true);
            }
            if (incoming.get(21)) {
                {
                    org.apache.thrift.protocol.TSet _set289 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I16);
                    struct.i16Set = new java.util.HashSet<java.lang.Short>(2 * _set289.size);
                    short _elem290;
                    for (int _i291 = 0; _i291 < _set289.size; ++_i291) {
                        _elem290 = iprot.readI16();
                        struct.i16Set.add(_elem290);
                    }
                }
                struct.setI16SetIsSet(true);
            }
            if (incoming.get(22)) {
                {
                    org.apache.thrift.protocol.TSet _set292 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
                    struct.i32Set = new java.util.HashSet<java.lang.Integer>(2 * _set292.size);
                    int _elem293;
                    for (int _i294 = 0; _i294 < _set292.size; ++_i294) {
                        _elem293 = iprot.readI32();
                        struct.i32Set.add(_elem293);
                    }
                }
                struct.setI32SetIsSet(true);
            }
            if (incoming.get(23)) {
                {
                    org.apache.thrift.protocol.TSet _set295 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I64);
                    struct.i64Set = new java.util.HashSet<java.lang.Long>(2 * _set295.size);
                    long _elem296;
                    for (int _i297 = 0; _i297 < _set295.size; ++_i297) {
                        _elem296 = iprot.readI64();
                        struct.i64Set.add(_elem296);
                    }
                }
                struct.setI64SetIsSet(true);
            }
            if (incoming.get(24)) {
                {
                    org.apache.thrift.protocol.TSet _set298 = iprot.readSetBegin(org.apache.thrift.protocol.TType.DOUBLE);
                    struct.doubleSet = new java.util.HashSet<java.lang.Double>(2 * _set298.size);
                    double _elem299;
                    for (int _i300 = 0; _i300 < _set298.size; ++_i300) {
                        _elem299 = iprot.readDouble();
                        struct.doubleSet.add(_elem299);
                    }
                }
                struct.setDoubleSetIsSet(true);
            }
            if (incoming.get(25)) {
                {
                    org.apache.thrift.protocol.TSet _set301 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
                    struct.stringSet = new java.util.HashSet<java.lang.String>(2 * _set301.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem302;
                    for (int _i303 = 0; _i303 < _set301.size; ++_i303) {
                        _elem302 = iprot.readString();
                        struct.stringSet.add(_elem302);
                    }
                }
                struct.setStringSetIsSet(true);
            }
            if (incoming.get(26)) {
                {
                    org.apache.thrift.protocol.TSet _set304 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
                    struct.enumSet = java.util.EnumSet.noneOf(TstEnum.class);
                    @org.apache.thrift.annotation.Nullable TstEnum _elem305;
                    for (int _i306 = 0; _i306 < _set304.size; ++_i306) {
                        _elem305 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                        if (_elem305 != null) {
                            struct.enumSet.add(_elem305);
                        }
                    }
                }
                struct.setEnumSetIsSet(true);
            }
            if (incoming.get(27)) {
                {
                    org.apache.thrift.protocol.TSet _set307 = iprot.readSetBegin(org.apache.thrift.protocol.TType.LIST);
                    struct.listSet = new java.util.HashSet<java.util.List<java.lang.Integer>>(2 * _set307.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem308;
                    for (int _i309 = 0; _i309 < _set307.size; ++_i309) {
                        {
                            org.apache.thrift.protocol.TList _list310 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
                            _elem308 = new java.util.ArrayList<java.lang.Integer>(_list310.size);
                            int _elem311;
                            for (int _i312 = 0; _i312 < _list310.size; ++_i312) {
                                _elem311 = iprot.readI32();
                                _elem308.add(_elem311);
                            }
                        }
                        struct.listSet.add(_elem308);
                    }
                }
                struct.setListSetIsSet(true);
            }
            if (incoming.get(28)) {
                {
                    org.apache.thrift.protocol.TSet _set313 = iprot.readSetBegin(org.apache.thrift.protocol.TType.SET);
                    struct.setSet = new java.util.HashSet<java.util.Set<java.lang.Integer>>(2 * _set313.size);
                    @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem314;
                    for (int _i315 = 0; _i315 < _set313.size; ++_i315) {
                        {
                            org.apache.thrift.protocol.TSet _set316 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
                            _elem314 = new java.util.HashSet<java.lang.Integer>(2 * _set316.size);
                            int _elem317;
                            for (int _i318 = 0; _i318 < _set316.size; ++_i318) {
                                _elem317 = iprot.readI32();
                                _elem314.add(_elem317);
                            }
                        }
                        struct.setSet.add(_elem314);
                    }
                }
                struct.setSetSetIsSet(true);
            }
            if (incoming.get(29)) {
                {
                    org.apache.thrift.protocol.TSet _set319 = iprot.readSetBegin(org.apache.thrift.protocol.TType.MAP);
                    struct.mapSet = new java.util.HashSet<java.util.Map<java.lang.String, java.lang.Integer>>(2 * _set319.size);
                    @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Integer> _elem320;
                    for (int _i321 = 0; _i321 < _set319.size; ++_i321) {
                        {
                            org.apache.thrift.protocol.TMap _map322 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32);
                            _elem320 = new java.util.HashMap<java.lang.String, java.lang.Integer>(2 * _map322.size);
                            @org.apache.thrift.annotation.Nullable java.lang.String _key323;
                            int _val324;
                            for (int _i325 = 0; _i325 < _map322.size; ++_i325) {
                                _key323 = iprot.readString();
                                _val324 = iprot.readI32();
                                _elem320.put(_key323, _val324);
                            }
                        }
                        struct.mapSet.add(_elem320);
                    }
                }
                struct.setMapSetIsSet(true);
            }
            if (incoming.get(30)) {
                {
                    org.apache.thrift.protocol.TSet _set326 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
                    struct.structSet = new java.util.HashSet<SmallStruct>(2 * _set326.size);
                    @org.apache.thrift.annotation.Nullable SmallStruct _elem327;
                    for (int _i328 = 0; _i328 < _set326.size; ++_i328) {
                        _elem327 = new SmallStruct();
                        _elem327.read(iprot);
                        struct.structSet.add(_elem327);
                    }
                }
                struct.setStructSetIsSet(true);
            }
            if (incoming.get(31)) {
                {
                    org.apache.thrift.protocol.TSet _set329 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
                    struct.binarySet = new java.util.HashSet<java.nio.ByteBuffer>(2 * _set329.size);
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem330;
                    for (int _i331 = 0; _i331 < _set329.size; ++_i331) {
                        _elem330 = iprot.readBinary();
                        struct.binarySet.add(_elem330);
                    }
                }
                struct.setBinarySetIsSet(true);
            }
            if (incoming.get(32)) {
                {
                    org.apache.thrift.protocol.TMap _map332 = iprot.readMapBegin(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE);
                    struct.byteMap = new java.util.HashMap<java.lang.Byte, java.lang.Byte>(2 * _map332.size);
                    byte _key333;
                    byte _val334;
                    for (int _i335 = 0; _i335 < _map332.size; ++_i335) {
                        _key333 = iprot.readByte();
                        _val334 = iprot.readByte();
                        struct.byteMap.put(_key333, _val334);
                    }
                }
                struct.setByteMapIsSet(true);
            }
            if (incoming.get(33)) {
                {
                    org.apache.thrift.protocol.TMap _map336 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16);
                    struct.i16Map = new java.util.HashMap<java.lang.Short, java.lang.Short>(2 * _map336.size);
                    short _key337;
                    short _val338;
                    for (int _i339 = 0; _i339 < _map336.size; ++_i339) {
                        _key337 = iprot.readI16();
                        _val338 = iprot.readI16();
                        struct.i16Map.put(_key337, _val338);
                    }
                }
                struct.setI16MapIsSet(true);
            }
            if (incoming.get(34)) {
                {
                    org.apache.thrift.protocol.TMap _map340 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32);
                    struct.i32Map = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(2 * _map340.size);
                    int _key341;
                    int _val342;
                    for (int _i343 = 0; _i343 < _map340.size; ++_i343) {
                        _key341 = iprot.readI32();
                        _val342 = iprot.readI32();
                        struct.i32Map.put(_key341, _val342);
                    }
                }
                struct.setI32MapIsSet(true);
            }
            if (incoming.get(35)) {
                {
                    org.apache.thrift.protocol.TMap _map344 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64);
                    struct.i64Map = new java.util.HashMap<java.lang.Long, java.lang.Long>(2 * _map344.size);
                    long _key345;
                    long _val346;
                    for (int _i347 = 0; _i347 < _map344.size; ++_i347) {
                        _key345 = iprot.readI64();
                        _val346 = iprot.readI64();
                        struct.i64Map.put(_key345, _val346);
                    }
                }
                struct.setI64MapIsSet(true);
            }
            if (incoming.get(36)) {
                {
                    org.apache.thrift.protocol.TMap _map348 = iprot.readMapBegin(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.DOUBLE);
                    struct.doubleMap = new java.util.HashMap<java.lang.Double, java.lang.Double>(2 * _map348.size);
                    double _key349;
                    double _val350;
                    for (int _i351 = 0; _i351 < _map348.size; ++_i351) {
                        _key349 = iprot.readDouble();
                        _val350 = iprot.readDouble();
                        struct.doubleMap.put(_key349, _val350);
                    }
                }
                struct.setDoubleMapIsSet(true);
            }
            if (incoming.get(37)) {
                {
                    org.apache.thrift.protocol.TMap _map352 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
                    struct.stringMap = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map352.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key353;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val354;
                    for (int _i355 = 0; _i355 < _map352.size; ++_i355) {
                        _key353 = iprot.readString();
                        _val354 = iprot.readString();
                        struct.stringMap.put(_key353, _val354);
                    }
                }
                struct.setStringMapIsSet(true);
            }
            if (incoming.get(38)) {
                {
                    org.apache.thrift.protocol.TMap _map356 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32);
                    struct.enumMap = new java.util.EnumMap<TstEnum, TstEnum>(TstEnum.class);
                    @org.apache.thrift.annotation.Nullable TstEnum _key357;
                    @org.apache.thrift.annotation.Nullable TstEnum _val358;
                    for (int _i359 = 0; _i359 < _map356.size; ++_i359) {
                        _key357 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                        _val358 = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                        if (_key357 != null) {
                            struct.enumMap.put(_key357, _val358);
                        }
                    }
                }
                struct.setEnumMapIsSet(true);
            }
            if (incoming.get(39)) {
                {
                    org.apache.thrift.protocol.TMap _map360 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST);
                    struct.listMap = new java.util.HashMap<java.lang.Integer, java.util.List<java.lang.Integer>>(2 * _map360.size);
                    int _key361;
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val362;
                    for (int _i363 = 0; _i363 < _map360.size; ++_i363) {
                        _key361 = iprot.readI32();
                        {
                            org.apache.thrift.protocol.TList _list364 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
                            _val362 = new java.util.ArrayList<java.lang.Integer>(_list364.size);
                            int _elem365;
                            for (int _i366 = 0; _i366 < _list364.size; ++_i366) {
                                _elem365 = iprot.readI32();
                                _val362.add(_elem365);
                            }
                        }
                        struct.listMap.put(_key361, _val362);
                    }
                }
                struct.setListMapIsSet(true);
            }
            if (incoming.get(40)) {
                {
                    org.apache.thrift.protocol.TMap _map367 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET);
                    struct.setMap = new java.util.HashMap<java.lang.Integer, java.util.Set<java.lang.Integer>>(2 * _map367.size);
                    int _key368;
                    @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _val369;
                    for (int _i370 = 0; _i370 < _map367.size; ++_i370) {
                        _key368 = iprot.readI32();
                        {
                            org.apache.thrift.protocol.TSet _set371 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
                            _val369 = new java.util.HashSet<java.lang.Integer>(2 * _set371.size);
                            int _elem372;
                            for (int _i373 = 0; _i373 < _set371.size; ++_i373) {
                                _elem372 = iprot.readI32();
                                _val369.add(_elem372);
                            }
                        }
                        struct.setMap.put(_key368, _val369);
                    }
                }
                struct.setSetMapIsSet(true);
            }
            if (incoming.get(41)) {
                {
                    org.apache.thrift.protocol.TMap _map374 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP);
                    struct.mapMap = new java.util.HashMap<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer>>(2 * _map374.size);
                    int _key375;
                    @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer, java.lang.Integer> _val376;
                    for (int _i377 = 0; _i377 < _map374.size; ++_i377) {
                        _key375 = iprot.readI32();
                        {
                            org.apache.thrift.protocol.TMap _map378 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32);
                            _val376 = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(2 * _map378.size);
                            int _key379;
                            int _val380;
                            for (int _i381 = 0; _i381 < _map378.size; ++_i381) {
                                _key379 = iprot.readI32();
                                _val380 = iprot.readI32();
                                _val376.put(_key379, _val380);
                            }
                        }
                        struct.mapMap.put(_key375, _val376);
                    }
                }
                struct.setMapMapIsSet(true);
            }
            if (incoming.get(42)) {
                {
                    org.apache.thrift.protocol.TMap _map382 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT);
                    struct.structMap = new java.util.HashMap<SmallStruct, SmallStruct>(2 * _map382.size);
                    @org.apache.thrift.annotation.Nullable SmallStruct _key383;
                    @org.apache.thrift.annotation.Nullable SmallStruct _val384;
                    for (int _i385 = 0; _i385 < _map382.size; ++_i385) {
                        _key383 = new SmallStruct();
                        _key383.read(iprot);
                        _val384 = new SmallStruct();
                        _val384.read(iprot);
                        struct.structMap.put(_key383, _val384);
                    }
                }
                struct.setStructMapIsSet(true);
            }
            if (incoming.get(43)) {
                {
                    org.apache.thrift.protocol.TMap _map386 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING);
                    struct.binaryMap = new java.util.HashMap<java.lang.Integer, java.nio.ByteBuffer>(2 * _map386.size);
                    int _key387;
                    @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val388;
                    for (int _i389 = 0; _i389 < _map386.size; ++_i389) {
                        _key387 = iprot.readI32();
                        _val388 = iprot.readBinary();
                        struct.binaryMap.put(_key387, _val388);
                    }
                }
                struct.setBinaryMapIsSet(true);
            }
            if (incoming.get(44)) {
                struct.structField = new SmallStruct();
                struct.structField.read(iprot);
                struct.setStructFieldIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

