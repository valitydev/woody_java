/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.thrift.partial;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SmallStruct implements org.apache.thrift.TBase<SmallStruct, SmallStruct._Fields>, java.io.Serializable, Cloneable, Comparable<SmallStruct> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmallStruct");

    private static final org.apache.thrift.protocol.TField BYTE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("byteField", org.apache.thrift.protocol.TType.BYTE, (short) 1);
    private static final org.apache.thrift.protocol.TField I16_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Field", org.apache.thrift.protocol.TType.I16, (short) 2);
    private static final org.apache.thrift.protocol.TField I32_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Field", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField I64_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Field", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField DOUBLE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleField", org.apache.thrift.protocol.TType.DOUBLE, (short) 5);
    private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("stringField", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField ENUM_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("enumField", org.apache.thrift.protocol.TType.I32, (short) 7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SmallStructStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SmallStructTupleSchemeFactory();

    public byte byteField; // optional
    public short i16Field; // optional
    public int i32Field; // optional
    public long i64Field; // optional
    public double doubleField; // optional
    public @org.apache.thrift.annotation.Nullable java.lang.String stringField; // optional
    /**
     *
     * @see TstEnum
     */
    public @org.apache.thrift.annotation.Nullable TstEnum enumField; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BYTE_FIELD((short) 1, "byteField"),
        I16_FIELD((short) 2, "i16Field"),
        I32_FIELD((short) 3, "i32Field"),
        I64_FIELD((short) 4, "i64Field"),
        DOUBLE_FIELD((short) 5, "doubleField"),
        STRING_FIELD((short) 6, "stringField"),
        /**
         *
         * @see TstEnum
         */
        ENUM_FIELD((short) 7, "enumField");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // BYTE_FIELD
                    return BYTE_FIELD;
                case 2: // I16_FIELD
                    return I16_FIELD;
                case 3: // I32_FIELD
                    return I32_FIELD;
                case 4: // I64_FIELD
                    return I64_FIELD;
                case 5: // DOUBLE_FIELD
                    return DOUBLE_FIELD;
                case 6: // STRING_FIELD
                    return STRING_FIELD;
                case 7: // ENUM_FIELD
                    return ENUM_FIELD;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __BYTEFIELD_ISSET_ID = 0;
    private static final int __I16FIELD_ISSET_ID = 1;
    private static final int __I32FIELD_ISSET_ID = 2;
    private static final int __I64FIELD_ISSET_ID = 3;
    private static final int __DOUBLEFIELD_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.BYTE_FIELD, _Fields.I16_FIELD, _Fields.I32_FIELD, _Fields.I64_FIELD, _Fields.DOUBLE_FIELD, _Fields.STRING_FIELD, _Fields.ENUM_FIELD};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BYTE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("byteField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
        tmpMap.put(_Fields.I16_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i16Field", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
        tmpMap.put(_Fields.I32_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i32Field", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.I64_FIELD, new org.apache.thrift.meta_data.FieldMetaData("i64Field", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DOUBLE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("doubleField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("stringField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ENUM_FIELD, new org.apache.thrift.meta_data.FieldMetaData("enumField", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TstEnum.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmallStruct.class, metaDataMap);
    }

    public SmallStruct() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SmallStruct(SmallStruct other) {
        __isset_bitfield = other.__isset_bitfield;
        this.byteField = other.byteField;
        this.i16Field = other.i16Field;
        this.i32Field = other.i32Field;
        this.i64Field = other.i64Field;
        this.doubleField = other.doubleField;
        if (other.isSetStringField()) {
            this.stringField = other.stringField;
        }
        if (other.isSetEnumField()) {
            this.enumField = other.enumField;
        }
    }

    @Override
    public SmallStruct deepCopy() {
        return new SmallStruct(this);
    }

    @Override
    public void clear() {
        setByteFieldIsSet(false);
        this.byteField = 0;
        setI16FieldIsSet(false);
        this.i16Field = 0;
        setI32FieldIsSet(false);
        this.i32Field = 0;
        setI64FieldIsSet(false);
        this.i64Field = 0;
        setDoubleFieldIsSet(false);
        this.doubleField = 0.0;
        this.stringField = null;
        this.enumField = null;
    }

    public byte getByteField() {
        return this.byteField;
    }

    public SmallStruct setByteField(byte byteField) {
        this.byteField = byteField;
        setByteFieldIsSet(true);
        return this;
    }

    public void unsetByteField() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTEFIELD_ISSET_ID);
    }

    /** Returns true if field byteField is set (has been assigned a value) and false otherwise */
    public boolean isSetByteField() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTEFIELD_ISSET_ID);
    }

    public void setByteFieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTEFIELD_ISSET_ID, value);
    }

    public short getI16Field() {
        return this.i16Field;
    }

    public SmallStruct setI16Field(short i16Field) {
        this.i16Field = i16Field;
        setI16FieldIsSet(true);
        return this;
    }

    public void unsetI16Field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I16FIELD_ISSET_ID);
    }

    /** Returns true if field i16Field is set (has been assigned a value) and false otherwise */
    public boolean isSetI16Field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I16FIELD_ISSET_ID);
    }

    public void setI16FieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I16FIELD_ISSET_ID, value);
    }

    public int getI32Field() {
        return this.i32Field;
    }

    public SmallStruct setI32Field(int i32Field) {
        this.i32Field = i32Field;
        setI32FieldIsSet(true);
        return this;
    }

    public void unsetI32Field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I32FIELD_ISSET_ID);
    }

    /** Returns true if field i32Field is set (has been assigned a value) and false otherwise */
    public boolean isSetI32Field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I32FIELD_ISSET_ID);
    }

    public void setI32FieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I32FIELD_ISSET_ID, value);
    }

    public long getI64Field() {
        return this.i64Field;
    }

    public SmallStruct setI64Field(long i64Field) {
        this.i64Field = i64Field;
        setI64FieldIsSet(true);
        return this;
    }

    public void unsetI64Field() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I64FIELD_ISSET_ID);
    }

    /** Returns true if field i64Field is set (has been assigned a value) and false otherwise */
    public boolean isSetI64Field() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I64FIELD_ISSET_ID);
    }

    public void setI64FieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I64FIELD_ISSET_ID, value);
    }

    public double getDoubleField() {
        return this.doubleField;
    }

    public SmallStruct setDoubleField(double doubleField) {
        this.doubleField = doubleField;
        setDoubleFieldIsSet(true);
        return this;
    }

    public void unsetDoubleField() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID);
    }

    /** Returns true if field doubleField is set (has been assigned a value) and false otherwise */
    public boolean isSetDoubleField() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID);
    }

    public void setDoubleFieldIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStringField() {
        return this.stringField;
    }

    public SmallStruct setStringField(@org.apache.thrift.annotation.Nullable java.lang.String stringField) {
        this.stringField = stringField;
        return this;
    }

    public void unsetStringField() {
        this.stringField = null;
    }

    /** Returns true if field stringField is set (has been assigned a value) and false otherwise */
    public boolean isSetStringField() {
        return this.stringField != null;
    }

    public void setStringFieldIsSet(boolean value) {
        if (!value) {
            this.stringField = null;
        }
    }

    /**
     *
     * @see TstEnum
     */
    @org.apache.thrift.annotation.Nullable
    public TstEnum getEnumField() {
        return this.enumField;
    }

    /**
     *
     * @see TstEnum
     */
    public SmallStruct setEnumField(@org.apache.thrift.annotation.Nullable TstEnum enumField) {
        this.enumField = enumField;
        return this;
    }

    public void unsetEnumField() {
        this.enumField = null;
    }

    /** Returns true if field enumField is set (has been assigned a value) and false otherwise */
    public boolean isSetEnumField() {
        return this.enumField != null;
    }

    public void setEnumFieldIsSet(boolean value) {
        if (!value) {
            this.enumField = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case BYTE_FIELD:
                if (value == null) {
                    unsetByteField();
                } else {
                    setByteField((java.lang.Byte) value);
                }
                break;

            case I16_FIELD:
                if (value == null) {
                    unsetI16Field();
                } else {
                    setI16Field((java.lang.Short) value);
                }
                break;

            case I32_FIELD:
                if (value == null) {
                    unsetI32Field();
                } else {
                    setI32Field((java.lang.Integer) value);
                }
                break;

            case I64_FIELD:
                if (value == null) {
                    unsetI64Field();
                } else {
                    setI64Field((java.lang.Long) value);
                }
                break;

            case DOUBLE_FIELD:
                if (value == null) {
                    unsetDoubleField();
                } else {
                    setDoubleField((java.lang.Double) value);
                }
                break;

            case STRING_FIELD:
                if (value == null) {
                    unsetStringField();
                } else {
                    setStringField((java.lang.String) value);
                }
                break;

            case ENUM_FIELD:
                if (value == null) {
                    unsetEnumField();
                } else {
                    setEnumField((TstEnum) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case BYTE_FIELD:
                return getByteField();

            case I16_FIELD:
                return getI16Field();

            case I32_FIELD:
                return getI32Field();

            case I64_FIELD:
                return getI64Field();

            case DOUBLE_FIELD:
                return getDoubleField();

            case STRING_FIELD:
                return getStringField();

            case ENUM_FIELD:
                return getEnumField();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case BYTE_FIELD:
                return isSetByteField();
            case I16_FIELD:
                return isSetI16Field();
            case I32_FIELD:
                return isSetI32Field();
            case I64_FIELD:
                return isSetI64Field();
            case DOUBLE_FIELD:
                return isSetDoubleField();
            case STRING_FIELD:
                return isSetStringField();
            case ENUM_FIELD:
                return isSetEnumField();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof SmallStruct)
            return this.equals((SmallStruct) that);
        return false;
    }

    public boolean equals(SmallStruct that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_byteField = true && this.isSetByteField();
        boolean that_present_byteField = true && that.isSetByteField();
        if (this_present_byteField || that_present_byteField) {
            if (!(this_present_byteField && that_present_byteField))
                return false;
            if (this.byteField != that.byteField)
                return false;
        }

        boolean this_present_i16Field = true && this.isSetI16Field();
        boolean that_present_i16Field = true && that.isSetI16Field();
        if (this_present_i16Field || that_present_i16Field) {
            if (!(this_present_i16Field && that_present_i16Field))
                return false;
            if (this.i16Field != that.i16Field)
                return false;
        }

        boolean this_present_i32Field = true && this.isSetI32Field();
        boolean that_present_i32Field = true && that.isSetI32Field();
        if (this_present_i32Field || that_present_i32Field) {
            if (!(this_present_i32Field && that_present_i32Field))
                return false;
            if (this.i32Field != that.i32Field)
                return false;
        }

        boolean this_present_i64Field = true && this.isSetI64Field();
        boolean that_present_i64Field = true && that.isSetI64Field();
        if (this_present_i64Field || that_present_i64Field) {
            if (!(this_present_i64Field && that_present_i64Field))
                return false;
            if (this.i64Field != that.i64Field)
                return false;
        }

        boolean this_present_doubleField = true && this.isSetDoubleField();
        boolean that_present_doubleField = true && that.isSetDoubleField();
        if (this_present_doubleField || that_present_doubleField) {
            if (!(this_present_doubleField && that_present_doubleField))
                return false;
            if (this.doubleField != that.doubleField)
                return false;
        }

        boolean this_present_stringField = true && this.isSetStringField();
        boolean that_present_stringField = true && that.isSetStringField();
        if (this_present_stringField || that_present_stringField) {
            if (!(this_present_stringField && that_present_stringField))
                return false;
            if (!this.stringField.equals(that.stringField))
                return false;
        }

        boolean this_present_enumField = true && this.isSetEnumField();
        boolean that_present_enumField = true && that.isSetEnumField();
        if (this_present_enumField || that_present_enumField) {
            if (!(this_present_enumField && that_present_enumField))
                return false;
            if (!this.enumField.equals(that.enumField))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetByteField()) ? 131071 : 524287);
        if (isSetByteField())
            hashCode = hashCode * 8191 + (int) (byteField);

        hashCode = hashCode * 8191 + ((isSetI16Field()) ? 131071 : 524287);
        if (isSetI16Field())
            hashCode = hashCode * 8191 + i16Field;

        hashCode = hashCode * 8191 + ((isSetI32Field()) ? 131071 : 524287);
        if (isSetI32Field())
            hashCode = hashCode * 8191 + i32Field;

        hashCode = hashCode * 8191 + ((isSetI64Field()) ? 131071 : 524287);
        if (isSetI64Field())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(i64Field);

        hashCode = hashCode * 8191 + ((isSetDoubleField()) ? 131071 : 524287);
        if (isSetDoubleField())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(doubleField);

        hashCode = hashCode * 8191 + ((isSetStringField()) ? 131071 : 524287);
        if (isSetStringField())
            hashCode = hashCode * 8191 + stringField.hashCode();

        hashCode = hashCode * 8191 + ((isSetEnumField()) ? 131071 : 524287);
        if (isSetEnumField())
            hashCode = hashCode * 8191 + enumField.getValue();

        return hashCode;
    }

    @Override
    public int compareTo(SmallStruct other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetByteField(), other.isSetByteField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetByteField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteField, other.byteField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI16Field(), other.isSetI16Field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI16Field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Field, other.i16Field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI32Field(), other.isSetI32Field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI32Field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Field, other.i32Field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetI64Field(), other.isSetI64Field());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetI64Field()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Field, other.i64Field);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDoubleField(), other.isSetDoubleField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDoubleField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleField, other.doubleField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStringField(), other.isSetStringField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringField, other.stringField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetEnumField(), other.isSetEnumField());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnumField()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumField, other.enumField);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("SmallStruct(");
        boolean first = true;

        if (isSetByteField()) {
            sb.append("byteField:");
            sb.append(this.byteField);
            first = false;
        }
        if (isSetI16Field()) {
            if (!first) sb.append(", ");
            sb.append("i16Field:");
            sb.append(this.i16Field);
            first = false;
        }
        if (isSetI32Field()) {
            if (!first) sb.append(", ");
            sb.append("i32Field:");
            sb.append(this.i32Field);
            first = false;
        }
        if (isSetI64Field()) {
            if (!first) sb.append(", ");
            sb.append("i64Field:");
            sb.append(this.i64Field);
            first = false;
        }
        if (isSetDoubleField()) {
            if (!first) sb.append(", ");
            sb.append("doubleField:");
            sb.append(this.doubleField);
            first = false;
        }
        if (isSetStringField()) {
            if (!first) sb.append(", ");
            sb.append("stringField:");
            if (this.stringField == null) {
                sb.append("null");
            } else {
                sb.append(this.stringField);
            }
            first = false;
        }
        if (isSetEnumField()) {
            if (!first) sb.append(", ");
            sb.append("enumField:");
            if (this.enumField == null) {
                sb.append("null");
            } else {
                sb.append(this.enumField);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SmallStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public SmallStructStandardScheme getScheme() {
            return new SmallStructStandardScheme();
        }
    }

    private static class SmallStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<SmallStruct> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, SmallStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BYTE_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.byteField = iprot.readByte();
                            struct.setByteFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // I16_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.i16Field = iprot.readI16();
                            struct.setI16FieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // I32_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.i32Field = iprot.readI32();
                            struct.setI32FieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // I64_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.i64Field = iprot.readI64();
                            struct.setI64FieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DOUBLE_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.doubleField = iprot.readDouble();
                            struct.setDoubleFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // STRING_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.stringField = iprot.readString();
                            struct.setStringFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // ENUM_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.enumField = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                            struct.setEnumFieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, SmallStruct struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetByteField()) {
                oprot.writeFieldBegin(BYTE_FIELD_FIELD_DESC);
                oprot.writeByte(struct.byteField);
                oprot.writeFieldEnd();
            }
            if (struct.isSetI16Field()) {
                oprot.writeFieldBegin(I16_FIELD_FIELD_DESC);
                oprot.writeI16(struct.i16Field);
                oprot.writeFieldEnd();
            }
            if (struct.isSetI32Field()) {
                oprot.writeFieldBegin(I32_FIELD_FIELD_DESC);
                oprot.writeI32(struct.i32Field);
                oprot.writeFieldEnd();
            }
            if (struct.isSetI64Field()) {
                oprot.writeFieldBegin(I64_FIELD_FIELD_DESC);
                oprot.writeI64(struct.i64Field);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDoubleField()) {
                oprot.writeFieldBegin(DOUBLE_FIELD_FIELD_DESC);
                oprot.writeDouble(struct.doubleField);
                oprot.writeFieldEnd();
            }
            if (struct.stringField != null) {
                if (struct.isSetStringField()) {
                    oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
                    oprot.writeString(struct.stringField);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.enumField != null) {
                if (struct.isSetEnumField()) {
                    oprot.writeFieldBegin(ENUM_FIELD_FIELD_DESC);
                    oprot.writeI32(struct.enumField.getValue());
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SmallStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public SmallStructTupleScheme getScheme() {
            return new SmallStructTupleScheme();
        }
    }

    private static class SmallStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<SmallStruct> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SmallStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetByteField()) {
                optionals.set(0);
            }
            if (struct.isSetI16Field()) {
                optionals.set(1);
            }
            if (struct.isSetI32Field()) {
                optionals.set(2);
            }
            if (struct.isSetI64Field()) {
                optionals.set(3);
            }
            if (struct.isSetDoubleField()) {
                optionals.set(4);
            }
            if (struct.isSetStringField()) {
                optionals.set(5);
            }
            if (struct.isSetEnumField()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetByteField()) {
                oprot.writeByte(struct.byteField);
            }
            if (struct.isSetI16Field()) {
                oprot.writeI16(struct.i16Field);
            }
            if (struct.isSetI32Field()) {
                oprot.writeI32(struct.i32Field);
            }
            if (struct.isSetI64Field()) {
                oprot.writeI64(struct.i64Field);
            }
            if (struct.isSetDoubleField()) {
                oprot.writeDouble(struct.doubleField);
            }
            if (struct.isSetStringField()) {
                oprot.writeString(struct.stringField);
            }
            if (struct.isSetEnumField()) {
                oprot.writeI32(struct.enumField.getValue());
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SmallStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.byteField = iprot.readByte();
                struct.setByteFieldIsSet(true);
            }
            if (incoming.get(1)) {
                struct.i16Field = iprot.readI16();
                struct.setI16FieldIsSet(true);
            }
            if (incoming.get(2)) {
                struct.i32Field = iprot.readI32();
                struct.setI32FieldIsSet(true);
            }
            if (incoming.get(3)) {
                struct.i64Field = iprot.readI64();
                struct.setI64FieldIsSet(true);
            }
            if (incoming.get(4)) {
                struct.doubleField = iprot.readDouble();
                struct.setDoubleFieldIsSet(true);
            }
            if (incoming.get(5)) {
                struct.stringField = iprot.readString();
                struct.setStringFieldIsSet(true);
            }
            if (incoming.get(6)) {
                struct.enumField = org.apache.thrift.partial.TstEnum.findByValue(iprot.readI32());
                struct.setEnumFieldIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

