/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.thrift.partial;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class InnerStruct implements org.apache.thrift.TBase<InnerStruct, InnerStruct._Fields>, java.io.Serializable, Cloneable, Comparable<InnerStruct> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InnerStruct");

    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InnerStructStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InnerStructTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable InnermostStruct value; // optional
    public int intValue; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        VALUE((short) 1, "value"),
        INT_VALUE((short) 2, "intValue");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // VALUE
                    return VALUE;
                case 2: // INT_VALUE
                    return INT_VALUE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __INTVALUE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.VALUE, _Fields.INT_VALUE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InnermostStruct.class)));
        tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InnerStruct.class, metaDataMap);
    }

    public InnerStruct() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InnerStruct(InnerStruct other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetValue()) {
            this.value = new InnermostStruct(other.value);
        }
        this.intValue = other.intValue;
    }

    @Override
    public InnerStruct deepCopy() {
        return new InnerStruct(this);
    }

    @Override
    public void clear() {
        this.value = null;
        setIntValueIsSet(false);
        this.intValue = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public InnermostStruct getValue() {
        return this.value;
    }

    public InnerStruct setValue(@org.apache.thrift.annotation.Nullable InnermostStruct value) {
        this.value = value;
        return this;
    }

    public void unsetValue() {
        this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
        return this.value != null;
    }

    public void setValueIsSet(boolean value) {
        if (!value) {
            this.value = null;
        }
    }

    public int getIntValue() {
        return this.intValue;
    }

    public InnerStruct setIntValue(int intValue) {
        this.intValue = intValue;
        setIntValueIsSet(true);
        return this;
    }

    public void unsetIntValue() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTVALUE_ISSET_ID);
    }

    /** Returns true if field intValue is set (has been assigned a value) and false otherwise */
    public boolean isSetIntValue() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTVALUE_ISSET_ID);
    }

    public void setIntValueIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTVALUE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case VALUE:
                if (value == null) {
                    unsetValue();
                } else {
                    setValue((InnermostStruct) value);
                }
                break;

            case INT_VALUE:
                if (value == null) {
                    unsetIntValue();
                } else {
                    setIntValue((java.lang.Integer) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case VALUE:
                return getValue();

            case INT_VALUE:
                return getIntValue();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case VALUE:
                return isSetValue();
            case INT_VALUE:
                return isSetIntValue();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof InnerStruct)
            return this.equals((InnerStruct) that);
        return false;
    }

    public boolean equals(InnerStruct that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_value = true && this.isSetValue();
        boolean that_present_value = true && that.isSetValue();
        if (this_present_value || that_present_value) {
            if (!(this_present_value && that_present_value))
                return false;
            if (!this.value.equals(that.value))
                return false;
        }

        boolean this_present_intValue = true && this.isSetIntValue();
        boolean that_present_intValue = true && that.isSetIntValue();
        if (this_present_intValue || that_present_intValue) {
            if (!(this_present_intValue && that_present_intValue))
                return false;
            if (this.intValue != that.intValue)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
        if (isSetValue())
            hashCode = hashCode * 8191 + value.hashCode();

        hashCode = hashCode * 8191 + ((isSetIntValue()) ? 131071 : 524287);
        if (isSetIntValue())
            hashCode = hashCode * 8191 + intValue;

        return hashCode;
    }

    @Override
    public int compareTo(InnerStruct other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValue()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetIntValue(), other.isSetIntValue());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIntValue()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValue, other.intValue);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("InnerStruct(");
        boolean first = true;

        if (isSetValue()) {
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
        }
        if (isSetIntValue()) {
            if (!first) sb.append(", ");
            sb.append("intValue:");
            sb.append(this.intValue);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (value != null) {
            value.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class InnerStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public InnerStructStandardScheme getScheme() {
            return new InnerStructStandardScheme();
        }
    }

    private static class InnerStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<InnerStruct> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, InnerStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.value = new InnermostStruct();
                            struct.value.read(iprot);
                            struct.setValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // INT_VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.intValue = iprot.readI32();
                            struct.setIntValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, InnerStruct struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.value != null) {
                if (struct.isSetValue()) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    struct.value.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetIntValue()) {
                oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
                oprot.writeI32(struct.intValue);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class InnerStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public InnerStructTupleScheme getScheme() {
            return new InnerStructTupleScheme();
        }
    }

    private static class InnerStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<InnerStruct> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, InnerStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetValue()) {
                optionals.set(0);
            }
            if (struct.isSetIntValue()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetValue()) {
                struct.value.write(oprot);
            }
            if (struct.isSetIntValue()) {
                oprot.writeI32(struct.intValue);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, InnerStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.value = new InnermostStruct();
                struct.value.read(iprot);
                struct.setValueIsSet(true);
            }
            if (incoming.get(1)) {
                struct.intValue = iprot.readI32();
                struct.setIntValueIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

