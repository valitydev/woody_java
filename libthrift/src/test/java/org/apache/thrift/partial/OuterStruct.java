/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.thrift.partial;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class OuterStruct implements org.apache.thrift.TBase<OuterStruct, OuterStruct._Fields>, java.io.Serializable, Cloneable, Comparable<OuterStruct> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OuterStruct");

    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField STRUCT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("structMap", org.apache.thrift.protocol.TType.MAP, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OuterStructStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OuterStructTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable InnerStruct value; // optional
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, InnerStruct> structMap; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        VALUE((short) 1, "value"),
        STRUCT_MAP((short) 2, "structMap");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // VALUE
                    return VALUE;
                case 2: // STRUCT_MAP
                    return STRUCT_MAP;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.VALUE, _Fields.STRUCT_MAP};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InnerStruct.class)));
        tmpMap.put(_Fields.STRUCT_MAP, new org.apache.thrift.meta_data.FieldMetaData("structMap", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InnerStruct.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OuterStruct.class, metaDataMap);
    }

    public OuterStruct() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OuterStruct(OuterStruct other) {
        if (other.isSetValue()) {
            this.value = new InnerStruct(other.value);
        }
        if (other.isSetStructMap()) {
            java.util.Map<java.lang.String, InnerStruct> __this__structMap = new java.util.HashMap<java.lang.String, InnerStruct>(other.structMap.size());
            for (java.util.Map.Entry<java.lang.String, InnerStruct> other_element : other.structMap.entrySet()) {

                java.lang.String other_element_key = other_element.getKey();
                InnerStruct other_element_value = other_element.getValue();

                java.lang.String __this__structMap_copy_key = other_element_key;

                InnerStruct __this__structMap_copy_value = new InnerStruct(other_element_value);

                __this__structMap.put(__this__structMap_copy_key, __this__structMap_copy_value);
            }
            this.structMap = __this__structMap;
        }
    }

    @Override
    public OuterStruct deepCopy() {
        return new OuterStruct(this);
    }

    @Override
    public void clear() {
        this.value = null;
        this.structMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InnerStruct getValue() {
        return this.value;
    }

    public OuterStruct setValue(@org.apache.thrift.annotation.Nullable InnerStruct value) {
        this.value = value;
        return this;
    }

    public void unsetValue() {
        this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
        return this.value != null;
    }

    public void setValueIsSet(boolean value) {
        if (!value) {
            this.value = null;
        }
    }

    public int getStructMapSize() {
        return (this.structMap == null) ? 0 : this.structMap.size();
    }

    public void putToStructMap(java.lang.String key, InnerStruct val) {
        if (this.structMap == null) {
            this.structMap = new java.util.HashMap<java.lang.String, InnerStruct>();
        }
        this.structMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, InnerStruct> getStructMap() {
        return this.structMap;
    }

    public OuterStruct setStructMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, InnerStruct> structMap) {
        this.structMap = structMap;
        return this;
    }

    public void unsetStructMap() {
        this.structMap = null;
    }

    /** Returns true if field structMap is set (has been assigned a value) and false otherwise */
    public boolean isSetStructMap() {
        return this.structMap != null;
    }

    public void setStructMapIsSet(boolean value) {
        if (!value) {
            this.structMap = null;
        }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case VALUE:
                if (value == null) {
                    unsetValue();
                } else {
                    setValue((InnerStruct) value);
                }
                break;

            case STRUCT_MAP:
                if (value == null) {
                    unsetStructMap();
                } else {
                    setStructMap((java.util.Map<java.lang.String, InnerStruct>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case VALUE:
                return getValue();

            case STRUCT_MAP:
                return getStructMap();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case VALUE:
                return isSetValue();
            case STRUCT_MAP:
                return isSetStructMap();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof OuterStruct)
            return this.equals((OuterStruct) that);
        return false;
    }

    public boolean equals(OuterStruct that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_value = true && this.isSetValue();
        boolean that_present_value = true && that.isSetValue();
        if (this_present_value || that_present_value) {
            if (!(this_present_value && that_present_value))
                return false;
            if (!this.value.equals(that.value))
                return false;
        }

        boolean this_present_structMap = true && this.isSetStructMap();
        boolean that_present_structMap = true && that.isSetStructMap();
        if (this_present_structMap || that_present_structMap) {
            if (!(this_present_structMap && that_present_structMap))
                return false;
            if (!this.structMap.equals(that.structMap))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
        if (isSetValue())
            hashCode = hashCode * 8191 + value.hashCode();

        hashCode = hashCode * 8191 + ((isSetStructMap()) ? 131071 : 524287);
        if (isSetStructMap())
            hashCode = hashCode * 8191 + structMap.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(OuterStruct other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValue()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetStructMap(), other.isSetStructMap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStructMap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structMap, other.structMap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public _Fields[] getFields() {
        return _Fields.values();
    }

    public java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> getFieldMetaData() {
        return metaDataMap;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("OuterStruct(");
        boolean first = true;

        if (isSetValue()) {
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
        }
        if (isSetStructMap()) {
            if (!first) sb.append(", ");
            sb.append("structMap:");
            if (this.structMap == null) {
                sb.append("null");
            } else {
                sb.append(this.structMap);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (value != null) {
            value.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class OuterStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public OuterStructStandardScheme getScheme() {
            return new OuterStructStandardScheme();
        }
    }

    private static class OuterStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<OuterStruct> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, OuterStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.value = new InnerStruct();
                            struct.value.read(iprot);
                            struct.setValueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // STRUCT_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map390 = iprot.readMapBegin();
                                struct.structMap = new java.util.HashMap<java.lang.String, InnerStruct>(2 * _map390.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key391;
                                @org.apache.thrift.annotation.Nullable InnerStruct _val392;
                                for (int _i393 = 0; _i393 < _map390.size; ++_i393) {
                                    _key391 = iprot.readString();
                                    _val392 = new InnerStruct();
                                    _val392.read(iprot);
                                    struct.structMap.put(_key391, _val392);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setStructMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, OuterStruct struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.value != null) {
                if (struct.isSetValue()) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    struct.value.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.structMap != null) {
                if (struct.isSetStructMap()) {
                    oprot.writeFieldBegin(STRUCT_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.structMap.size()));
                        for (java.util.Map.Entry<java.lang.String, InnerStruct> _iter394 : struct.structMap.entrySet()) {
                            oprot.writeString(_iter394.getKey());
                            _iter394.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class OuterStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public OuterStructTupleScheme getScheme() {
            return new OuterStructTupleScheme();
        }
    }

    private static class OuterStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<OuterStruct> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, OuterStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetValue()) {
                optionals.set(0);
            }
            if (struct.isSetStructMap()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetValue()) {
                struct.value.write(oprot);
            }
            if (struct.isSetStructMap()) {
                {
                    oprot.writeI32(struct.structMap.size());
                    for (java.util.Map.Entry<java.lang.String, InnerStruct> _iter395 : struct.structMap.entrySet()) {
                        oprot.writeString(_iter395.getKey());
                        _iter395.getValue().write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, OuterStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.value = new InnerStruct();
                struct.value.read(iprot);
                struct.setValueIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TMap _map396 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT);
                    struct.structMap = new java.util.HashMap<java.lang.String, InnerStruct>(2 * _map396.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key397;
                    @org.apache.thrift.annotation.Nullable InnerStruct _val398;
                    for (int _i399 = 0; _i399 < _map396.size; ++_i399) {
                        _key397 = iprot.readString();
                        _val398 = new InnerStruct();
                        _val398.read(iprot);
                        struct.structMap.put(_key397, _val398);
                    }
                }
                struct.setStructMapIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

